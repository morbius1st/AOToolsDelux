<Window x:Name="win"
		x:Class="CSToolsStudies.Windows.Test1"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:local="clr-namespace:CSToolsStudies.Windows"
		xmlns:c="clr-namespace:CSToolsStudies"
		xmlns:cs="clr-namespace:CSToolsStudies.Windows.Support"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:res="clr-namespace:CSToolsStudies.Windows.ResourceFiles.XamlResources"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		Title="Test1"
		Height="1200"
		Width="1400"
		Background="{DynamicResource Window.Bg.IsSel}"
		DataContext="{Binding ElementName=win}"
		FontSize="{DynamicResource FontSize.Normal}"
		Foreground="{DynamicResource Window.Fg.IsSel}"
		Loaded="win_Loaded"
		LocationChanged="win_LocationChanged"
		ResizeMode="NoResize"
		WindowStyle="SingleBorderWindow"
		mc:Ignorable="d"
		>

	<Window.Resources>
		<ResourceDictionary>

			<!--
				conditions
				
				BASE:
				not locked / is selected / not editing
				(IsSelected == true && IsEditing == false)
				
				762
				not locked / is selected / is editing
				(IsSelected == true && IsEditing == true)
				
				981
				not locked / not selected (na locked / na editable)
				(IsSelected == false)
				
				1200
				not locked / is selected / no editing
				(IsSelected == true && ReadOnly == true)
				
				1498
				is locked / is selected / na editing
				(IsSelected == true && IsLocked == true)
			-->

			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="/Windows/ResourceFiles/XamlResources/MasterColorList.xaml" />
				<ResourceDictionary Source="/Windows/ResourceFiles/XamlResources/VisualStates.xaml" />
				<ResourceDictionary Source="/Windows/Skin/CyberStudioSkin.xaml" />
				<ResourceDictionary Source="/Windows/Support/CsExpander.xaml" />
				<ResourceDictionary Source="/Windows/Support/CsScrollBar.xaml" />
				<ResourceDictionary Source="/Windows/Support/CsScrollViewer.xaml" />
				<ResourceDictionary Source="/Windows/Support/CsComboBox.xaml" />
				<ResourceDictionary Source="/Windows/Support/CsButtons.xaml" />
			</ResourceDictionary.MergedDictionaries>

			<!--#region > border styles-->


			<Style x:Key="BdrRoot" TargetType="Border">
				<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDisabled)}" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="CornerRadius" Value="{StaticResource CornerRadius.Std}" />
			</Style>

			<Style x:Key="BdrHeader"
					BasedOn="{StaticResource BdrRoot}"
					TargetType="Border"
					>
				<Setter Property="CornerRadius" Value="{StaticResource CornerRadius.Sm}" />
				<Setter Property="Background" Value="{StaticResource Header.Bg.IsSel}" />
			</Style>

			<Style x:Key="BdrUnitValTitle"
					BasedOn="{StaticResource BdrRoot}"
					TargetType="Border"
					>
				<Setter Property="MinWidth" Value="40" />
				<Setter Property="CornerRadius" Value="{StaticResource UnitValTitle.CornerRadius}" />
				<Setter Property="BorderThickness" Value="{StaticResource UnitValTitle.BorderThk}" />
				<Setter Property="BorderBrush" Value="{StaticResource UnitValTitle.Bdr.IsSel}" />
				<Setter Property="Background" Value="{StaticResource UnitValTitle.Bg.IsSel}" />
			</Style>

			<Style x:Key="BdrUnitValue"
					BasedOn="{StaticResource BdrRoot}"
					TargetType="Border"
					>
				<Setter Property="MinWidth" Value="40" />
				<Setter Property="CornerRadius" Value="{StaticResource UnitValue.CornerRadius}" />
				<Setter Property="BorderThickness" Value="{StaticResource UnitValue.BorderThk}" />
				<Setter Property="BorderBrush" Value="{StaticResource UnitValue.Bdr.IsSel}" />
				<Setter Property="Background" Value="{StaticResource UnitValue.Bg.IsSel}" />
			</Style>


			<!--  trigger styles  -->

			<Style x:Key="BdrTrigsBase"
					BasedOn="{StaticResource BdrRoot}"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDisabled)}" />
				<Setter Property="Margin" Value="1" />
			</Style>

			<Style x:Key="BdrIsSelectedTrigger"
					BasedOn="{StaticResource BdrTrigsBase}"
					TargetType="Border"
					>
				<Style.Triggers>
					<DataTrigger Binding="{Binding ElementName=win, Path=IsSelected}" Value="True">
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="BdrIsEnabledTrigger"
					BasedOn="{StaticResource BdrTrigsBase}"
					TargetType="Border"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="True">
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="BdrAllTriggers"
					BasedOn="{StaticResource BdrTrigsBase}"
					TargetType="Border"
					>
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="False" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditing)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsReadOnly}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsReadOnly)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsLocked}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsLocked)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="True" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.DoesMouseOver)}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditingMouseOver)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>


			<Style x:Key="BdrAllTrigTitleNoEd"
					BasedOn="{StaticResource BdrAllTriggers}"
					TargetType="Border"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource TitleReadOnly.Bg.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource TitleReadOnly.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource TitleReadOnly.Bg.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource TitleReadOnly.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource TitleReadOnly.Bg.ReadOnly}" />
			</Style>


			<Style x:Key="BdrAllTrigCanEd"
					BasedOn="{StaticResource BdrAllTriggers}"
					TargetType="Border"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource TitleCanEdit.Bg.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource TitleCanEdit.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource TitleCanEdit.Bg.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource TitleCanEdit.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource TitleCanEdit.Bg.ReadOnly}" />
			</Style>

			<Style x:Key="BdrAllTrigNoEd"
					BasedOn="{StaticResource BdrAllTriggers}"
					TargetType="Border"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource ReadOnly.Bg.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource ReadOnly.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource ReadOnly.Bg.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource ReadOnly.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource ReadOnly.Bg.ReadOnly}" />
			</Style>

			<Style x:Key="BdrAllTrigCanEdit"
					BasedOn="{StaticResource BdrAllTriggers}"
					TargetType="Border"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource CanEdit.Bg.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource CanEdit.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource CanEdit.Bg.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource CanEdit.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource CanEdit.Bg.ReadOnly}" />
				<Setter Property="cs:VisualStates.DoesMouseOver" Value="True" />
				<Setter Property="cs:VisualStates.BgIsEditingMouseOver" Value="{StaticResource CanEdit.Mo.IsEditg}" />
			</Style>


			<Style x:Key="BdrAllTrigCanEditIcon"
					BasedOn="{StaticResource BdrAllTriggers}"
					TargetType="Border"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource CanEdit.Bg.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource CanEdit.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource CanEdit.Bg.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource CanEdit.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource CanEdit.Bg.ReadOnly}" />
				<Setter Property="cs:VisualStates.DoesMouseOver" Value="True" />
				<Setter Property="cs:VisualStates.BgIsEditingMouseOver" Value="{StaticResource CanEdit.Icon.Mo.IsEditg}" />
			</Style>

			<Style x:Key="BdrAllTrigAction1"
					BasedOn="{StaticResource BdrAllTriggers}"
					TargetType="Border"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource Action1.Bg.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource Action1.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource Action1.Bg.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource Action1.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource Action1.Bg.ReadOnly}" />
				<Setter Property="cs:VisualStates.DoesMouseOver" Value="True" />
				<Setter Property="cs:VisualStates.BgIsEditingMouseOver" Value="{StaticResource Action1.Mo.IsEditg}" />
			</Style>

			<Style x:Key="BdrAllTrigAction1Icon"
					BasedOn="{StaticResource BdrAllTriggers}"
					TargetType="Border"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource Action1.Bg.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource Action1.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource Action1.Bg.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource Action1.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource Action1.Bg.ReadOnly}" />
				<Setter Property="cs:VisualStates.DoesMouseOver" Value="True" />
				<Setter Property="cs:VisualStates.BgIsEditingMouseOver" Value="{StaticResource Action1.Icon.Mo.IsEditg}" />
			</Style>

			<Style x:Key="BdrAllTrigAction2"
					BasedOn="{StaticResource BdrAllTriggers}"
					TargetType="Border"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource Action2.Bg.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource Action2.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource Action2.Bg.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource Action2.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource Action2.Bg.ReadOnly}" />
				<Setter Property="cs:VisualStates.DoesMouseOver" Value="True" />
				<Setter Property="cs:VisualStates.BgIsEditingMouseOver" Value="{StaticResource Action2.Mo.IsEditg}" />
			</Style>

			<Style x:Key="BdrAllTrigAction2Icon"
					BasedOn="{StaticResource BdrAllTriggers}"
					TargetType="Border"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource Action2.Bg.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource Action2.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource Action2.Bg.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource Action2.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource Action2.Bg.ReadOnly}" />
				<Setter Property="cs:VisualStates.DoesMouseOver" Value="True" />
				<Setter Property="cs:VisualStates.BgIsEditingMouseOver" Value="{StaticResource Action2.Icon.Mo.IsEditg}" />
			</Style>


			<Style x:Key="BdrAllTrigSubTitle"
					BasedOn="{StaticResource BdrAllTriggers}"
					TargetType="Border"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource SubTitle.Bg.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource SubTitle.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource SubTitle.Bg.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource SubTitle.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource SubTitle.Bg.ReadOnly}" />
			</Style>

			<!--#endregion-->

			<!--#region > textblock styles-->

			<Style x:Key="TblkRoot" TargetType="TextBlock">
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
			</Style>

			<Style x:Key="TblkHeader"
					BasedOn="{StaticResource TblkRoot}"
					TargetType="TextBlock"
					>
				<Setter Property="Foreground" Value="{StaticResource Header.Fg.IsSel}" />
				<Setter Property="Padding" Value="5,0,0,2" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.XLarge}" />
			</Style>

			<Style x:Key="TblkUnitValTitle"
					BasedOn="{StaticResource TblkRoot}"
					TargetType="TextBlock"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource UnitValTitle.Fg.IsSel}" />
				<Setter Property="Padding" Value="8,2,9,4" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Style>

			<Style x:Key="TblkUnitValue"
					BasedOn="{StaticResource TblkRoot}"
					TargetType="TextBlock"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource UnitValue.Fg.IsSel}" />
				<Setter Property="Padding" Value="8,2,9,4" />
				<Setter Property="HorizontalAlignment" Value="Center" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Style>


			<!--  trigger styles  -->

			<Style x:Key="TblkTrigsBase"
					BasedOn="{StaticResource TblkRoot}"
					TargetType="TextBlock"
					>
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
				<Setter Property="Padding" Value="5,0,0,2" />
				<Setter Property="Margin" Value="1" />
			</Style>

			<Style x:Key="TblkIsSelectedTrigger"
					BasedOn="{StaticResource TblkTrigsBase}"
					TargetType="TextBlock"
					>
				<Style.Triggers>
					<DataTrigger Binding="{Binding ElementName=win, Path=IsSelected}" Value="True">
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="TblkIsEnabledTrigger"
					BasedOn="{StaticResource TblkTrigsBase}"
					TargetType="TextBlock"
					>
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="True">
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="TblkAllTriggers"
					BasedOn="{StaticResource TblkTrigsBase}"
					TargetType="TextBlock"
					>
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="False" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsReadOnly}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsLocked}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>

			<Style x:Key="TblkAllTrigTitleNoEd"
					BasedOn="{StaticResource TblkAllTriggers}"
					TargetType="TextBlock"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource TitleReadOnly.Fg.NotSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource TitleReadOnly.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource TitleReadOnly.Fg.IsLocked}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource TitleReadOnly.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource TitleReadOnly.Fg.ReadOnly}" />
			</Style>

			<Style x:Key="TblkAllTrigCanEd"
					BasedOn="{StaticResource TblkAllTriggers}"
					TargetType="TextBlock"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource TitleCanEdit.Fg.NotSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource TitleCanEdit.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource TitleCanEdit.Fg.IsLocked}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource TitleCanEdit.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource TitleCanEdit.Fg.ReadOnly}" />
			</Style>

			<Style x:Key="TblkAllTrigNoEd"
					BasedOn="{StaticResource TblkAllTriggers}"
					TargetType="TextBlock"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource ReadOnly.Fg.NotSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource ReadOnly.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource ReadOnly.Fg.IsLocked}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource ReadOnly.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource ReadOnly.Fg.ReadOnly}" />
			</Style>

			<Style x:Key="TblkAllTrigAction1"
					BasedOn="{StaticResource TblkAllTriggers}"
					TargetType="TextBlock"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource Action1.Fg.NotSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource Action1.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource Action1.Fg.IsLocked}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource Action1.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource Action1.Fg.ReadOnly}" />
			</Style>

			<Style x:Key="TblkAllTrigSubTitle"
					BasedOn="{StaticResource TblkAllTriggers}"
					TargetType="TextBlock"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource SubTitle.Fg.NotSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource SubTitle.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource SubTitle.Fg.IsLocked}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource SubTitle.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource SubTitle.Fg.ReadOnly}" />
			</Style>

			<!--#endregion-->

			<!--#region > textbox styles-->

			<Style x:Key="TbxRoot" TargetType="TextBox">
				<Setter Property="Padding" Value="0" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
			</Style>






			<!--  trigger styles  -->

			<Style x:Key="TbxTrigsBase"
					BasedOn="{StaticResource TbxRoot}"
					TargetType="TextBox"
					>
				<Setter Property="Padding" Value="5,0,0,2" />
			</Style>

			<Style x:Key="TbxAllTriggers"
					BasedOn="{StaticResource TbxTrigsBase}"
					TargetType="TextBox"
					>
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="False" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsReadOnly}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsLocked}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>

			<Style x:Key="TbxAllTrigsCanEdit"
					BasedOn="{StaticResource TbxAllTriggers}"
					TargetType="TextBox"
					>
				<Setter Property="HorizontalAlignment" Value="left" />
				<Setter Property="TextAlignment" Value="left" />
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource CanEdit.Fg.NotSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource CanEdit.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource CanEdit.Fg.IsLocked}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource CanEdit.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource CanEdit.Fg.ReadOnly}" />
			</Style>

			<!--#endregion-->

			<!--#region > stack panel styles-->

			<Style x:Key="StkPnlBase" TargetType="StackPanel">
				<Setter Property="Margin" Value="0" />
				<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDisabled)}" />
			</Style>


			<!--  trigger styles  -->

			<Style x:Key="StkPnlAllTriggers"
					BasedOn="{StaticResource StkPnlBase}"
					TargetType="StackPanel"
					>
				<Setter Property="Margin" Value="4,4,8,4" />
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="False" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditing)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsReadOnly}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsReadOnly)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsLocked}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsLocked)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="StkPnlAllTrigsSpAction2"
					BasedOn="{StaticResource StkPnlAllTriggers}"
					TargetType="StackPanel"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource SubTitle.Gb.NotSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource SubTitle.Gb.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource SubTitle.Gb.IsLocked}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource SubTitle.Gb.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsReadOnly" Value="{StaticResource SubTitle.Gb.ReadOnly}" />
			</Style>


			<!--#endregion-->

			<!--#region > path styles-->

			<Style x:Key="PathBase" TargetType="Path">
				<Setter Property="Margin" Value="0" />
				<Setter Property="HorizontalAlignment" Value="Right" />
				<Setter Property="Stretch" Value="Uniform" />
				<Setter Property="VerticalAlignment" Value="Stretch" />
				<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeomDisabled)}" />
				<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
			</Style>


			<!--  trigger styles  -->

			<Style x:Key="PathIsSelectedTrigger"
					BasedOn="{StaticResource PathBase}"
					TargetType="Path"
					>
				<Style.Triggers>
					<DataTrigger Binding="{Binding ElementName=win, Path=IsSelected}" Value="True">
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="PathAllTriggersVarIcons"
					BasedOn="{StaticResource PathBase}"
					TargetType="Path"
					>
				<Setter Property="Margin" Value="4,4,8,4" />
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="False" />
							<Condition Binding="{Binding ElementName=win, Path=IsReadOnly}" Value="False" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
						<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeometryIsSel)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
						<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeometryIsEditing)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="False" />
							<Condition Binding="{Binding ElementName=win, Path=IsReadOnly}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
						<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeometryIsReadOnly)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsLocked}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
						<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeometryIsLocked)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>

			<Style x:Key="PathAllTriggersFixedIcons"
					BasedOn="{StaticResource PathBase}"
					TargetType="Path"
					>
				<Setter Property="Margin" Value="4,4,8,4" />
				<Setter Property="Data" Value="{StaticResource IconGeomIsSelected}" />
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="False" />
							<Condition Binding="{Binding ElementName=win, Path=IsReadOnly}" Value="False" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
						<Setter Property="Data" Value="{StaticResource IconGeomIsSelected}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
						<Setter Property="Data" Value="{StaticResource IconGeomIsEditing}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="False" />
							<Condition Binding="{Binding ElementName=win, Path=IsReadOnly}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
						<Setter Property="Data" Value="{StaticResource IconGeomReadOnly}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsLocked}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
						<Setter Property="Data" Value="{StaticResource IconGeomIsLocked}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>


			<Style x:Key="PathAllTriggersFixedIconsAction1"
					BasedOn="{StaticResource PathAllTriggersFixedIcons}"
					TargetType="Path"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource Action1.Fg.NotSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource Action1.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource Action1.Fg.IsLocked}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource Action1.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource Action1.Fg.ReadOnly}" />
			</Style>

			<Style x:Key="PathAllTriggersFixedIconsAction2"
					BasedOn="{StaticResource PathAllTriggersFixedIcons}"
					TargetType="Path"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource Action2.Fg.NotSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource Action2.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource Action2.Fg.IsLocked}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource Action2.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource Action2.Fg.ReadOnly}" />
			</Style>

			<Style x:Key="PathAllTriggersFixedIconsCanEdit"
					BasedOn="{StaticResource PathAllTriggersFixedIcons}"
					TargetType="Path"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource CanEdit.Fg.NotSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource CanEdit.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource CanEdit.Fg.IsLocked}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource CanEdit.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource CanEdit.Fg.ReadOnly}" />
			</Style>

			<!--#endregion-->

			<!--#region > button styles-->

			<Style x:Key="BtnBase" TargetType="Button">
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="Foreground" Value="white" />
			</Style>

			<Style x:Key="BtnCanEditClear"
					BasedOn="{StaticResource BtnBase}"
					TargetType="Button"
					>
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Padding" Value="0,-1,0,-4" />
				<Setter Property="Visibility" Value="Visible" />

				<Setter Property="FontFamily" Value="Segoe UI Symbol" />
				<Setter Property="Template" Value="{DynamicResource Button.Stealth.ControlTemplate}" />
			</Style>

			<!--#endregion-->

			<!--#region > checkbox styles-->

			<Style x:Key="CkbxOptionMarkFocusVisual" TargetType="CheckBox">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle Margin="14,0,0,0"
									SnapsToDevicePixels="true"
									Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
									StrokeDashArray="1 2"
									StrokeThickness="1"
									/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="CkbxFocusVisual" TargetType="CheckBox">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle Margin="2"
									SnapsToDevicePixels="true"
									Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
									StrokeDashArray="1 2"
									StrokeThickness="1"
									/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="Ckbx.Lv1.Style" TargetType="{x:Type CheckBox}">
				<Setter Property="IsEnabled" Value="True" />
				<Setter Property="Padding" Value="2,0,0,0" />
				<Setter Property="Margin" Value="8,-2,8,2" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource CkbxFocusVisual}" />
				<Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
				<Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
				<Setter Property="Foreground" Value="{StaticResource Fg.IsSel}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type CheckBox}">
							<Border x:Name="checkBoxControlBorder"
									BorderBrush="Transparent"
									BorderThickness="1"
									CornerRadius="6"
									Padding="{TemplateBinding Padding}"
									>

								<Grid x:Name="templateRoot"
										Background="Transparent"
										HorizontalAlignment="Left"
										SnapsToDevicePixels="True"
										>

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>

									<Border x:Name="checkBoxBorder"
											Grid.Column="0"
											Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}"
											Background="{TemplateBinding Background}"
											BorderBrush="{TemplateBinding BorderBrush}"
											BorderThickness="1"
											Margin="{Binding RelativeSource={RelativeSource Self}, Path=(cs:CsCheckBoxAp.CheckBoxBoxMargin)}"
											VerticalAlignment="Stretch"
											>

									</Border>

									<Grid x:Name="markGrid" Grid.Column="0">
										<Path x:Name="optionMark"
												Data="F0 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
												Fill="{StaticResource OptionMark.Static.Glyph}"
												Margin="{Binding RelativeSource={RelativeSource Self}, Path=(cs:CsCheckBoxAp.CheckBoxCheckMargin)}"
												Opacity="0"
												Stretch="Uniform"
												Stroke="white"
												StrokeThickness="0"
												VerticalAlignment="Stretch"
												/>
										<Rectangle x:Name="indeterminateMark"
												Fill="{StaticResource OptionMark.Indeterminant.Fill}"
												Margin="{Binding RelativeSource={RelativeSource Self}, Path=(cs:CsCheckBoxAp.CheckBoxBoxMargin)}"
												Opacity="0"
												VerticalAlignment="Stretch"
												/>

									</Grid>

									<ContentPresenter x:Name="contentPresenter"
											Grid.Column="1"
											Focusable="False"
											HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											Margin="5,0,0,1"
											RecognizesAccessKey="True"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>

								<!-- <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="False"> -->
								<!-- <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsEnabled}" Value="False"> -->
								<!--    -->
								<!--    -->
								<!-- </DataTrigger> -->
								<Trigger Property="HasContent" Value="true">
									<Setter Property="FocusVisualStyle" Value="{StaticResource CkbxOptionMarkFocusVisual}" />
								</Trigger>
								<!-- <Setter Property="Padding" Value="4,-1,0,0" /> -->
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="BorderBrush" TargetName="checkBoxControlBorder" Value="{StaticResource OptionMark.MouseOver.Border}" />
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
									<Setter Property="Background" Value="{StaticResource OptionMark.MouseOver.Background}" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{StaticResource Fg.NotSel}" />
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}" />
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}" />
									<Setter Property="Background" Value="{StaticResource OptionMark.Disabled.Background}" />
									<Setter Property="BorderBrush" Value="{StaticResource OptionMark.Disabled.Border}" />
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}" />
									<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}" />
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}" />
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}" />
								</Trigger>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Opacity" TargetName="optionMark" Value="1" />
									<Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
								</Trigger>
								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter Property="Opacity" TargetName="optionMark" Value="0" />
									<Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="CkbxBase"
					BasedOn="{StaticResource Ckbx.Lv1.Style}"
					TargetType="CheckBox"
					>
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
			</Style>


			<!--  trigger styles  -->

			<Style x:Key="CkbxAllTriggers"
					BasedOn="{StaticResource CkbxBase}"
					TargetType="CheckBox"
					>
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="False" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsEditing}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsReadOnly}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding ElementName=win, Path=IsSelected}" Value="True" />
							<Condition Binding="{Binding ElementName=win, Path=IsLocked}" Value="True" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="CkbxAllTriggersCbx"
					BasedOn="{StaticResource CkbxAllTriggers}"
					TargetType="CheckBox"
					>
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource Action2.Fg.NotSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource Action2.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource Action2.Fg.IsLocked}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource Action2.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource Action2.Fg.ReadOnly}" />
			</Style>

			<!--#endregion-->

			<!--#region > combobox styles-->

			<!--  trigger styles  -->

			<!--  default / disabled  -->
			<Style x:Key="CbxRoot"
					BasedOn="{StaticResource CsComboBoxStyle}"
					TargetType="ComboBox"
					>
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
				<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDisabled)}" />
			</Style>

			<!--#endregion-->





			<!--
				element categories
				background/	 border
				foreground	brsh/thk
				*** border (Bdr)
				border 					  -> UIElement -> FrameworkElement -> Decorator			n						n
				-> border			y / y				y / y
				*** textblock (Tblk)
				textblock 				-> UIElement -> FrameworkElement -> textblock     y / y				n / n
				
				*** control (Ctrl)
				textbox 				  -> UIElement -> FrameworkElement -> Control				y / y				y / y
				checkbox 				  -> UIElement -> FrameworkElement -> Control					|						|
				* border
				* path
				combobox 				  -> UIElement -> FrameworkElement -> Control					|						|
				* border
				* textbox
				* path
				* toggle button
				button 					  -> UIElement -> FrameworkElement -> Control					|						|
				label 					  -> UIElement -> FrameworkElement -> Control					|						|
				radiobutton 			-> UIElement -> FrameworkElement -> Control					|						|
				*> path
				*> toggle button
				togglebutton 	    -> UIElement -> FrameworkElement -> Control					|						|
				expander				  -> UIElement -> FrameworkElement -> Control					v						v
				
				*** panel	(Pnl)
				panel 					  -> UIElement -> FrameworkElement -> panel					y / n				n / n
				canvas 					  -> UIElement -> FrameworkElement -> panel						|						|
				stackpanel 				-> UIElement -> FrameworkElement -> panel						|						|
				dockpanel 				-> UIElement -> FrameworkElement -> panel						v						v
				
				*** shapes (Shp)
				stroke
				fill				brsh/thk
				shape					    -> UIElement -> FrameworkElement -> shape						n					y / y
				path					    -> UIElement -> FrameworkElement -> shape
			-->


			<!--
				trigger levels
												Gbdr (L1)			Fg (L1)				Bg (L1)			Icon (fill) (L1)		Fg (L2)				Bg (L2)			Icon (fill) (L2)
				disabled			BgDisabled		FgDisabled		BgDisabled	IconGeoDisabled			FgDisabled		BgDisabled	IconGeoDisabled
				not sel				BgNotSel			FgNotSel			BgNotSel		IconGeoNotSel				FgNotSel			BgNotSel		IconGeoNotSel
				sel						BgIsSel				FgIsSel				BgIsSel			IconGeoIsSel				FgIsSel				BgIsSel			IconGeoIsSel		
				editg																																			FgIsEditg			BgIsEditg		IconGeoIsEditg	

																																										Fg (L3)				Bg (L3)			Icon (fill) (L3)
				readonly																																	FgIsRo				BgIsRo			IconGeoIsRo		

																																										Fg (L4)				Bg (L4)			Icon (fill) (L4)
				locked																																		FgIsLocked		BgIsLocked	IconGeoIsLocked



																																										disabled	focused																mouse
				>>> level 1 <<<																															/enabled	(wihtin)	selected	readonly	locked	over
					*** disabled 																						bdr | ctrl				FALSE			x					x					x					x				x
								(default) (no trigger needed) (set in "root")
					*** not selected																				bdr	wo mouseover  TRUE			x					FALSE			FALSE			FALSE		n
								(when (is/not (no editing) 												bdr	w mouseover		TRUE			TRUE-in		FALSE			FALSE			FALSE		y (not editing)
								or (is/not (locked))) 														ctrl							TRUE			FALSE			FALSE			FALSE			FALSE		y

					*** selected 																						bdr	wo mouseover	TRUE			x					TRUE			FALSE			FALSE		n
								(when (is/not (no editing) or not (locked))				bdr w mouseover		TRUE			TRUE-in		TRUE			FALSE			FALSE		y (not editing)

					COLORS used:  ...Disabled  |  ...NotSel  |  ...IsSel

																																	ctrl							TRUE			FALSE			TRUE			FALSE			FALSE		y
				>>> level 2 <<<
					level 1 +	
					*** is editing																					bdr wo mouseover	TRUE			x					TRUE			FALSE			FALSE		n
								(when is (selected) && not (locked))							bdr w mouseover		TRUE			TRUE-in		TRUE			FALSE			FALSE		y (is editing)
																																	ctrl | bdr&ctrl		TRUE			TRUE			TRUE			FALSE			FALSE		y
					COLORS used:  ...IsEditing

				>>> level 3 <<<
					level 2 +	
					*** is readonly																					bdr wo mouseover	TRUE			x					x					TRUE			FALSE		n
								(aka noediting)																		bdr w mouseover		TRUE			TRUE-in		x					TRUE			FALSE		n (is editing)
								(when is (selected) && not (locked))							ctrl | bdr&ctrl		TRUE			x					x					TRUE			FALSE		y
	
					COLORS used:  ...IsReadOnly

				>>> level 4 <<<
					level 2 +
					*** is locked 																					bdr | ctrl					x				x					x					x					TRUE		n
								(when is (selected) && (na (no editing)))

					COLORS used:  ...IsLocked

				>>> level 4 <<<
					level x +
								(can be added to any level above
										but level 3 is expected [level 43] )
					*** is good (is (isgoodorbad))													bdr | bdr&ctrl		(per prior level)			change border color to ...
					*** is bad  (not (isgoodorbad))													bdr | bdr&ctrl		(per prior level)			change border color to ...
			-->

			<!--  basic sets the disabled value  -->
			<!--  border  -->
			<Style x:Key="BdrBasic" TargetType="Border">
				<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDisabled)}" />
				<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrDisabled)}" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
			</Style>

			<!--  textblock  -->
			<Style x:Key="TblkBasic" TargetType="TextBlock">
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
			</Style>

			<!--  control (incl. textbox, button  -->
			<Style x:Key="CtrlBasic" TargetType="Control">
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
			</Style>

			<!--  control (control with interior border -> e.g. combobox)  -->
			<Style x:Key="CtrlWithBdrBasic" x:Name="CtrlBdrTrigsBasic"
					TargetType="Control"
					>
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
				<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDisabled)}" />
				<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrDisabled)}" />
				<Setter Property="cs:CsCommonAp.BgCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgNotEditingMouseOver)}" />
				<Setter Property="cs:CsCommonAp.FgCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgNotEditingMouseOver)}" />
				<Setter Property="cs:CsCommonAp.BdrCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrNotEditingMouseOver)}" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
			</Style>

			<!--  panel  -->
			<Style x:Key="PnlBasic" TargetType="Panel">
				<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDisabled)}" />
				<Setter Property="Margin" Value="0" />
			</Style>


			<!--  level 1  -->
			<!--  selected / not selected  -->
			<!--  border without mouseover  -->
			<!-- <Style x:Key="BdrWoMoTrigs.L1" -->
			<!-- 		BasedOn="{StaticResource BdrBasic}" -->
			<!-- 		TargetType="Border" -->
			<!-- 		> -->
			<!-- 	~1~  disabled  @1@ -->
			<!-- 	~1~  from root  @1@ -->
			<!-- 	<Style.Triggers> -->
			<!-- -->
			<!-- 		~1~  not selected  @1@ -->
			<!-- 		<MultiDataTrigger x:Name="BdrTrigsL1NotSel"> -->
			<!-- 			<MultiDataTrigger.Conditions> -->
			<!-- 				<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
			<!-- 			</MultiDataTrigger.Conditions> -->
			<!-- 			<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgNotSel)}" /> -->
			<!-- 			<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrNotSel), FallbackValue='transparent'}" /> -->
			<!-- 		</MultiDataTrigger> -->
			<!-- -->
			<!-- 		~1~  enabled / selected  @1@ -->
			<!-- 		<MultiDataTrigger x:Name="BdrTrigsL1IsSel"> -->
			<!-- 			<MultiDataTrigger.Conditions> -->
			<!-- 				<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
			<!-- 			</MultiDataTrigger.Conditions> -->
			<!-- 			<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" /> -->
			<!-- 			<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsSel), FallbackValue='transparent'}" /> -->
			<!-- 		</MultiDataTrigger> -->
			<!-- -->
			<!-- 	</Style.Triggers> -->
			<!-- </Style> -->

			<!--  border with mouseover  -->
			<Style x:Key="BdrTrigs.L1"
					BasedOn="{StaticResource BdrBasic}"
					TargetType="Border"
					>
				<!--  disabled  -->
				<!--  from root  -->
				<Style.Triggers>

					<!--  not selected  -->
					<MultiDataTrigger x:Name="BdrTrigsL1NotSel">
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgNotSel)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrNotSel), FallbackValue='transparent'}" />
					</MultiDataTrigger>

					<!--  enabled / selected  -->
					<MultiDataTrigger x:Name="BdrTrigsL1IsSel">
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsSel), FallbackValue='transparent'}" />
					</MultiDataTrigger>

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.DoesMouseOver), RelativeSource={RelativeSource Self}, Mode=OneWay, FallbackValue='false'}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgNotEditingMouseOver)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrNotEditingMouseOver), FallbackValue='transparent'}" />
					</MultiDataTrigger>


				</Style.Triggers>
			</Style>

			<!--  textblock  -->
			<Style x:Key="TblkTrigs.L1"
					BasedOn="{StaticResource TblkBasic}"
					TargetType="TextBlock"
					>
				<!--  disabled  -->
				<!--  from root  -->
				<Style.Triggers>

					<!--  not selected  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="False" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgNotSel)}" />
					</MultiDataTrigger>

					<!--  enabled / selected  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="False" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<!--  control (incl. textbox, button  -->
			<Style x:Key="CtrlTrigs.L1"
					BasedOn="{StaticResource CtrlBasic}"
					TargetType="Control"
					>
				<!--  disabled  -->
				<!--  from root  -->
				<Style.Triggers>

					<!--  not selected  -->
					<MultiDataTrigger x:Name="CtrlTrigsL1NotSel">
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="False" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgNotSel)}" />
					</MultiDataTrigger>

					<!--  enabled / selected  -->
					<MultiDataTrigger x:Name="CtrlTrigsL1IsSel">
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="False" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</MultiDataTrigger>

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgNotEditingMouseOver)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>

			<!--  control (control with interior border -> e.g. combobox)  -->
			<Style x:Key="CtrlWithBdrTrigs.L1"
					BasedOn="{StaticResource CtrlWithBdrBasic}"
					TargetType="Control"
					>
				<!--  disabled  -->
				<!--  from root  -->
				<Style.Triggers>

					<!--  not selected  -->
					<MultiDataTrigger x:Name="CtrlBdrTrigsL1NotSel">
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="False" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgNotSel)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgNotSel)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrNotSel)}" />
					</MultiDataTrigger>

					<!--  enabled / selected  -->
					<MultiDataTrigger x:Name="CtrlBdrTrigsL1IsSel">
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="False" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsSel)}" />

					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<!--  textbox  -->
			<Style x:Key="TbxTrigs.L1"
					BasedOn="{StaticResource CtrlTrigs.L1}"
					TargetType="TextBox"
					>
				<Setter Property="Template" Value="{StaticResource AppTextBoxCt}" />
			</Style>


			<!--  level 2  -->
			<!--  is editing  -->
			<!--  border without mouseover  -->
			<!-- <Style x:Key="BdrWoMoTrigs.L2" -->
			<!-- 		BasedOn="{StaticResource BdrWoMoTrigs.L1}" -->
			<!-- 		TargetType="Border" -->
			<!-- 		> -->
			<!-- 	<Style.Triggers> -->
			<!-- -->
			<!-- 		~1~  is editing  @1@ -->
			<!-- 		<MultiDataTrigger> -->
			<!-- 			<MultiDataTrigger.Conditions> -->
			<!-- 				<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
			<!-- 			</MultiDataTrigger.Conditions> -->
			<!-- 			<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditing)}" /> -->
			<!-- 			<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEditing), FallbackValue='transparent'}" /> -->
			<!-- 		</MultiDataTrigger> -->
			<!-- -->
			<!-- 	</Style.Triggers> -->
			<!-- </Style> -->

			<!--  border with mouseover  -->
			<Style x:Key="BdrTrigs.L2"
					BasedOn="{StaticResource BdrTrigs.L1}"
					TargetType="Border"
					>
				<Style.Triggers>

					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditing)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEditing), FallbackValue='transparent'}" />
					</MultiDataTrigger>

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.DoesMouseOver), RelativeSource={RelativeSource Self}, Mode=OneWay, FallbackValue='false'}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditingMouseOver)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEditingMouseOver), FallbackValue='transparent'}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>

			<!--  control (incl. textbox, button  -->
			<Style x:Key="CtrlTrigs.L2"
					BasedOn="{StaticResource CtrlTrigs.L1}"
					TargetType="Control"
					>
				<Style.Triggers>

					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
					</MultiDataTrigger>

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditingMouseOver)}" />

					</MultiDataTrigger>

				</Style.Triggers>
			</Style>

			<!--  control (control with interior border -> e.g. combobox)  -->
			<Style x:Key="CtrlWithBdrTrigs.L2"
					BasedOn="{StaticResource CtrlWithBdrTrigs.L1}"
					TargetType="Control"
					>
				<Style.Triggers>
					<!-- <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditing)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEditing)}" />
						<Setter Property="cs:CsCommonAp.BgCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditingMouseOver)}" />
						<Setter Property="cs:CsCommonAp.FgCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditingMouseOver)}" />
						<Setter Property="cs:CsCommonAp.BdrCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEditingMouseOver)}" />
					</MultiDataTrigger>

					<!--    -->
					<!--  ~1~  is readonly (no editing)  @1@  -->
					<!-- <MultiDataTrigger> -->
					<!-- 	<MultiDataTrigger.Conditions> -->
					<!-- 		<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
					<!-- 		<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" /> -->
					<!-- 		<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
					<!-- 	</MultiDataTrigger.Conditions> -->
					<!-- 	<Setter Property="Background" Value="{DynamicResource cs:VisualStates.BgReadOnly}" /> -->
					<!-- </MultiDataTrigger> -->


				</Style.Triggers>
			</Style>

			<!--  textbox  -->
			<Style x:Key="TbxTrigs.L2"
					BasedOn="{StaticResource CtrlTrigs.L2}"
					TargetType="TextBox"
					>
				<Setter Property="Template" Value="{StaticResource AppTextBoxCt}" />
			</Style>



			<!--  level 3  -->
			<!--  is read only  -->
			<!--  border without mouseover  -->
			<!-- <Style x:Key="BdrWoMoTrigs.L3" -->
			<!-- 		BasedOn="{StaticResource BdrWoMoTrigs.L2}" -->
			<!-- 		TargetType="Border" -->
			<!-- 		> -->
			<!-- 	<Style.Triggers> -->
			<!-- -->
			<!-- 		~1~  read only  (i.e. editing not allowed)  @1@ -->
			<!-- 		<MultiDataTrigger> -->
			<!-- 			<MultiDataTrigger.Conditions> -->
			<!-- 				<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" /> -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
			<!-- 			</MultiDataTrigger.Conditions> -->
			<!-- 			<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsReadOnly)}" /> -->
			<!-- 			<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsReadOnly), FallbackValue='transparent'}" /> -->
			<!-- 		</MultiDataTrigger> -->
			<!-- 	</Style.Triggers> -->
			<!-- </Style> -->

			<!--  border with mouseover  -->
			<Style x:Key="BdrTrigs.L3"
					BasedOn="{StaticResource BdrTrigs.L2}"
					TargetType="Border"
					>
				<Style.Triggers>

					<!--  read only  (i.e. editing not allowed)  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsReadOnly)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsReadOnly), FallbackValue='transparent'}" />

					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<!--  control (incl. textbox, button  -->
			<Style x:Key="CtrlTrigs.L3"
					BasedOn="{StaticResource CtrlTrigs.L2}"
					TargetType="Control"
					>
				<Style.Triggers>

					<!--  read only  (i.e. editing not allowed)  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<!--  control (control with interior border -> e.g. combobox)  -->
			<Style x:Key="CtrlWithBdrTrigs.L3"
					BasedOn="{StaticResource CtrlWithBdrTrigs.L2}"
					TargetType="Control"
					>
				<Style.Triggers>
					<!-- <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsReadOnly)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsReadOnly)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>

			<!--  textbox  -->
			<Style x:Key="TbxTrigs.L3"
					BasedOn="{StaticResource CtrlTrigs.L3}"
					TargetType="TextBox"
					>
				<Setter Property="Template" Value="{StaticResource AppTextBoxCt}" />
			</Style>


			<!--  level 4  -->
			<!--  is locked  -->
			<!--  border without mouseover  -->
			<!-- <Style x:Key="BdrWoMoTrigs.L4" -->
			<!-- 		BasedOn="{StaticResource BdrWoMoTrigs.L3}" -->
			<!-- 		TargetType="Border" -->
			<!-- 		> -->
			<!-- 	<Style.Triggers> -->
			<!-- -->
			<!-- 		~1~  is locked  @1@ -->
			<!-- 		<MultiDataTrigger> -->
			<!-- 			<MultiDataTrigger.Conditions> -->
			<!-- 				~1~ <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> @1@ -->
			<!-- 				<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" /> -->
			<!-- 			</MultiDataTrigger.Conditions> -->
			<!-- 			<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsLocked)}" /> -->
			<!-- 			<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsLocked), FallbackValue='transparent'}" /> -->
			<!-- 		</MultiDataTrigger> -->
			<!-- 	</Style.Triggers> -->
			<!-- </Style> -->

			<!--  border with mouseover  -->
			<Style x:Key="BdrTrigs.L4"
					BasedOn="{StaticResource BdrTrigs.L3}"
					TargetType="Border"
					>
				<Style.Triggers>

					<!--  is locked  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<!-- <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsLocked)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsLocked), FallbackValue='transparent'}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<!--  control (incl. textbox, button  -->
			<Style x:Key="CtrlTrigs.L4"
					BasedOn="{StaticResource CtrlTrigs.L3}"
					TargetType="Control"
					>
				<Style.Triggers>

					<!--  is locked  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<!--  control (control with interior border -> e.g. combobox)  -->
			<Style x:Key="CtrlWithBdrTrigs.L4"
					BasedOn="{StaticResource CtrlWithBdrTrigs.L3}"
					TargetType="Control"
					>
				<Style.Triggers>
					<!-- <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsLocked)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsLocked)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>

			<!--  textbox  -->
			<Style x:Key="TbxTrigs.L4"
					BasedOn="{StaticResource CtrlTrigs.L4}"
					TargetType="TextBox"
					>
				<Setter Property="Template" Value="{StaticResource AppTextBoxCt}" />
			</Style>


			<!--  border with mouseover  -->
			<Style x:Key="BdrTrigs.L5"
					BasedOn="{StaticResource BdrTrigs.L4}"
					TargetType="Border"
					>
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding (cs:VisualStates.IsGoodBad), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" />
							<!-- <Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" /> -->
							<!-- <Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
							<!-- <Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
						</MultiDataTrigger.Conditions>
						<Setter Property="BorderBrush" Value="{StaticResource Bdr.Good}" />
					</MultiDataTrigger>

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding (cs:VisualStates.IsGoodBad), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<!-- <Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="true" /> -->
							<!-- <Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
							<!-- <Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" /> -->
						</MultiDataTrigger.Conditions>
						<Setter Property="BorderBrush" Value="{StaticResource Bdr.Bad}" />
					</MultiDataTrigger>

				</Style.Triggers>

			</Style>


			<!--  field styles  -->

			<!--  textbox examples  -->
			<Style x:Key="TbxExample"
					BasedOn="{StaticResource TbxTrigs.L4}"
					TargetType="TextBox"
					>
				<Setter Property="FontSize" Value="{StaticResource FontSize.Small}" />
				<Setter Property="TextAlignment" Value="Center" />
				<Setter Property="BorderBrush" Value="Red" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderThickness" Value="0" />
			</Style>


			<!--  border(s) for titles  -->
			<Style x:Key="Tbx.Editable"
					BasedOn="{StaticResource TbxTrigs.L4}"
					TargetType="TextBox"
					>
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="5,2,0,4" />

			</Style>


			<!--  editable control  -->
			<!--  do not assign background here  -->
			<Style x:Key="Ctrl.Editable"
					BasedOn="{StaticResource CtrlWithBdrTrigs.L4}"
					TargetType="Control"
					>
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="5,2,0,4" />
			</Style>


			<!--  editable control  -->
			<Style x:Key="Combobox1"
					BasedOn="{StaticResource Ctrl.Editable}"
					TargetType="ComboBox"
					>
				<Setter Property="IsEditable" Value="False" />
				<Setter Property="IsReadOnly" Value="True" />
				<Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Margin" Value="0,5,0,0" />
				<Setter Property="Padding" Value="0,1,0,4" />
				<Setter Property="MaxDropDownHeight" Value="120" />
				<Setter Property="Template" Value="{StaticResource CsComboBoxCt}" />
			</Style>
			<!--  -->


			<!--  text box  -->
			<Style x:Key="TbxTrigs.L1.Old"
					BasedOn="{StaticResource TbxRoot}"
					TargetType="TextBox"
					>
				<!--  not selected  -->
				<!--  from root  -->
				<!-- <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDefault)}" /> -->
				<Style.Triggers>
					<!-- <MultiDataTrigger> -->
					<!-- 	<MultiDataTrigger.Conditions> -->
					<!-- 		<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" /> -->
					<!-- 		<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="False" /> -->
					<!-- 	</MultiDataTrigger.Conditions> -->
					<!-- 	<Setter Property="Foreground" Value="{DynamicResource cs:VisualStates.FgDefault}" /> -->
					<!-- </MultiDataTrigger> -->

					<!--  enabled / not selected  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="False" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<!--  combobox  -->
			<Style x:Key="CbxTrigs.L1"
					BasedOn="{StaticResource CbxRoot}"
					TargetType="ComboBox"
					>
				<!--  not selected  -->
				<!--  from root  -->
				<!-- <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDefault)}" /> -->
				<!-- <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDefault)}" /> -->
				<Style.Triggers>
					<!-- <MultiDataTrigger> -->
					<!-- 	<MultiDataTrigger.Conditions> -->
					<!-- 		<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" /> -->
					<!-- 		<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="False" /> -->
					<!-- 	</MultiDataTrigger.Conditions> -->
					<!-- 	<Setter Property="Foreground" Value="{DynamicResource cs:VisualStates.FgDefault}" /> -->
					<!-- </MultiDataTrigger> -->

					<!--  is selected  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="False" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</MultiDataTrigger>

					<!--  is selected  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsMouseOver}" Value="True" />
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="False" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IsLocked)}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>



			<Style x:Key="TblkTrigs.L2"
					BasedOn="{StaticResource TblkTrigs.L1}"
					TargetType="TextBlock"
					>
				<!--  no editing  -->
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="False" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IsReadOnly)}" Value="true" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IsLocked)}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{DynamicResource cs:VisualStates.BgReadOnly}" />
					</MultiDataTrigger>

					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="True" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IsReadOnly)}" Value="false" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IsLocked)}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{DynamicResource cs:VisualStates.FgIsEditing}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>



			<Style x:Key="TbxTrigs.L2.Old"
					BasedOn="{StaticResource TbxTrigs.L1.Old}"
					TargetType="TextBox"
					>
				<!--  no editing  -->
				<Style.Triggers>

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="False" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IsReadOnly)}" Value="true" />
							<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IsLocked)}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{DynamicResource cs:VisualStates.BgReadOnly}" />
					</MultiDataTrigger>

					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
							<Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="True" />
							<Condition Binding="{Binding AddUnitReadOnly, ElementName=win}" Value="false" />
							<Condition Binding="{Binding AddUnitIsLocked, ElementName=win}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{DynamicResource cs:VisualStates.FgIsEditing}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>


			<!--  study info does not get skinned  -->

			<!--#region > non-skin & non-design-->

			<Style x:Key="TestBorderStyle" TargetType="Border">
				<Setter Property="CornerRadius" Value="{StaticResource NormalRr}" />
				<Setter Property="BorderThickness" Value="8" />
				<Setter Property="BorderBrush" Value="{StaticResource TestBorderBrush}" />
			</Style>

			<cs:SubtractConverter x:Key="sub" />

			<sys:Boolean x:Key="IsLocked">False</sys:Boolean>
			<sys:Boolean x:Key="IsSelected">False</sys:Boolean>

			<cs:NullableBool x:Key="IsEditing" b="true" />

			<GridLength x:Key="C1">320*</GridLength>
			<GridLength x:Key="C2">500*</GridLength>



			<sys:Int32 x:Key="Hlight_Col">2</sys:Int32>
			<sys:Int32 x:Key="Hlight_Row">2</sys:Int32>
			<sys:Int32 x:Key="Image_Col">1</sys:Int32>
			<sys:Int32 x:Key="Image_Row">3</sys:Int32>
			<sys:Int32 x:Key="Action1_Col">1</sys:Int32>
			<sys:Int32 x:Key="Action1_Row">2</sys:Int32>
			<sys:Int32 x:Key="SubTitle_Col">0</sys:Int32>
			<sys:Int32 x:Key="SubTitle_Row">1</sys:Int32>
			<sys:Int32 x:Key="Ckbx1_Col">0</sys:Int32>
			<sys:Int32 x:Key="Ckbx1_Row">2</sys:Int32>

			<sys:Int32 x:Key="Ckbx2_Col">0</sys:Int32>
			<sys:Int32 x:Key="Ckbx2_Row">2</sys:Int32>

			<sys:Int32 x:Key="Action2_Col">0</sys:Int32>
			<sys:Int32 x:Key="Action2_Row">3</sys:Int32>
			<sys:Int32 x:Key="Cbx_Col">1</sys:Int32>
			<sys:Int32 x:Key="Cbx_Row">3</sys:Int32>

			<sys:Double x:Key="PopupOffset">6</sys:Double>


			<Style x:Key="BtnEdit"
					BasedOn="{StaticResource BtnBase}"
					TargetType="Button"
					>
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Padding" Value="0,-1,0,-4" />
				<Setter Property="Visibility" Value="Visible" />

				<Setter Property="FontFamily" Value="Segoe UI Symbol" />
				<Setter Property="Template" Value="{DynamicResource Button.Stealth.ControlTemplate}" />
			</Style>

			<!--#endregion-->

			<!--#region > test templates-->

			<Style x:Key="TblkSamples" TargetType="TextBlock">
				<Setter Property="Padding" Value="5,0,0,2" />
				<Setter Property="Margin" Value="1" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
			</Style>

			<Style x:Key="BorderStyle.Sample" TargetType="Border">
				<Setter Property="Margin" Value="0,0,2,2" />
				<Setter Property="Padding" Value="5,0,5,3" />
				<Setter Property="Background" Value="#0070f0" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="CornerRadius" Value="4" />
			</Style>

			<DataTemplate x:Key="Sample">
				<Grid x:Name="Item_Layout_1"
						Grid.Column="0"
						Grid.Row="2"
						Height="Auto"
						Background="#333333"
						Margin="0,0,0,5"
						VerticalAlignment="Top"
						>


					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="78" />
						<ColumnDefinition Width="86" />
						<ColumnDefinition Width="3*" />
						<ColumnDefinition Width="4*" />
						<ColumnDefinition Width="3*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="*" />
						<RowDefinition Height="*" />
						<RowDefinition Height="*" />
					</Grid.RowDefinitions>

					<Border Grid.Column="0"
							Grid.Row="0"
							Grid.RowSpan="3"
							Padding="0"
							Style="{StaticResource BorderStyle.Sample}"
							>

						<!--  Grid.RowSpan="3"  -->
						<TextBlock Grid.Column="0"
								Grid.Row="1"
								FontSize="38"
								FontWeight="DemiBold"
								HorizontalAlignment="Center"
								Margin="0,0,0,4"
								Padding="0"
								Text="01"
								VerticalAlignment="Center"
								/>
					</Border>

					<Border Grid.Column="0"
							Grid.Row="2"
							Background="OrangeRed"
							HorizontalAlignment="Center"
							Margin="0,0,0,5"
							Padding="0"
							VerticalAlignment="Bottom"
							Visibility="Visible"
							Style="{StaticResource BorderStyle.Sample}"
							>
						<TextBlock FontSize="9"
								Margin="0,-2,0,0"
								Padding="8,1,8,1"
								Text="Locked"
								TextAlignment="Center"
								/>
					</Border>

					<Border Grid.Column="1"
							Grid.Row="0"
							Grid.RowSpan="3"
							Background="LightGray"
							Style="{StaticResource BorderStyle.Sample}"
							/>

					<Border Grid.Column="2"
							Grid.Row="0"
							Grid.ColumnSpan="2"
							Style="{StaticResource BorderStyle.Sample}"
							>
						<TextBlock Text="This is the unit name" />
					</Border>

					<Border Grid.Column="2"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Style="{StaticResource BorderStyle.Sample}"
							>
						<TextBlock Text="This is the unit Description" />
					</Border>

					<Border Grid.Column="2"
							Grid.Row="2"
							HorizontalAlignment="Stretch"
							Style="{StaticResource BorderStyle.Sample}"
							>
						<TextBlock Padding="0,0,10,0"
								Text="Example"
								TextAlignment="Center"
								/>
					</Border>

					<Border Grid.Column="3"
							Grid.Row="2"
							Style="{StaticResource BorderStyle.Sample}"
							>
						<TextBlock Padding="0,0,10,0"
								Text="1,234' - 255/256&quot;"
								TextAlignment="Center"
								/>
					</Border>

					<Border Grid.Column="4"
							Grid.Row="0"
							Grid.RowSpan="3"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Style="{StaticResource BorderStyle.Sample}"
							>
						<Grid>

							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />

							</Grid.ColumnDefinitions>

							<Grid.RowDefinitions>
								<RowDefinition Height="*" />
								<RowDefinition Height="*" />
								<RowDefinition Height="*" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>

							<TextBlock FontSize="14"
									HorizontalAlignment="Stretch"
									Margin="5,0,0,0"
									Text="Show in this list"
									TextAlignment="Left"
									VerticalAlignment="Center"
									/>


							<CheckBox Content="Favs"
									Grid.Column="0"
									Grid.Row="1"
									Background="#666666"
									FontSize="14"
									Foreground="White"
									IsChecked="True"
									Margin="5,0,0,0"
									VerticalContentAlignment="Center"
									/>
							<CheckBox Content="Dialog left"
									Grid.Column="0"
									Grid.Row="2"
									Background="#666666"
									FontSize="14"
									Foreground="White"
									IsChecked="True"
									Margin="5,0,0,0"
									VerticalContentAlignment="Center"
									/>
							<CheckBox Content="Dialog Right"
									Grid.Column="0"
									Grid.Row="3"
									Background="#666666"
									FontSize="14"
									Foreground="White"
									IsChecked="True"
									Margin="5,0,0,0"
									VerticalContentAlignment="Center"
									/>


						</Grid>

					</Border>

				</Grid>

			</DataTemplate>


			<!--  A1/A2  not selected / not locked / na editing  -->
			<!--  not selected / is locked / na editing  -->
			<Border x:Key="NotSelectedNotLockedNaEditing"
					CornerRadius="4"
					Padding="4"
					>
				<Border.Style>
					<Style TargetType="Border">
						<Setter Property="IsEnabled" Value="True" />
						<Setter Property="Background" Value="{StaticResource Lv1.Item.Panel.Bkg.Nml}" />
					</Style>
				</Border.Style>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="2*" />
						<ColumnDefinition Width="2*" />
						<ColumnDefinition Width="2*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<TextBlock Grid.Column="0"
							Grid.Row="0"
							Foreground="Black"
							Text="A1/A2 not selected / not locked / na editing"
							Style="{StaticResource TblkSamples}"
							>
						<TextBlock.Background>
							<SolidColorBrush Color="{StaticResource Green.400}" />
						</TextBlock.Background>
					</TextBlock>

					<!--  A  -->
					<TextBlock Grid.Column="1"
							Grid.Row="0"
							Background="{StaticResource TitleReadOnly.Bg.NotSel}"
							Foreground="{StaticResource TitleReadOnly.Fg.NotSel}"
							Text="A title text/not editable field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  B  -->
					<TextBlock Grid.Column="1"
							Grid.Row="1"
							Background="{StaticResource TitleCanEdit.Bg.NotSel}"
							Foreground="{StaticResource TitleCanEdit.Fg.NotSel}"
							Text="B title text/editable field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  C  -->
					<TextBlock Grid.Column="2"
							Grid.Row="0"
							Background="{StaticResource ReadOnly.Bg.NotSel}"
							Foreground="{StaticResource ReadOnly.Fg.NotSel}"
							Text="C (Tblk) text/not editable"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  D  -->
					<Border Grid.Column="2"
							Grid.Row="1"
							Background="{StaticResource CanEdit.Bg.NotSel}"
							CornerRadius="6"
							Margin="1"
							>
						<!--  BorderBrush="{StaticResource CanEdit.Bdr.NotSel}"  -->
						<!--  BorderThickness="1"  -->
						<DockPanel HorizontalAlignment="Stretch">

							<!--  D  -->
							<TextBox DockPanel.Dock="Left"
									Background="Transparent"
									BorderThickness="0"
									Foreground="{StaticResource CanEdit.Fg.NotSel}"
									Text="D (Tbx) text/editable"
									TextAlignment="left"
									Style="{StaticResource TbxTrigsBase}"
									/>

							<!--  D2  -->
							<TextBlock DockPanel.Dock="Right"
									FontFamily="Segoe UI Symbol"
									Foreground="{StaticResource CanEdit.Fg.NotSel}"
									HorizontalAlignment="Right"
									Margin="0,1,3,-1"
									Padding="0"
									Text=""
									/>

							<!--  D1  -->
							<Button Content=""
									DockPanel.Dock="Right"
									Foreground="{StaticResource CanEdit.Fg.NotSel}"
									HorizontalAlignment="Right"
									Visibility="Collapsed"
									Style="{StaticResource BtnEdit}"
									/>

						</DockPanel>

					</Border>

					<!--  E  -->
					<TextBlock Grid.Column="{StaticResource Action1_Col}"
							Grid.Row="{StaticResource Action1_Row}"
							Background="{StaticResource Action1.Bg.NotSel}"
							Foreground="{StaticResource Action1.Fg.NotSel}"
							Text="E action field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  F  -->
					<TextBlock Grid.Column="{StaticResource SubTitle_Col}"
							Grid.Row="{StaticResource SubTitle_Row}"
							Background="{StaticResource SubTitle.Bg.NotSel}"
							Foreground="{StaticResource SubTitle.Fg.NotSel}"
							Margin="1,1,1,0"
							Text="F action field sub-header"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  G  -->
					<StackPanel Grid.Column="{StaticResource Ckbx1_Col}"
							Grid.Row="{StaticResource Ckbx1_Row}"
							Grid.RowSpan="2"
							Background="{StaticResource SubTitle.Gb.NotSel}"
							Margin="1,0,1,1"
							>


						<Border Background="{StaticResource Action2.Bg.NotSel}"
								CornerRadius="6"
								Margin="5,3,5,0"
								>

							<DockPanel HorizontalAlignment="Stretch">
								<!--  G2  -->
								<TextBlock DockPanel.Dock="Right"
										FontFamily="Segoe UI Symbol"
										Foreground="{StaticResource CanEdit.Fg.NotSel}"
										HorizontalAlignment="Right"
										Margin="0,1,3,-1"
										Padding="0"
										Text=""
										/>
								<!--  G  -->
								<CheckBox Content="G checkbox text"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="{StaticResource Action2.Fg.NotSel}"
										HorizontalAlignment="Left"
										IsChecked="True"
										Margin="5,0,0,0"
										Padding="0"
										VerticalAlignment="Center"
										>

									<CheckBox.Style>
										<Style BasedOn="{StaticResource Ckbx.Lv1.Style}" TargetType="CheckBox" />
									</CheckBox.Style>
								</CheckBox>
							</DockPanel>
						</Border>

						<!--  G  -->
						<Border Background="{StaticResource Action2.Bg.NotSel}"
								CornerRadius="6"
								Margin="5,3,5,3"
								>

							<!--  G2  -->
							<DockPanel HorizontalAlignment="Stretch">
								<TextBlock DockPanel.Dock="Right"
										FontFamily="Segoe UI Symbol"
										Foreground="{StaticResource CanEdit.Fg.NotSel}"
										HorizontalAlignment="Right"
										Margin="0,1,3,-1"
										Padding="0"
										Text=""
										/>

								<!--  G  -->
								<CheckBox Content="G checkbox text"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="{StaticResource Action2.Fg.NotSel}"
										HorizontalAlignment="Left"
										IsChecked="True"
										Margin="5,0,0,0"
										Padding="0"
										VerticalAlignment="Center"
										>

									<CheckBox.Style>
										<Style BasedOn="{StaticResource Ckbx.Lv1.Style}" TargetType="CheckBox" />
									</CheckBox.Style>
								</CheckBox>
							</DockPanel>
						</Border>

					</StackPanel>

					<!--  I  -->
					<TextBlock Grid.Column="{StaticResource Image_Col}"
							Grid.Row="{StaticResource Image_Row}"
							Background="{StaticResource Image1.Bg.NotSel}"
							Foreground="Black"
							Text="I image field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  J  -->
					<TextBlock Grid.Column="{StaticResource Hlight_Col}"
							Grid.Row="{StaticResource Hlight_Row}"
							Background="{StaticResource Hlight.Bg.NotSel}"
							Foreground="{StaticResource Hlight.Fg.NotSel}"
							Text="J Highlighted item"
							Style="{StaticResource TblkSamples}"
							/>

				</Grid>

			</Border>


			<!--  B is selected /  not locked / not editing  -->
			<Border x:Key="IsSelectedNotLockedNotEditing"
					CornerRadius="4"
					Padding="4"
					>
				<Border.Style>
					<Style TargetType="Border">
						<Setter Property="IsEnabled" Value="True" />
						<Setter Property="Background" Value="{StaticResource Lv1.Item.Panel.Bkg.Nml}" />
					</Style>
				</Border.Style>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="2*" />
						<ColumnDefinition Width="2*" />
						<ColumnDefinition Width="2*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />

					</Grid.RowDefinitions>

					<TextBlock Grid.Column="0"
							Grid.Row="0"
							Background="{StaticResource Header.Bg.IsSel}"
							Foreground="Black"
							Text="is selected /  not locked / not editing"
							Style="{StaticResource TblkSamples}"
							/>



					<TextBlock Grid.Column="1"
							Grid.Row="0"
							Background="{StaticResource TitleReadOnly.Bg.IsSel}"
							Foreground="{StaticResource TitleReadOnly.Fg.IsSel}"
							Text="title text/not editable field"
							Style="{StaticResource TblkSamples}"
							/>

					<TextBlock Grid.Column="2"
							Grid.Row="0"
							Background="{StaticResource ReadOnly.Bg.IsSel}"
							Foreground="{StaticResource ReadOnly.Fg.IsSel}"
							Text="(Tblk) text/not editable"
							Style="{StaticResource TblkSamples}"
							/>

					<TextBlock Grid.Column="1"
							Grid.Row="1"
							Background="{StaticResource TitleCanEdit.Bg.IsSel}"
							Foreground="{StaticResource TitleCanEdit.Fg.IsSel}"
							Text="title text/editable field"
							Style="{StaticResource TblkSamples}"
							/>


					<Border Grid.Column="2"
							Grid.Row="1"
							Background="{StaticResource CanEdit.Bg.IsSel}"
							CornerRadius="6"
							Margin="1"
							>
						<!--  BorderBrush="{StaticResource CanEdit.Bdr.IsSel}"  -->
						<!--  BorderThickness="1"  -->
						<DockPanel HorizontalAlignment="Stretch">

							<TextBox DockPanel.Dock="Left"
									Background="Transparent"
									BorderThickness="0"
									Foreground="{StaticResource CanEdit.Fg.IsSel}"
									Text="(Tbx) text/editable"
									TextAlignment="left"
									Style="{StaticResource TbxTrigsBase}"
									/>

							<TextBlock DockPanel.Dock="Right"
									FontFamily="Segoe UI Symbol"
									Foreground="{StaticResource CanEdit.Fg.IsSel}"
									HorizontalAlignment="Right"
									Margin="0,1,3,-1"
									Padding="0"
									Text=""
									/>

							<Button Content=""
									DockPanel.Dock="Right"
									Foreground="{StaticResource CanEdit.Fg.IsSel}"
									HorizontalAlignment="Right"
									Visibility="Collapsed"
									Style="{StaticResource BtnEdit}"
									/>

						</DockPanel>

					</Border>


					<TextBlock Grid.Column="{StaticResource Hlight_Col}"
							Grid.Row="{StaticResource Hlight_Row}"
							Background="{StaticResource Hlight.Bg.IsSel}"
							Foreground="{StaticResource Hlight.Fg.IsSel}"
							Text="Highlighted item"
							Style="{StaticResource TblkSamples}"
							/>

					<TextBlock Grid.Column="{StaticResource Image_Col}"
							Grid.Row="{StaticResource Image_Row}"
							Background="{StaticResource Image1.Bg.IsSel}"
							Foreground="Black"
							Text="image field"
							Style="{StaticResource TblkSamples}"
							/>


					<TextBlock Grid.Column="{StaticResource Action1_Col}"
							Grid.Row="{StaticResource Action1_Row}"
							Background="{StaticResource Action1.Bg.IsSel}"
							Foreground="{StaticResource Action1.Fg.IsSel}"
							Text="action field"
							Style="{StaticResource TblkSamples}"
							/>

					<TextBlock Grid.Column="{StaticResource SubTitle_Col}"
							Grid.Row="{StaticResource SubTitle_Row}"
							Background="{StaticResource SubTitle.Bg.IsSel}"
							Foreground="{StaticResource SubTitle.Fg.IsSel}"
							Margin="1,1,1,0"
							Text="action field sub-header"
							Style="{StaticResource TblkSamples}"
							/>



					<StackPanel Grid.Column="{StaticResource Ckbx1_Col}"
							Grid.Row="{StaticResource Ckbx1_Row}"
							Grid.RowSpan="2"
							Background="{StaticResource SubTitle.Gb.IsSel}"
							Margin="1,0,1,1"
							>

						<Border Background="{StaticResource Action2.Bg.IsSel}"
								CornerRadius="6"
								Margin="5,3,5,0"
								>
							<DockPanel HorizontalAlignment="Stretch">
								<TextBlock DockPanel.Dock="Right"
										FontFamily="Segoe UI Symbol"
										Foreground="{StaticResource CanEdit.Fg.IsSel}"
										HorizontalAlignment="Right"
										Margin="0,1,3,-1"
										Padding="0"
										Text=""
										/>

								<CheckBox Content="checkbox text"
										DockPanel.Dock="Left"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="{StaticResource Action2.Fg.IsSel}"
										HorizontalAlignment="Left"
										IsChecked="True"
										Margin="5,0,0,0"
										Padding="0"
										VerticalAlignment="Center"
										>

									<CheckBox.Style>
										<Style BasedOn="{StaticResource Ckbx.Lv1.Style}" TargetType="CheckBox" />
									</CheckBox.Style>
								</CheckBox>
							</DockPanel>
						</Border>

						<Border Background="{StaticResource Action2.Bg.IsSel}"
								CornerRadius="6"
								Margin="5,3,5,3"
								>
							<DockPanel HorizontalAlignment="Stretch">
								<TextBlock DockPanel.Dock="Right"
										FontFamily="Segoe UI Symbol"
										Foreground="{StaticResource CanEdit.Fg.IsSel}"
										HorizontalAlignment="Right"
										Margin="0,1,3,-1"
										Padding="0"
										Text=""
										/>

								<CheckBox Content="checkbox text"
										DockPanel.Dock="Left"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="{StaticResource Action2.Fg.IsSel}"
										HorizontalAlignment="Left"
										IsChecked="True"
										Margin="5,0,0,0"
										Padding="0"
										VerticalAlignment="Center"
										>

									<CheckBox.Style>
										<Style BasedOn="{StaticResource Ckbx.Lv1.Style}" TargetType="CheckBox" />
									</CheckBox.Style>
								</CheckBox>
							</DockPanel>
						</Border>

					</StackPanel>

				</Grid>

			</Border>


			<!--  C is selected / not locked / is editing  -->
			<Border x:Key="IsSelectedNotLockedIsEditing"
					CornerRadius="4"
					Padding="4"
					>
				<Border.Style>
					<Style TargetType="Border">
						<Setter Property="IsEnabled" Value="True" />
						<Setter Property="Background" Value="{StaticResource Lv1.Item.Panel.Bkg.Nml}" />
					</Style>
				</Border.Style>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="2*" />
						<ColumnDefinition Width="2*" />
						<ColumnDefinition Width="2*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<TextBlock Grid.Column="0"
							Grid.Row="0"
							Background="{StaticResource Header.Bg.IsSel}"
							Foreground="Black"
							Text="(C) is selected / not locked / is editing"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  A  -->
					<TextBlock Grid.Column="1"
							Grid.Row="0"
							Background="{StaticResource TitleReadOnly.Bg.IsEditg}"
							Foreground="{StaticResource TitleReadOnly.Fg.IsEditg}"
							Text="A title text/not editable field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  B  -->
					<TextBlock Grid.Column="1"
							Grid.Row="1"
							Background="{StaticResource TitleCanEdit.Bg.IsEditg}"
							Foreground="{StaticResource TitleCanEdit.Fg.IsEditg}"
							Text="B title text/editable field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  C  -->
					<TextBlock Grid.Column="2"
							Grid.Row="0"
							Background="{StaticResource ReadOnly.Bg.IsEditg}"
							Foreground="{StaticResource ReadOnly.Fg.IsEditg}"
							Text="C (Tblk) text/not editable"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  D  -->
					<!--  <Border Grid.Column="2"  -->
					<!--  Grid.Row="1"  -->
					<!--  Background="{StaticResource CanEdit.Bg.IsEditg}"  -->
					<!--  BorderBrush="{StaticResource CanEdit.Bdr.IsEditg}"  -->
					<!--  BorderThickness="1"  -->
					<!--  CornerRadius="6"  -->
					<!--  Margin="1"  -->
					<!--  >  -->
					<Grid Grid.Column="2"
							Grid.Row="1"
							HorizontalAlignment="Stretch"
							>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<Border Grid.Column="0"
								Background="{StaticResource CanEdit.Bg.IsEditg}"
								BorderBrush="{StaticResource CanEdit.Bdr.IsEditg}"
								BorderThickness="1,1,0,1"
								CornerRadius="6,0,0,6"
								Margin="1,1,0,1"
								>
							<TextBox Foreground="{StaticResource CanEdit.Fg.IsEditg}"
									Text="D (Tbx) text/editable"
									TextAlignment="left"
									Style="{StaticResource TbxTrigsBase}"
									/>
						</Border>
						<Border Grid.Column="1"
								Background="{StaticResource CanEdit.Bg.IsEditg}"
								BorderBrush="{StaticResource CanEdit.Bdr.IsEditg}"
								BorderThickness="0,1,0,1"
								CornerRadius="0"
								Margin="0,1,0,1"
								>
							<Button Content=""
									Foreground="{StaticResource CanEdit.Fg.IsEditg}"
									HorizontalAlignment="Right"
									Style="{StaticResource BtnEdit}"
									/>
						</Border>

						<Border Grid.Column="2"
								Background="{StaticResource CanEdit.Bg.IsEditg}"
								BorderBrush="{StaticResource CanEdit.Bdr.IsEditg}"
								BorderThickness="0,1,1,1"
								CornerRadius="0,6,6,0"
								Margin="0,1,1,1"
								>
							<TextBlock FontFamily="Segoe UI Symbol"
									FontSize="{StaticResource FontSize.XLarge}"
									Foreground="{StaticResource CanEdit.Fg.IsEditg}"
									HorizontalAlignment="Right"
									Margin="0,-3,2,-1"
									Padding="0"
									Text="🛈"
									/>
						</Border>


					</Grid>

					<!-- </Border> -->


					<!-- save
					<Border Grid.Column="2"
							Grid.Row="1"
							Background="{StaticResource CanEdit.Bg.IsEditg}"
							BorderBrush="{StaticResource CanEdit.Bdr.IsEditg}"
							BorderThickness="1"
							CornerRadius="6"
							Margin="1"
					>
						<DockPanel HorizontalAlignment="Stretch">

							<TextBox DockPanel.Dock="Left"
									Foreground="{StaticResource CanEdit.Fg.IsEditg}"
									Text="D (Tbx) text/editable"
									TextAlignment="left"
									Style="{StaticResource TbxBase}"
							/>

							<TextBlock DockPanel.Dock="Right"
									FontFamily="Segoe UI Symbol"
									FontSize="{StaticResource FontSize.XLarge}"
									Foreground="{StaticResource CanEdit.Fg.IsEditg}"
									HorizontalAlignment="Right"
									Margin="0,-3,2,-1"
									Padding="0"
									Text="🛈"
							/>

							<Button Content=""
									DockPanel.Dock="Right"
									Foreground="{StaticResource CanEdit.Fg.IsEditg}"
									HorizontalAlignment="Right"
									Style="{StaticResource BtnEdit}"
							/>
						</DockPanel>
					</Border>
					-->


					<!--  E  -->
					<TextBlock Grid.Column="{StaticResource Action1_Col}"
							Grid.Row="{StaticResource Action1_Row}"
							Background="{StaticResource Action1.Bg.IsEditg}"
							Foreground="{StaticResource Action1.Fg.IsEditg}"
							Text="E action field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  F  -->
					<TextBlock Grid.Column="{StaticResource SubTitle_Col}"
							Grid.Row="{StaticResource SubTitle_Row}"
							Background="{StaticResource SubTitle.Bg.IsEditg}"
							Foreground="{StaticResource SubTitle.Fg.IsEditg}"
							Margin="1,1,1,0"
							Text="F action field sub-header"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  G  -->
					<StackPanel Grid.Column="{StaticResource Ckbx1_Col}"
							Grid.Row="{StaticResource Ckbx1_Row}"
							Grid.RowSpan="2"
							Background="{StaticResource SubTitle.Gb.IsEditg}"
							Margin="1,0,1,1"
							>

						<Border Background="{StaticResource Action2.Bg.IsEditg}"
								BorderBrush="{StaticResource Action2.Bdr.IsEditg}"
								BorderThickness="1"
								CornerRadius="6"
								Margin="5,3,5,0"
								>

							<DockPanel HorizontalAlignment="Stretch">

								<!--  G2  -->
								<TextBlock DockPanel.Dock="Right"
										FontFamily="Segoe UI Symbol"
										Foreground="{StaticResource CanEdit.Fg.IsEditg}"
										HorizontalAlignment="Right"
										Margin="0,1,3,-1"
										Padding="0"
										Text=""
										/>

								<!--  G  -->
								<CheckBox Content="checkbox text"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="{StaticResource Action2.Fg.IsEditg}"
										HorizontalAlignment="Left"
										IsChecked="True"
										Margin="5,0,0,0"
										Padding="0"
										VerticalAlignment="Center"
										>

									<CheckBox.Style>
										<Style BasedOn="{StaticResource Ckbx.Lv1.Style}" TargetType="CheckBox" />
									</CheckBox.Style>
								</CheckBox>
							</DockPanel>
						</Border>

						<!--  G  -->
						<Border Background="{StaticResource Action2.Bg.IsEditg}"
								BorderBrush="{StaticResource Action2.Bdr.IsEditg}"
								BorderThickness="1"
								CornerRadius="6"
								Margin="5,3,5,3"
								>

							<DockPanel HorizontalAlignment="Stretch">

								<!--  G2  -->
								<TextBlock DockPanel.Dock="Right"
										FontFamily="Segoe UI Symbol"
										Foreground="{StaticResource CanEdit.Fg.IsEditg}"
										HorizontalAlignment="Right"
										Margin="0,1,3,-1"
										Padding="0"
										Text=""
										/>

								<!--  G  -->
								<CheckBox Content="checkbox text"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="{StaticResource Action2.Fg.IsEditg}"
										HorizontalAlignment="Left"
										IsChecked="True"
										Margin="5,0,0,0"
										Padding="0"
										VerticalAlignment="Center"
										>

									<CheckBox.Style>
										<Style BasedOn="{StaticResource Ckbx.Lv1.Style}" TargetType="CheckBox" />
									</CheckBox.Style>
								</CheckBox>
							</DockPanel>
						</Border>

					</StackPanel>

					<!--  I  -->
					<TextBlock Grid.Column="{StaticResource Image_Col}"
							Grid.Row="{StaticResource Image_Row}"
							Background="{StaticResource Image1.Bg.IsSel}"
							Foreground="Black"
							Text="I image field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  J  -->
					<TextBlock Grid.Column="{StaticResource Hlight_Col}"
							Grid.Row="{StaticResource Hlight_Row}"
							Background="{StaticResource Hlight.Bg.IsSel}"
							Foreground="{StaticResource Hlight.Fg.IsSel}"
							Text="J Highlighted item"
							Style="{StaticResource TblkSamples}"
							/>

				</Grid>

			</Border>


			<!--  (D) is selected / not locked / no editing  -->
			<Border x:Key="IsSelectedNotLockedReadOnly"
					CornerRadius="4"
					Padding="4"
					>
				<Border.Style>
					<Style TargetType="Border">
						<Setter Property="IsEnabled" Value="True" />
						<Setter Property="Background" Value="{StaticResource Lv1.Item.Panel.Bkg.Nml}" />
					</Style>
				</Border.Style>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="2*" />
						<ColumnDefinition Width="2*" />
						<ColumnDefinition Width="2*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />

					</Grid.RowDefinitions>

					<TextBlock Grid.Column="0"
							Grid.Row="0"
							Background="{StaticResource Header.Bg.IsSel}"
							Foreground="Black"
							Text="(D) is selected / not locked / no editing"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  A  -->
					<TextBlock Grid.Column="1"
							Grid.Row="0"
							Background="{StaticResource TitleReadOnly.Bg.ReadOnly}"
							Foreground="{StaticResource TitleReadOnly.Fg.ReadOnly}"
							Text="title text/not editable field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  B  -->
					<TextBlock Grid.Column="1"
							Grid.Row="1"
							Background="{StaticResource TitleCanEdit.Bg.ReadOnly}"
							Foreground="{StaticResource TitleCanEdit.Fg.ReadOnly}"
							Text="title text/editable field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  C  -->
					<TextBlock Grid.Column="2"
							Grid.Row="0"
							Background="{StaticResource ReadOnly.Bg.ReadOnly}"
							Foreground="{StaticResource ReadOnly.Fg.ReadOnly}"
							Text="(Tblk) text/not editable"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  D  -->
					<Border Grid.Column="2"
							Grid.Row="1"
							Background="{StaticResource CanEdit.Bg.ReadOnly}"
							BorderBrush="{StaticResource CanEdit.Bdr.ReadOnly}"
							BorderThickness="1"
							CornerRadius="6"
							Margin="1"
							>
						<DockPanel HorizontalAlignment="Stretch">


							<TextBox DockPanel.Dock="Left"
									Background="Transparent"
									BorderThickness="0"
									Foreground="{StaticResource CanEdit.Fg.ReadOnly}"
									Text="(Tbx) text/editable"
									TextAlignment="left"
									Style="{StaticResource TbxTrigsBase}"
									/>

							<TextBlock DockPanel.Dock="Right">

								<TextBlock.Style>
									<Style TargetType="TextBlock">
										<Setter Property="FontFamily" Value="Segoe UI Symbol" />
										<Setter Property="HorizontalAlignment" Value="Right" />
										<Setter Property="Margin" Value="0,-1,10,-3" />
										<Setter Property="Padding" Value="0" />
										<Setter Property="FontSize" Value="{StaticResource FontSize.Large}" />
										<Setter Property="Text" Value=" ⃠" />
										<!--  <Setter Property="Text" Value="&#x20E0;"  -->


										<Setter Property="Foreground" Value="{StaticResource CanEdit.Fg.ReadOnly}" />
										<Style.Triggers>
											<DataTrigger Binding="{Binding ElementName=win, Path=Resources[IsEditing]}" Value="{x:Null}">
												<Setter Property="Foreground" Value="Blue" />
											</DataTrigger>
											<DataTrigger Binding="{Binding ElementName=win, Path=Resources[IsEditing]}" Value="false">
												<Setter Property="Foreground" Value="LawnGreen" />
											</DataTrigger>
											<DataTrigger Binding="{Binding ElementName=win, Path=Resources[IsEditing]}" Value="true">
												<Setter Property="Foreground" Value="Red" />
											</DataTrigger>
											<!-- sadf
											<DataTrigger Binding="{Binding Source={x:Static local:Test.IsEditing}}" Value="{x:Null}">
												<Setter Property="Foreground" Value="blue"></Setter>
											</DataTrigger>
											<DataTrigger Binding="{Binding Source={x:Static local:Test.IsEditing}}" Value="false">
												<Setter Property="Foreground" Value="LawnGreen"></Setter>
											</DataTrigger>
											<DataTrigger Binding="{Binding Source={x:Static local:Test.IsEditing}}" Value="true">
												<Setter Property="Foreground" Value="red"></Setter>
											</DataTrigger>											-->

										</Style.Triggers>

									</Style>
								</TextBlock.Style>

							</TextBlock>

							<!--
							<Grid DockPanel.Dock="Right"
									HorizontalAlignment="Right"
									Margin="0"
									VerticalAlignment="Center"
									>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="16" />
								</Grid.ColumnDefinitions>

								<Grid.RowDefinitions>
									<RowDefinition Height="16" />
								</Grid.RowDefinitions>

								circle slash
								<Path Grid.Column="0"
										Data="F0 M 18.886719 14.208984 C 18.886719 16.656902 18.019205 18.75 16.28418 20.488281 C 14.549153 22.226562 12.457682 23.095703 10.009766 23.095703 C 7.555339 23.095703 5.460612 22.226562 3.725586 20.488281 C 1.990561 18.75 1.123047 16.656902 1.123047 14.208984 C 1.123047 11.761068 1.990561 9.671225 3.725586 7.939453 C 5.460612 6.207683 7.555339 5.341797 10.009766 5.341797 C 12.457682 5.341797 14.549153 6.207683 16.28418 7.939453 C 18.019205 9.671225 18.886719 11.761068 18.886719 14.208984 Z M 10 7.021484 C 8.333334 7.021485 6.852214 7.535809 5.556641 8.564453 L 15.654297 18.671875 C 16.676432 17.376303 17.1875 15.888672 17.1875 14.208984 C 17.1875 12.223308 16.487629 10.528972 15.087891 9.125977 C 13.68815 7.722982 11.992188 7.021485 10 7.021484 Z M 4.365234 9.755859 C 3.323568 11.057943 2.802734 12.542318 2.802734 14.208984 C 2.802734 16.207684 3.505859 17.9069 4.912109 19.306641 C 6.318359 20.706381 8.014323 21.40625 10 21.40625 C 11.666666 21.40625 13.157552 20.888672 14.472656 19.853516 Z "
										Fill="{StaticResource Fg.IsSel.ReadOnly}"
										HorizontalAlignment="Center"
										RenderTransformOrigin="0.5,0.5"
										Stretch="UniformToFill"
										VerticalAlignment="Center"
										/>

								pen
								<Path Grid.Column="0"
										Data="F0 M 17.93457 5.087891 C 18.188477 5.335287 18.362629 5.581055 18.457031 5.825195 C 18.551432 6.069336 18.598633 6.295573 18.598633 6.503906 C 18.598633 6.679688 18.574219 6.839193 18.525391 6.982422 C 18.476562 7.125652 18.426105 7.24935 18.374023 7.353516 C 18.302408 7.470703 18.227539 7.578125 18.149414 7.675781 C 18.110352 7.727865 18.055012 7.794598 17.983398 7.875977 C 17.911783 7.957357 17.836914 8.041992 17.758789 8.129883 C 17.680664 8.217773 17.604166 8.302409 17.529297 8.383789 C 17.454426 8.46517 17.394205 8.531901 17.348633 8.583984 C 17.244465 8.675131 17.127277 8.720704 16.99707 8.720703 C 16.866861 8.720704 16.743164 8.668621 16.625977 8.564453 L 14.604492 6.552734 C 14.500324 6.448568 14.448242 6.32487 14.448242 6.181641 C 14.448242 6.044922 14.49707 5.927734 14.594727 5.830078 C 14.640299 5.784506 14.70052 5.722657 14.775391 5.644531 C 14.85026 5.566406 14.930012 5.488281 15.014648 5.410156 C 15.099283 5.332031 15.180664 5.257162 15.258789 5.185547 C 15.336914 5.113934 15.405273 5.05534 15.463867 5.009766 C 15.568033 4.912109 15.685221 4.824219 15.81543 4.746094 C 15.926105 4.68099 16.056314 4.62077 16.206055 4.56543 C 16.355793 4.510092 16.518555 4.482422 16.694336 4.482422 C 16.876627 4.482422 17.071939 4.526367 17.280273 4.614258 C 17.488605 4.702148 17.706705 4.860027 17.93457 5.087891 Z M 15.756836 10.3125 L 6.176758 19.892578 L 3.305664 17.021484 L 12.885742 7.441406 Z M 1.391602 21.806641 L 2.368164 18.945312 L 4.243164 20.917969 Z"
										Fill="{StaticResource Fg.IsSel.ReadOnly}"
										HorizontalAlignment="Center"
										Stretch="UniformToFill"
										VerticalAlignment="Center"
										>
									<Path.RenderTransform>
										<ScaleTransform CenterX="8"
												CenterY="8"
												ScaleX="0.75"
												ScaleY="0.75"
												/>
									</Path.RenderTransform>
								</Path>

							<Button Content=""
									DockPanel.Dock="Right"
									Foreground="{StaticResource Fg.IsSel.CanEdit}"
									HorizontalAlignment="Right"
									Visibility="Collapsed"
									Style="{StaticResource BtnEdit}"
									/>

							</Grid>							-->

							<Button Content=""
									DockPanel.Dock="Right"
									Foreground="{StaticResource CanEdit.Fg.IsSel}"
									HorizontalAlignment="Right"
									Visibility="Collapsed"
									Style="{StaticResource BtnEdit}"
									/>

						</DockPanel>
					</Border>

					<!--  E  -->
					<TextBlock Grid.Column="{StaticResource Action1_Col}"
							Grid.Row="{StaticResource Action1_Row}"
							Background="{StaticResource Action1.Bg.ReadOnly}"
							Foreground="{StaticResource Action1.Fg.ReadOnly}"
							Text="action field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  F  -->
					<TextBlock Grid.Column="{StaticResource SubTitle_Col}"
							Grid.Row="{StaticResource SubTitle_Row}"
							Background="{StaticResource SubTitle.Bg.ReadOnly}"
							Foreground="{StaticResource SubTitle.Fg.ReadOnly}"
							Margin="1,1,1,0"
							Text="action field sub-header"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  G  -->
					<StackPanel Grid.Column="{StaticResource Ckbx1_Col}"
							Grid.Row="{StaticResource Ckbx1_Row}"
							Grid.RowSpan="2"
							Background="{StaticResource SubTitle.Gb.ReadOnly}"
							Margin="1,0,1,1"
							>

						<Border Background="{StaticResource Action2.Bg.ReadOnly}"
								BorderBrush="{StaticResource Action2.Bdr.ReadOnly}"
								BorderThickness="1"
								CornerRadius="6"
								Margin="5,3,5,0"
								>
							<DockPanel HorizontalAlignment="Stretch">
								<TextBlock DockPanel.Dock="Right"
										FontFamily="Segoe UI Symbol"
										Foreground="{StaticResource Action2.Fg.ReadOnly}"
										HorizontalAlignment="Right"
										Margin="0,1,3,-1"
										Padding="0"
										Text=""
										/>

								<CheckBox Content="checkbox text"
										DockPanel.Dock="Left"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="{StaticResource Action2.Fg.ReadOnly}"
										HorizontalAlignment="Left"
										IsChecked="True"
										Margin="5,0,0,0"
										Padding="0"
										VerticalAlignment="Center"
										>

									<CheckBox.Style>
										<Style BasedOn="{StaticResource Ckbx.Lv1.Style}" TargetType="CheckBox" />
									</CheckBox.Style>
								</CheckBox>
							</DockPanel>
						</Border>

						<Border Background="{StaticResource Action2.Bg.ReadOnly}"
								BorderBrush="{StaticResource Action2.Bdr.ReadOnly}"
								BorderThickness="1"
								CornerRadius="6"
								Margin="5,3,5,3"
								>
							<DockPanel HorizontalAlignment="Stretch">
								<TextBlock DockPanel.Dock="Right"
										FontFamily="Segoe UI Symbol"
										Foreground="{StaticResource Action2.Fg.ReadOnly}"
										HorizontalAlignment="Right"
										Margin="0,1,3,-1"
										Padding="0"
										Text=""
										/>

								<CheckBox Content="checkbox text"
										DockPanel.Dock="Left"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="{StaticResource Action2.Fg.ReadOnly}"
										HorizontalAlignment="Left"
										IsChecked="True"
										Margin="5,0,0,0"
										Padding="0"
										VerticalAlignment="Center"
										>

									<CheckBox.Style>
										<Style BasedOn="{StaticResource Ckbx.Lv1.Style}" TargetType="CheckBox" />
									</CheckBox.Style>
								</CheckBox>
							</DockPanel>
						</Border>

					</StackPanel>

					<!--  I  -->
					<TextBlock Grid.Column="{StaticResource Image_Col}"
							Grid.Row="{StaticResource Image_Row}"
							Background="{StaticResource Image1.Bg.IsSel}"
							Foreground="Black"
							Text="image field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  J  -->
					<TextBlock Grid.Column="{StaticResource Hlight_Col}"
							Grid.Row="{StaticResource Hlight_Row}"
							Background="{StaticResource Hlight.Bg.IsSel}"
							Foreground="{StaticResource Hlight.Fg.IsSel}"
							Text="Highlighted item"
							Style="{StaticResource TblkSamples}"
							/>

				</Grid>

			</Border>


			<!--  (E) is selected / is locked / na editing  -->
			<Border x:Key="IsSelectedIsLockedNaEditing"
					CornerRadius="4"
					Padding="4"
					>
				<Border.Style>
					<Style TargetType="Border">
						<Setter Property="IsEnabled" Value="True" />
						<Setter Property="Background" Value="{StaticResource Lv1.Item.Panel.Bkg.Nml}" />
					</Style>
				</Border.Style>
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="2*" />
						<ColumnDefinition Width="2*" />
						<ColumnDefinition Width="2*" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />

					</Grid.RowDefinitions>

					<TextBlock Grid.Column="0"
							Grid.Row="0"
							Background="{StaticResource Header.Bg.IsSel}"
							Foreground="Black"
							Text="(E) is selected / is locked / no editing"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  A  -->
					<TextBlock Grid.Column="1"
							Grid.Row="0"
							Background="{StaticResource TitleCanEdit.Bg.IsLocked}"
							Foreground="{StaticResource TitleCanEdit.Fg.IsLocked}"
							Text="title text/not editable field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  B  -->
					<TextBlock Grid.Column="1"
							Grid.Row="1"
							Background="{StaticResource TitleReadOnly.Bg.IsLocked}"
							Foreground="{StaticResource TitleReadOnly.Fg.IsLocked}"
							Text="title text/editable field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  C  -->
					<TextBlock Grid.Column="2"
							Grid.Row="0"
							Background="{StaticResource ReadOnly.Bg.IsLocked}"
							Foreground="{StaticResource ReadOnly.Fg.IsLocked}"
							Text="(Tblk) text/not editable"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  D  -->
					<Border Grid.Column="2"
							Grid.Row="1"
							Background="{StaticResource CanEdit.Bg.IsLocked}"
							BorderThickness="0"
							CornerRadius="6"
							Margin="1"
							>
						<DockPanel HorizontalAlignment="Stretch">

							<TextBox DockPanel.Dock="Left"
									Background="Transparent"
									BorderThickness="0"
									Foreground="{StaticResource CanEdit.Fg.IsLocked}"
									Text="(Tbx) text/editable"
									TextAlignment="left"
									Style="{StaticResource TbxTrigsBase}"
									/>

							<TextBlock DockPanel.Dock="Right"
									FontFamily="Segoe UI Symbol"
									Foreground="{StaticResource CanEdit.Fg.IsLocked}"
									HorizontalAlignment="Right"
									Margin="0,1,3,-1"
									Padding="0"
									Text="🔒"
									/>

							<Button Content=""
									DockPanel.Dock="Right"
									Foreground="{StaticResource CanEdit.Fg.IsLocked}"
									HorizontalAlignment="Right"
									Visibility="Collapsed"
									Style="{StaticResource BtnEdit}"
									/>

						</DockPanel>

					</Border>

					<!--  E  -->
					<TextBlock Grid.Column="{StaticResource Action1_Col}"
							Grid.Row="{StaticResource Action1_Row}"
							Background="{StaticResource Action1.Bg.IsLocked}"
							Foreground="{StaticResource Action1.Fg.IsLocked}"
							Text="action field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  F  -->
					<TextBlock Grid.Column="{StaticResource SubTitle_Col}"
							Grid.Row="{StaticResource SubTitle_Row}"
							Background="{StaticResource SubTitle.Bg.IsLocked}"
							Foreground="{StaticResource SubTitle.Fg.IsLocked}"
							Margin="1,1,1,0"
							Text="action field sub-header"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  G  -->
					<StackPanel Grid.Column="{StaticResource Ckbx1_Col}"
							Grid.Row="{StaticResource Ckbx1_Row}"
							Grid.RowSpan="2"
							Background="{StaticResource SubTitle.Gb.IsLocked}"
							Margin="1,0,1,1"
							>


						<Border Background="{StaticResource Action2.Bg.IsLocked}"
								CornerRadius="6"
								Margin="5,3,5,0"
								>
							<DockPanel HorizontalAlignment="Stretch">
								<TextBlock DockPanel.Dock="Right"
										FontFamily="Segoe UI Symbol"
										Foreground="{StaticResource CanEdit.Fg.IsLocked}"
										HorizontalAlignment="Right"
										Margin="0,1,3,-1"
										Padding="0"
										Text="🔒"
										/>

								<CheckBox Content="checkbox text"
										DockPanel.Dock="Left"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="{StaticResource Action2.Fg.IsLocked}"
										HorizontalAlignment="Left"
										IsChecked="True"
										Margin="5,0,0,0"
										Padding="0"
										VerticalAlignment="Center"
										>

									<CheckBox.Style>
										<Style BasedOn="{StaticResource Ckbx.Lv1.Style}" TargetType="CheckBox" />
									</CheckBox.Style>
								</CheckBox>
							</DockPanel>
						</Border>

						<Border Background="{StaticResource Action2.Bg.IsLocked}"
								CornerRadius="6"
								Margin="5,3,5,3"
								>
							<DockPanel HorizontalAlignment="Stretch">
								<TextBlock DockPanel.Dock="Right"
										FontFamily="Segoe UI Symbol"
										Foreground="{StaticResource CanEdit.Fg.IsLocked}"
										HorizontalAlignment="Right"
										Margin="0,1,3,-1"
										Padding="0"
										Text="🔒"
										/>

								<CheckBox Content="checkbox text"
										DockPanel.Dock="Left"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="{StaticResource Action2.Fg.IsLocked}"
										HorizontalAlignment="Left"
										IsChecked="True"
										Margin="5,0,0,0"
										Padding="0"
										VerticalAlignment="Center"
										>

									<CheckBox.Style>
										<Style BasedOn="{StaticResource Ckbx.Lv1.Style}" TargetType="CheckBox" />
									</CheckBox.Style>
								</CheckBox>
							</DockPanel>
						</Border>

					</StackPanel>

					<!--  I  -->
					<TextBlock Grid.Column="{StaticResource Image_Col}"
							Grid.Row="{StaticResource Image_Row}"
							Background="{StaticResource Image1.Bg.IsSel}"
							Foreground="Black"
							Text="image field"
							Style="{StaticResource TblkSamples}"
							/>

					<!--  J  -->
					<TextBlock Grid.Column="{StaticResource Hlight_Col}"
							Grid.Row="{StaticResource Hlight_Row}"
							Background="{StaticResource Hlight.Bg.IsSel}"
							Foreground="{StaticResource Hlight.Fg.IsSel}"
							Text="Highlighted item"
							Style="{StaticResource TblkSamples}"
							/>


				</Grid>

			</Border>

			<!--#endregion-->


			<!--#region > base templates-->

			<!--#region > popup template-->

			<ContentControl x:Key="HelpPopup" x:Shared="False">
				<ContentControl.ContentTemplate>

					<DataTemplate>

						<Grid x:Name="PopupGrid"
								Width="{TemplateBinding Width}"
								Background="Transparent"
								HorizontalAlignment="Stretch"
								>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="18" />
							</Grid.ColumnDefinitions>

							<Grid.RowDefinitions>
								<RowDefinition Height="*" />
								<RowDefinition Height="Auto" />

							</Grid.RowDefinitions>


							<Border Grid.Column="0"
									Grid.Row="0"
									Background="#e100FF00"
									BorderBrush="#e100FF00"
									BorderThickness="0,0,0,0"
									CornerRadius="12,12,0,0"
									Margin="0,0,3,0"
									Padding="13,0,2,0"
									>
								<TextBlock Background="Transparent"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="Black"
										HorizontalAlignment="Stretch"
										Margin="0"
										Text="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.TitleText), FallbackValue='This IsEnabled Title Text'}"
										/>
							</Border>
							<!--  <Rectangle  -->
							<!--  Grid.Column="1"  -->
							<!--  Grid.Row="1"  -->
							<!--  HorizontalAlignment="Stretch"  -->
							<!--  VerticalAlignment="Stretch"  -->
							<!--  Fill="Transparent"  -->
							<!--  />  -->

							<Button x:Name="BtnClosePopup"
									Grid.Column="1"
									Grid.Row="0"
									Background="LimeGreen"
									FontFamily="Segoe UI Symbol"
									Foreground="White"
									>
								<Button.Content>
									<Path Data="{StaticResource IconGeomClose}"
											Fill="White"
											Stretch="Uniform"
											/>
								</Button.Content>
							</Button>

							<Border Grid.Column="0"
									Grid.Row="1"
									BorderThickness="0"
									CornerRadius="0,0,12,12"
									Margin="0,0,3,0"
									Padding="10,0,4,4"
									>
								<Border.Background>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#E100FF00" Offset="0" />
										<GradientStop Color="#FF00C400" Offset="1" />
										<GradientStop Color="#FB003800" Offset="0.9" />
									</LinearGradientBrush>
								</Border.Background>
								<!-- <Border.BorderBrush> -->
								<!-- 	<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0"> -->
								<!-- 		<GradientStop Color="#E100FF00" Offset="0"/> -->
								<!-- 		<GradientStop Color="#FF00C400" Offset="1"/> -->
								<!-- 		<GradientStop Color="#FB003800" Offset="0.9"/> -->
								<!-- 	</LinearGradientBrush> -->
								<!-- </Border.BorderBrush> -->
								<TextBox Background="WhiteSmoke"
										BorderThickness="0"
										FontSize="{StaticResource FontSize.Normal}"
										Foreground="Black"
										HorizontalAlignment="Stretch"
										IsReadOnly="True"
										Padding="2"
										Text="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.MainContent), FallbackValue='Fallback text this is a second line of help text'}"
										TextAlignment="Left"
										TextWrapping="Wrap"
										>
									<TextBox.Resources>
										<Style TargetType="{x:Type Border}">
											<Setter Property="CornerRadius" Value="8">
											</Setter>
										</Style>
									</TextBox.Resources>
								</TextBox>

							</Border>


						</Grid>
					</DataTemplate>
				</ContentControl.ContentTemplate>
			</ContentControl>

			<!--#endregion-->

			<!--#region > base template-->

			<!--  not locked / is selected / not editing  -->
			<!--  base template  -->
			<DataTemplate x:Key="Base">

				<StackPanel x:Name="stackPanel"
						DataContext="{Binding ElementName=win}"
						Orientation="Vertical"
						>

					<!--#region > settings info-->

					<StackPanel x:Name="SelectedStatus" Orientation="Horizontal">

						<TextBlock Margin="10,0,0,0" Text="Is Selected|" />
						<TextBlock Width="30"
								HorizontalAlignment="Stretch"
								Margin="5,0,0,0"
								TextAlignment="Center"
								>
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Setter Property="Text" Value="No" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
											<Setter Property="Text" Value="Yes" />
											<Setter Property="Background" Value="GreenYellow" />
											<Setter Property="Foreground" Value="Black" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>

						<TextBlock Margin="10,0,0,0" Text="Is Editing|" />
						<TextBlock Width="30"
								HorizontalAlignment="Stretch"
								Margin="5,0,0,0"
								TextAlignment="Center"
								>
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Setter Property="Text" Value="No" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding IsEditing}" Value="True">
											<Setter Property="Text" Value="Yes" />
											<Setter Property="Background" Value="GreenYellow" />
											<Setter Property="Foreground" Value="Black" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>


						<TextBlock Margin="10,0,0,0" Text="Is IsReadOnly|" />
						<TextBlock Width="30"
								HorizontalAlignment="Stretch"
								Margin="5,0,0,0"
								TextAlignment="Center"
								>
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Setter Property="Text" Value="No" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding IsReadOnly}" Value="True">
											<Setter Property="Text" Value="Yes" />
											<Setter Property="Background" Value="GreenYellow" />
											<Setter Property="Foreground" Value="Black" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>

						<TextBlock Margin="10,0,0,0" Text="Is Locked|" />
						<TextBlock Width="30"
								HorizontalAlignment="Stretch"
								Margin="5,0,0,0"
								TextAlignment="Center"
								>
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Setter Property="Text" Value="No" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding IsLocked}" Value="True">
											<Setter Property="Text" Value="Yes" />
											<Setter Property="Background" Value="GreenYellow" />
											<Setter Property="Foreground" Value="Black" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>

					</StackPanel>

					<!--#endregion-->

					<Border x:Name="BdrListItem"
							CornerRadius="4"
							IsEnabled="{Binding Path=IsSelected}"
							Padding="4"
							>

						<Grid x:Name="GrdListItem" DataContext="{Binding ElementName=BdrListItem}">

							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="1*" />
								<ColumnDefinition Width="3*" />
								<ColumnDefinition Width="3*" />
								<ColumnDefinition Width="3*" />
							</Grid.ColumnDefinitions>

							<Grid.RowDefinitions>
								<RowDefinition Height="{StaticResource Lv1RowHeight}" />
								<RowDefinition Height="{StaticResource Lv1RowHeight}" />
								<RowDefinition Height="{StaticResource Lv1RowHeight}" />
								<RowDefinition Height="{StaticResource Lv1RowHeight}" />

							</Grid.RowDefinitions>

							<TextBlock x:Name="Header"
									Grid.Column="0"
									Grid.Row="0"
									Grid.ColumnSpan="2"
									Text="(Base)"
									>
								<TextBlock.Style>
									<Style BasedOn="{StaticResource TblkSamples}" TargetType="{x:Type TextBlock}">
										<Setter Property="Background" Value="{StaticResource Header.Bg.IsSel}" />
										<Setter Property="Foreground" Value="Black" />
									</Style>
								</TextBlock.Style>
							</TextBlock>


							<!--  BASE CONDITION: not locked / not selected / not editing  -->

							<Border x:Name="Id_BdrId"
									Grid.Column="0"
									Grid.Row="1"
									Grid.RowSpan="2"
									cs:VisualStates.BgDisabled="{StaticResource Id.Bg.NotSel}"
									cs:VisualStates.BgIsSel="{StaticResource Id.Bg.IsSel}"
									Style="{StaticResource BdrIsSelectedTrigger}"
									>
								<Grid>

									<TextBlock Grid.Column="0"
											Grid.Row="0"
											FontSize="40"
											HorizontalAlignment="Center"
											Margin="0,-4,0,4"
											Text="01"
											VerticalAlignment="Center"
											cs:VisualStates.FgDisabled="{StaticResource Id.Fg.NotSel}"
											cs:VisualStates.FgIsSel="{StaticResource Id.Fg.IsSel}"
											Style="{StaticResource TblkIsSelectedTrigger}"
											/>

									<Path x:Name="PthCanEditIconx"
											Grid.Column="0"
											Grid.Row="0"
											Width="10"
											Margin="0,0,5,5"
											VerticalAlignment="Bottom"
											cs:VisualStates.FgDisabled="{StaticResource IdIcon.Fg.NotSel}"
											cs:VisualStates.FgIsSel="{StaticResource IdIcon.Fg.IsSel}"
											cs:VisualStates.IconGeomDisabled="{StaticResource IconGeomIsLocked}"
											Style="{StaticResource PathIsSelectedTrigger}"
											/>

								</Grid>

							</Border>


							<!--  A  (done)  -->
							<Border x:Name="A_BdrTitleNoEd"
									Grid.Column="2"
									Grid.Row="0"
									Style="{StaticResource BdrAllTrigTitleNoEd}"
									>
								<!--  Style="{StaticResource BdrAllTriggers}"  -->

								<TextBlock x:Name="TblkTitleNoEd"
										Text="A title text/not editable field"
										Style="{StaticResource TblkAllTrigTitleNoEd}"
										>
									<!--  Style="{StaticResource TblkAllTriggers}"  -->

								</TextBlock>
							</Border>

							<!--  B  (done)  -->
							<Border x:Name="B_BdrCanEd"
									Grid.Column="2"
									Grid.Row="1"
									Style="{StaticResource BdrAllTrigCanEd}"
									>
								<!--  Style="{StaticResource BdrAllTriggers}"  -->

								<TextBlock x:Name="TblkCanEd"
										Text="B title text/editable field"
										Style="{StaticResource TblkAllTrigCanEd}"
										/>
								<!--  Style="{StaticResource TblkAllTriggers}"  -->
							</Border>

							<!--  C  (done)  -->
							<Border x:Name="C_BdNoEd"
									Grid.Column="3"
									Grid.Row="0"
									Style="{StaticResource BdrAllTrigNoEd}"
									>
								<!--  Style="{StaticResource BdrAllTriggers}"  -->

								<TextBlock x:Name="TblkInfoEd"
										Text="C (Tblk) text/not editable"
										Style="{StaticResource TblkAllTrigNoEd}"
										/>
								<!--  Style="{StaticResource TblkAllTriggers}"  -->
							</Border>

							<!--  D  -->
							<Grid x:Name="D_GrdCanEdit"
									Grid.Column="3"
									Grid.Row="1"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Center"
									>

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<Border Grid.Column="0"
										BorderThickness="1,1,0,1"
										CornerRadius="6,0,0,6"
										Margin="1,1,0,1"
										Style="{StaticResource BdrAllTrigCanEdit}"
										>

									<!--  D  -->
									<StackPanel>

										<TextBox x:Name="TbxCanEdit"
												HorizontalAlignment="Stretch"
												Text="D (Tbx) text/editable"
												Style="{StaticResource TbxAllTrigsCanEdit}"
												/>

										<!--  DataContext="{Binding DataContext,  -->
										<!--  ElementName=stackPanel}"  -->
										<Popup Name="PuCanEdit"
												Width="{Binding ElementName=GrdCanEdit, Path=ActualWidth, Converter={StaticResource sub}, ConverterParameter={StaticResource PopupOffset}}"
												AllowsTransparency="True"
												Button.Click="BtnPopupClose_OnClick"
												Child="{StaticResource HelpPopup}"
												HorizontalAlignment="Right"
												HorizontalOffset="4"
												MouseEnter="Popup_OnMouseEnter"
												MouseLeave="Popup_OnMouseLeave"
												Placement="Bottom"
												PlacementTarget="{Binding ElementName=TbxCanEdit, Mode=OneWay}"
												VerticalOffset="{StaticResource PopupOffset}"
												cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
												cs:VisualStates.TitleText="Can Edit Help"
												>
											<Popup.Effect>
												<DropShadowEffect BlurRadius="20" ShadowDepth="20" />
											</Popup.Effect>
										</Popup>

									</StackPanel>



								</Border>

								<Border Grid.Column="1"
										BorderThickness="0,1,0,1"
										CornerRadius="0"
										Margin="0,1,0,1"
										Style="{StaticResource BdrAllTrigCanEditIcon}"
										>
									<!--  cs:TestVisualStates.BgDefault="{StaticResource CanEdit.Bg.NotSel}"  -->
									<!--  cs:TestVisualStates.BgIsEditing="{StaticResource CanEdit.Bg.IsEditg}"  -->
									<!--  cs:TestVisualStates.BgIsLocked="{StaticResource CanEdit.Bg.IsLocked}"  -->
									<!--  cs:TestVisualStates.BgIsSelected="{StaticResource CanEdit.Bg.IsSel}"  -->
									<!--  cs:TestVisualStates.BgReadOnly="{StaticResource CanEdit.Bg.ReadOnly}"  -->
									<!--  cs:TestVisualStates.DoesMouseOver="True"  -->
									<!--  cs:TestVisualStates.MoIsEditing="{StaticResource CanEdit.Icon.Mo.IsEditg}"  -->

									<!--  D1  -->
									<Button x:Name="BtnCanEditClear"
											Content="&#xE106;"
											DockPanel.Dock="Right"
											Foreground="{StaticResource CanEdit.Fg.IsSel}"
											HorizontalAlignment="Right"
											Margin="2,0,2,0"
											Click="BtnCanEditClear_OnClick"
											>
										<Button.Style>
											<Style BasedOn="{StaticResource BtnCanEditClear}" TargetType="Button">
												<Setter Property="Visibility" Value="Collapsed">
												</Setter>
												<Style.Triggers>
													<DataTrigger Binding="{Binding ElementName=win, Path=IsEditing}" Value="True">
														<Setter Property="Visibility" Value="Visible" />
													</DataTrigger>
												</Style.Triggers>

											</Style>
										</Button.Style>
									</Button>
								</Border>

								<Border Grid.Column="2"
										BorderThickness="0,1,1,1"
										CornerRadius="0,6,6,0"
										Margin="0,1,1,1"
										MouseDown="CanEditInfo_MouseDown"
										Style="{StaticResource BdrAllTrigCanEditIcon}"
										>


									<Path x:Name="PthCanEditIcon" Style="{StaticResource PathAllTriggersFixedIconsCanEdit}">
										<!--  MouseDown="PopupCanEdit_MouseDown"  -->

									</Path>


								</Border>
							</Grid>

							<!-- </Border> -->

							<!--  E  (done)
							<Border x:Name="BdrAction1"

									cs:TestVisualStates.BgDefault="{StaticResource Action1.Bg.NotSel}"
									cs:TestVisualStates.BgIsEditing="{StaticResource Action1.Bg.IsEditg}"
									cs:TestVisualStates.BgIsLocked="{StaticResource Action1.Bg.IsLocked}"
									cs:TestVisualStates.BgIsSelected="{StaticResource Action1.Bg.IsSel}"
									cs:TestVisualStates.BgReadOnly="{StaticResource Action1.Bg.ReadOnly}"
									cs:TestVisualStates.DoesMouseOver="True"
									cs:TestVisualStates.MoIsEditing="{StaticResource Action1.Mo.IsEditg}"
									Style="{StaticResource BdrAllTriggers}"
									>	
									-->

							<!--  E  -->
							<Grid x:Name="E_GrdAction1"
									Grid.Column="2"
									Grid.Row="2"
									>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<Border x:Name="BdrAction1"
										Grid.Column="0"
										BorderThickness="1,1,0,1"
										CornerRadius="6,0,0,6"
										Margin="1,1,0,1"
										Style="{StaticResource BdrAllTrigAction1}"
										>
									<!--  cs:TestVisualStates.BgDefault="{StaticResource Action1.Bg.NotSel}"  -->
									<!--  cs:TestVisualStates.BgIsEditing="{StaticResource Action1.Bg.IsEditg}"  -->
									<!--  cs:TestVisualStates.BgIsLocked="{StaticResource Action1.Bg.IsLocked}"  -->
									<!--  cs:TestVisualStates.BgIsSelected="{StaticResource Action1.Bg.IsSel}"  -->
									<!--  cs:TestVisualStates.BgReadOnly="{StaticResource Action1.Bg.ReadOnly}"  -->
									<!--  cs:TestVisualStates.DoesMouseOver="True"  -->
									<!--  cs:TestVisualStates.MoIsEditing="{StaticResource Action1.Mo.IsEditg}"  -->
									<!--  Style="{StaticResource BdrAllTriggers}"  -->
									<!--  >  -->
									<StackPanel>

										<TextBlock x:Name="TblkAction1"
												Text="E action field"
												Style="{StaticResource TblkAllTrigAction1}"
												/>



										<Popup Name="PuAction1"
												AllowsTransparency="True"
												Button.Click="BtnPopupClose_OnClick"
												Child="{StaticResource HelpPopup}"
												HorizontalAlignment="Right"
												HorizontalOffset="4"
												Margin="10"
												MouseEnter="Popup_OnMouseEnter"
												MouseLeave="Popup_OnMouseLeave"
												Placement="Bottom"
												PlacementTarget="{Binding ElementName=TblkAction1, Mode=OneWay}"
												VerticalOffset="2"
												cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
												cs:VisualStates.TitleText="Action1 Help"
												>

										</Popup>

									</StackPanel>
								</Border>


								<Border Grid.Column="1"
										BorderThickness="0,1,1,1"
										CornerRadius="0,6,6,0"
										Margin="0,1,1,1"
										MouseDown="Action1Info_MouseDown"
										Style="{StaticResource BdrAllTrigAction1Icon}"
										>
									<!--  cs:TestVisualStates.BgDefault    ="{StaticResource Action1.Bg.NotSel}"  -->
									<!--  cs:TestVisualStates.BgIsEditing  ="{StaticResource Action1.Bg.IsEditg}"  -->
									<!--  cs:TestVisualStates.BgIsLocked   ="{StaticResource Action1.Bg.IsLocked}"  -->
									<!--  cs:TestVisualStates.BgIsSelected ="{StaticResource Action1.Bg.IsSel}"  -->
									<!--  cs:TestVisualStates.BgReadOnly  ="{StaticResource Action1.Bg.ReadOnly}"  -->
									<!--  cs:TestVisualStates.DoesMouseOver="True"  -->
									<!--  cs:TestVisualStates.MoIsEditing  ="{StaticResource Action1.Icon.Mo.IsEditg}"  -->

									<Border.Resources>
										<Style x:Key="PathStyle" TargetType="Path">

										</Style>
									</Border.Resources>
									<Path x:Name="PathAction1Icon" Style="{StaticResource PathAllTriggersFixedIconsAction1}" />
									<!--  Style="{StaticResource PathAllTriggersFixedIcons}"  -->
								</Border>
							</Grid>

							<!-- </Border> -->

							<!--  F and G  -->
							<StackPanel x:Name="F_G_SpSubTitleAndAction2"
									Grid.Column="1"
									Grid.Row="1"
									Grid.RowSpan="3"
									Margin="1,0,1,1"
									Style="{StaticResource StkPnlAllTrigsSpAction2}"
									>
								<!--  Style="{StaticResource StkPnlAllTriggers}"  -->

								<!--  F  (done)  -->
								<StackPanel.Resources>
									<Style x:Key="BorderStyle" TargetType="Border">

									</Style>
								</StackPanel.Resources>
								<Border x:Name="BdrSubTitle"
										Height="22"
										Margin="5,3,5,0"
										Style="{StaticResource BdrAllTrigSubTitle}"
										>


									<TextBlock x:Name="TblkSubTitle"
											Margin="1,1,1,0"
											Text="F action field sub-header"
											Style="{StaticResource TblkAllTrigSubTitle}"
											/>
									<!--  Style="{StaticResource TblkAllTriggers}"  -->
								</Border>

								<!--  G
								<Border x:Name="BdrAction2_1"
										Height="22"
										Margin="5,3,5,0"
										cs:TestVisualStates.BgDefault="{StaticResource Action2.Bg.NotSel}"
										cs:TestVisualStates.BgIsEditing="{StaticResource Action2.Bg.IsEditg}"
										cs:TestVisualStates.BgIsLocked="{StaticResource Action2.Bg.IsLocked}"
										cs:TestVisualStates.BgIsSelected="{StaticResource Action2.Bg.IsSel}"
										cs:TestVisualStates.BgReadOnly="{StaticResource Action2.Bg.ReadOnly}"
										cs:TestVisualStates.DoesMouseOver="True"
										cs:TestVisualStates.MoIsEditing="{StaticResource Action2.Mo.IsEditg}"
										Style="{StaticResource BdrAllTriggers}"
										>
										-->

								<Grid Height="22"
										HorizontalAlignment="Stretch"
										Margin="5,2,5,0"
										VerticalAlignment="Center"
										>

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>

									<Border Grid.Column="0"
											BorderThickness="1,1,0,1"
											CornerRadius="6,0,0,6"
											Margin="0"
											Style="{StaticResource BdrAllTrigAction2}"
											>
										<!--  cs:TestVisualStates.BgDefault     ="{StaticResource Action2.Bg.NotSel}"  -->
										<!--  cs:TestVisualStates.BgIsEditing   ="{StaticResource Action2.Bg.IsEditg}"  -->
										<!--  cs:TestVisualStates.BgIsLocked    ="{StaticResource Action2.Bg.IsLocked}"  -->
										<!--  cs:TestVisualStates.BgIsSelected  ="{StaticResource Action2.Bg.IsSel}"  -->
										<!--  cs:TestVisualStates.BgReadOnly   ="{StaticResource Action2.Bg.ReadOnly}"  -->
										<!--  cs:TestVisualStates.DoesMouseOver ="True"  -->
										<!--  cs:TestVisualStates.MoIsEditing   ="{StaticResource Action2.Mo.IsEditg}"  -->

										<!--  G  -->
										<CheckBox x:Name="CbxAction2_1"
												Content="G checkbox text"
												IsChecked="{Binding IsEnabled}"
												Margin="4,0,0,0"
												cs:CsCheckBoxAp.CheckBoxBoxMargin="0,1,0,1"
												cs:CsCheckBoxAp.CheckBoxCheckMargin="2"
												d:IsEnabled=" false"
												Style="{StaticResource CkbxAllTriggersCbx}"
												/>
										<!--  cs:TestVisualStates.DoesMouseOver="True"  -->
										<!--  cs:TestVisualStates.FgDefault="{StaticResource Action2.Fg.NotSel}"  -->
										<!--  cs:TestVisualStates.FgIsEditing="{StaticResource Action2.Fg.IsEditg}"  -->
										<!--  cs:TestVisualStates.FgIsLocked="{StaticResource Action2.Fg.IsLocked}"  -->
										<!--  cs:TestVisualStates.FgIsSelected="{StaticResource Action2.Fg.IsSel}"  -->
										<!--  cs:TestVisualStates.FgReadOnly="{StaticResource Action2.Fg.ReadOnly}"  -->
										<!--  cs:TestVisualStates.MoIsEditing="{StaticResource Action2.Mo.IsEditg}"  -->


									</Border>


									<Border Grid.Column="1"
											BorderThickness="0,1,1,1"
											CornerRadius="0,6,6,0"
											Margin="0"
											Style="{StaticResource BdrAllTrigAction2Icon}"
											>
										<!--  cs:TestVisualStates.BgDefault="{StaticResource Action2.Bg.NotSel}"  -->
										<!--  cs:TestVisualStates.BgIsEditing="{StaticResource Action2.Bg.IsEditg}"  -->
										<!--  cs:TestVisualStates.BgIsLocked="{StaticResource Action2.Bg.IsLocked}"  -->
										<!--  cs:TestVisualStates.BgIsSelected="{StaticResource Action2.Bg.IsSel}"  -->
										<!--  cs:TestVisualStates.BgReadOnly="{StaticResource Action2.Bg.ReadOnly}"  -->
										<!--  cs:TestVisualStates.DoesMouseOver="True"  -->
										<!--  cs:TestVisualStates.MoIsEditing="{StaticResource Action2.Icon.Mo.IsEditg}"  -->

										<!--  G2  -->
										<Path x:Name="PthAction2_1Icon"
												Margin="4"
												Style="{StaticResource PathAllTriggersFixedIconsAction2}"
												/>
										<!--  cs:TestVisualStates.FgDefault="{StaticResource Action2.Fg.NotSel}"  -->
										<!--  cs:TestVisualStates.FgIsEditing="{StaticResource Action2.Fg.IsEditg}"  -->
										<!--  cs:TestVisualStates.FgIsLocked="{StaticResource Action2.Fg.IsLocked}"  -->
										<!--  cs:TestVisualStates.FgIsSelected="{StaticResource Action2.Fg.IsSel}"  -->
										<!--  cs:TestVisualStates.FgReadOnly="{StaticResource Action2.Fg.ReadOnly}"  -->

									</Border>



								</Grid>
								<!-- </Border> -->


								<!--  G
								<Border x:Name="BdrAction2_2"
										Height="22"
										Margin="5,3,5,0"
										cs:TestVisualStates.BgDefault="{StaticResource Action2.Bg.NotSel}"
										cs:TestVisualStates.BgIsEditing="{StaticResource Action2.Bg.IsEditg}"
										cs:TestVisualStates.BgIsLocked="{StaticResource Action2.Bg.IsLocked}"
										cs:TestVisualStates.BgIsSelected="{StaticResource Action2.Bg.IsSel}"
										cs:TestVisualStates.BgReadOnly="{StaticResource Action2.Bg.ReadOnly}"
										cs:TestVisualStates.DoesMouseOver="True"
										cs:TestVisualStates.MoIsEditing="{StaticResource Action2.Mo.IsEditg}"
										Style="{StaticResource BdrAllTriggers}"
										>
									-->
								<Grid Height="22"
										HorizontalAlignment="Stretch"
										Margin="5,2,5,0"
										VerticalAlignment="Center"
										>

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>


									<Border Grid.Column="0"
											BorderThickness="1,1,0,1"
											CornerRadius="6,0,0,6"
											Margin="0"
											Style="{StaticResource BdrAllTrigAction2}"
											>
										<!--  cs:TestVisualStates.BgDefault="{StaticResource Action2.Bg.NotSel}"  -->
										<!--  cs:TestVisualStates.BgIsEditing="{StaticResource Action2.Bg.IsEditg}"  -->
										<!--  cs:TestVisualStates.BgIsLocked="{StaticResource Action2.Bg.IsLocked}"  -->
										<!--  cs:TestVisualStates.BgIsSelected="{StaticResource Action2.Bg.IsSel}"  -->
										<!--  cs:TestVisualStates.BgReadOnly="{StaticResource Action2.Bg.ReadOnly}"  -->
										<!--  cs:TestVisualStates.DoesMouseOver="True"  -->
										<!--  cs:TestVisualStates.MoIsEditing="{StaticResource Action2.Mo.IsEditg}"  -->


										<!--  G  -->
										<CheckBox x:Name="CbxAction2_2"
												Content="G checkbox text"
												DockPanel.Dock="Left"
												IsChecked="true"
												Margin="4,0,0,0"
												cs:CsCheckBoxAp.CheckBoxBoxMargin="0,1,0,1"
												cs:CsCheckBoxAp.CheckBoxCheckMargin="2"
												Style="{StaticResource CkbxAllTriggersCbx}"
												/>
										<!--  cs:TestVisualStates.FgDefault="{StaticResource Action2.Fg.NotSel}"  -->
										<!--  cs:TestVisualStates.FgIsEditing="{StaticResource Action2.Fg.IsEditg}"  -->
										<!--  cs:TestVisualStates.FgIsLocked="{StaticResource Action2.Fg.IsLocked}"  -->
										<!--  cs:TestVisualStates.FgIsSelected="{StaticResource Action2.Fg.IsSel}"  -->
										<!--  cs:TestVisualStates.FgReadOnly="{StaticResource Action2.Fg.ReadOnly}"  -->

									</Border>

									<Border Grid.Column="1"
											BorderThickness="0,1,1,1"
											CornerRadius="0,6,6,0"
											Margin="0"
											Style="{StaticResource BdrAllTrigAction2Icon}"
											>
										<!--  cs:TestVisualStates.BgDefault="{StaticResource Action2.Bg.NotSel}"  -->
										<!--  cs:TestVisualStates.BgIsEditing="{StaticResource Action2.Bg.IsEditg}"  -->
										<!--  cs:TestVisualStates.BgIsLocked="{StaticResource Action2.Bg.IsLocked}"  -->
										<!--  cs:TestVisualStates.BgIsSelected="{StaticResource Action2.Bg.IsSel}"  -->
										<!--  cs:TestVisualStates.BgReadOnly="{StaticResource Action2.Bg.ReadOnly}"  -->
										<!--  cs:TestVisualStates.DoesMouseOver="True"  -->
										<!--  cs:TestVisualStates.MoIsEditing="{StaticResource Action2.Icon.Mo.IsEditg}"  -->

										<!--  G2  -->
										<Path x:Name="PthAction2_2Icon"
												DockPanel.Dock="Right"
												Margin="4"
												Style="{StaticResource PathAllTriggersFixedIconsAction2}"
												/>
										<!--  cs:TestVisualStates.FgDefault="{StaticResource Action2.Fg.NotSel}"  -->
										<!--  cs:TestVisualStates.FgIsEditing="{StaticResource Action2.Fg.IsEditg}"  -->
										<!--  cs:TestVisualStates.FgIsLocked="{StaticResource Action2.Fg.IsLocked}"  -->
										<!--  cs:TestVisualStates.FgIsSelected="{StaticResource Action2.Fg.IsSel}"  -->
										<!--  cs:TestVisualStates.FgReadOnly="{StaticResource Action2.Fg.ReadOnly}"  -->

									</Border>

								</Grid>
								<!-- </Border> -->


							</StackPanel>

							<!--  I  (done)  -->
							<Border x:Name="I_BdrImage"
									Grid.Column="2"
									Grid.Row="3"
									cs:VisualStates.BgDisabled="{StaticResource Image1.Bg.NotSel}"
									cs:VisualStates.BgIsSel="{StaticResource Image1.Bg.IsSel}"
									Style="{StaticResource BdrIsSelectedTrigger}"
									>
								<TextBlock x:Name="TblkImage"
										Text="I image field"
										cs:VisualStates.FgDisabled="Black"
										cs:VisualStates.FgIsSel="Black"
										Style="{StaticResource TblkIsSelectedTrigger}"
										/>
							</Border>

							<!--  J  (done)  -->
							<Border x:Name="J_BdrHlight"
									Grid.Column="3"
									Grid.Row="2"
									cs:VisualStates.BgDisabled="{StaticResource Hlight.Bg.NotSel}"
									cs:VisualStates.BgIsSel="{StaticResource Hlight.Bg.IsSel}"
									Style="{StaticResource BdrIsSelectedTrigger}"
									>
								<TextBlock x:Name="TblkHlight"
										Text="J Highlighted item"
										cs:VisualStates.FgDisabled="{StaticResource Hlight.Fg.NotSel}"
										cs:VisualStates.FgIsSel="{StaticResource Hlight.Fg.IsSel}"
										Style="{StaticResource TblkIsSelectedTrigger}"
										/>
							</Border>

						</Grid>


					</Border>

				</StackPanel>

			</DataTemplate>

			<!--#endregion-->

			<!--#region > base unit settings-->

			<DataTemplate x:Key="DtUnitSettings">
				<!--
					to have
					header  (no triggers / animation) (got color)
					combobox (triggers: enabled / mouse over / pressed)
					unit setting: title (no triggers / animation)
					unit setting: value (no triggers / animation)
				-->

				<StackPanel x:Name="SpUnitSettings" Orientation="Vertical">

					<Border x:Name="BdrHeader"
							HorizontalAlignment="Stretch"
							Margin="0,0,0,3"
							cs:VisualStates.BgDisabled="{StaticResource Header.Bg.IsSel}"
							Style="{StaticResource BdrHeader}"
							>
						<TextBlock Text="Unit Settings"
								cs:VisualStates.FgDisabled="{StaticResource Header.Fg.IsSel}"
								Style="{StaticResource TblkHeader}"
								/>
					</Border>


					<StackPanel x:Name="SpUnitValues"
							Margin="0,5,0,0"
							Orientation="Vertical"
							>


						<StackPanel x:Name="SpUnitName" Orientation="Horizontal">
							<Border x:Name="BdrUnitNameTitle" Style="{StaticResource BdrUnitValTitle}">
								<TextBlock Text="Style Name" Style="{StaticResource TblkUnitValTitle}" />
							</Border>

							<Border x:Name="BdrUnitNameValue" Style="{StaticResource BdrUnitValue}">
								<TextBlock Text="Name of Style" Style="{StaticResource TblkUnitValue}" />
							</Border>
						</StackPanel>

						<StackPanel x:Name="SpUnitDesc"
								Margin="0,5,0,0"
								Orientation="Horizontal"
								>
							<Border x:Name="BdrUnitDescTitle" Style="{StaticResource BdrUnitValTitle}">
								<TextBlock Text="Style Description" Style="{StaticResource TblkUnitValTitle}" />
							</Border>

							<Border x:Name="BdrUnitDescValue" Style="{StaticResource BdrUnitValue}">
								<TextBlock Text="Description of Style" Style="{StaticResource TblkUnitValue}" />
							</Border>
						</StackPanel>

						<StackPanel x:Name="SpUnitSys"
								Margin="0,5,0,0"
								Orientation="Horizontal"
								>
							<Border x:Name="BdrUnitSysTitle" Style="{StaticResource BdrUnitValTitle}">
								<TextBlock Text="Unit System" Style="{StaticResource TblkUnitValTitle}" />
							</Border>

							<Border x:Name="BdrUnitSysValue" Style="{StaticResource BdrUnitValue}">
								<TextBlock Text="US_IMPERIAL" Style="{StaticResource TblkUnitValue}" />
							</Border>
						</StackPanel>
					</StackPanel>


					<StackPanel Margin="0,15,0,5" Orientation="Horizontal">

						<CheckBox x:Name="CbxEnDisable"
								Content="Enable"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitEnabled, ElementName=win, Mode=TwoWay}"
								/>


						<CheckBox x:Name="CbxUnitSelected"
								Content="Selected"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitSelected, ElementName=win, FallbackValue='false'}"
								Margin="10,0,0,0"
								/>

						<CheckBox x:Name="CbxReadOnly"
								Content="ReadOnly"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitReadOnly, ElementName=win, FallbackValue='false'}"
								Margin="10,0,0,0"
								/>

						<CheckBox x:Name="CbxLocked"
								Content="Locked"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitIsLocked, ElementName=win, FallbackValue='false'}"
								Margin="10,0,0,0"
								/>


						<CheckBox x:Name="CbIsGoodOrBad"
								Content="Good or Bad"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding IsGoodOrBad, ElementName=win, FallbackValue='false'}"
								IsThreeState="True"
								Margin="10,0,0,0"
								/>


					</StackPanel>

					<StackPanel Margin="0,0,0,3" Orientation="Horizontal">

						<TextBlock Width="50"
								FontSize="11"
								HorizontalAlignment="Left"
								Margin="0,0,10,0"
								Text="Disabled"
								TextAlignment="Center"
								>
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Setter Property="Background" Value="Transparent" />
									<Setter Property="Foreground" Value="White" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding IsEnabled, ElementName=CbxUnitSelect, Mode=OneWay}" Value="False">
											<Setter Property="Foreground" Value="Black" />
											<Setter Property="Background" Value="Lime" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>

						<TextBlock Width="50"
								FontSize="11"
								HorizontalAlignment="Left"
								Margin="0,0,10,0"
								Text="Enabled"
								TextAlignment="Center"
								>
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Setter Property="Background" Value="Transparent" />
									<Setter Property="Foreground" Value="White" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding IsEnabled, ElementName=CbxUnitSelect}" Value="True">
											<Setter Property="Foreground" Value="Black" />
											<Setter Property="Background" Value="Lime" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>


						<TextBlock Width="50"
								FontSize="11"
								HorizontalAlignment="Left"
								Margin="0,0,10,0"
								Text="Focused"
								TextAlignment="Center"
								>
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Setter Property="Background" Value="Transparent" />
									<Setter Property="Foreground" Value="White" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding IsFocused, ElementName=CbxUnitSelect}" Value="True">
											<Setter Property="Foreground" Value="Black" />
											<Setter Property="Background" Value="Lime" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>


						<TextBlock Width="50"
								FontSize="11"
								HorizontalAlignment="Left"
								Margin="0,0,10,0"
								Text="ReadOnly"
								TextAlignment="Center"
								>
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Setter Property="Background" Value="Transparent" />
									<Setter Property="Foreground" Value="White" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding ElementName=win, Path=AddUnitReadOnly}" Value="true">
											<Setter Property="Foreground" Value="Black" />
											<Setter Property="Background" Value="Lime" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>


						<TextBlock Width="50"
								FontSize="11"
								HorizontalAlignment="Left"
								Margin="0,0,10,0"
								Text="Locked"
								TextAlignment="Center"
								>
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Setter Property="Background" Value="Transparent" />
									<Setter Property="Foreground" Value="White" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding ElementName=win, Path=AddUnitIsLocked}" Value="true">
											<Setter Property="Foreground" Value="Black" />
											<Setter Property="Background" Value="Lime" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>

						<TextBlock Width="50"
								FontSize="11"
								HorizontalAlignment="Left"
								Margin="0,0,10,0"
								Text="Good-Bad"
								TextAlignment="Center"
								>
							<TextBlock.Style>
								<Style TargetType="TextBlock">
									<Setter Property="Background" Value="Transparent" />
									<Setter Property="Foreground" Value="White" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding ElementName=win, Path=IsGoodOrBad}" Value="true">
											<Setter Property="Foreground" Value="Black" />
											<Setter Property="Background" Value="Lime" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>




					</StackPanel>


					<ComboBox x:Name="CbxUnitSelect"
							DropDownOpened="CbxUnitSelect2_DropDownOpened"
							FocusVisualStyle="{x:Null}"
							IsEditable="False"
							IsEnabled="{Binding ElementName=win, Path=AddUnitEnabled}"
							IsSynchronizedWithCurrentItem="True"
							ItemContainerStyle="{DynamicResource CsCbxItemContainerStyle}"
							Margin="0,5,0,0"
							MaxDropDownHeight="120"
							Padding="0,1,0,5"
							SelectedIndex="0"
							VerticalAlignment="Top"
							cs:CsComboBoxAp.ComboBoxBdrRadius="{StaticResource CornerRadius.Sm}"
							cs:CsComboBoxAp.DropDownBdrBrush="{StaticResource Cbx.DropDown.Bg.IsSel}"
							cs:CsComboBoxAp.DropDownBdrRadius="4"
							cs:CsComboBoxAp.DropDownBdrThickness="4"
							cs:CsComboBoxAp.DropDownBrush="{StaticResource Cbx.DropDown.Bg.IsSel}"
							cs:CsComboBoxAp.DropDownMaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource self}}"
							cs:CsComboBoxAp.DropDownMinWidth="80.0"
							cs:VisualStates.BdrDisabled="{StaticResource Cbx.Bdr.NotSel}"
							cs:VisualStates.BdrIsEditing="{StaticResource Cbx.Bdr.IsEditg}"
							cs:VisualStates.BdrIsEditingMouseOver="{StaticResource Cbx.Bdr.IsEditg.MouseOver}"
							cs:VisualStates.BdrIsReadOnly="{StaticResource Cbx.Bdr.IsReadOnly}"
							cs:VisualStates.BdrIsSel="{StaticResource Cbx.Bdr.IsSel}"
							cs:VisualStates.BdrNotEditingMouseOver="{StaticResource Cbx.Bdr.NotEditg.MouseOver}"
							cs:VisualStates.BdrNotSel="{StaticResource Cbx.Bdr.NotSel}"
							cs:VisualStates.BgDisabled="{StaticResource Cbx.Bg.NotSel}"
							cs:VisualStates.BgIsEditing="{StaticResource Cbx.Bg.IsEditg}"
							cs:VisualStates.BgIsEditingMouseOver="{StaticResource Cbx.Bg.IsEditg.MouseOver}"
							cs:VisualStates.BgIsReadOnly="{StaticResource Cbx.Bg.IsReadOnly}"
							cs:VisualStates.BgIsSel="{StaticResource Cbx.Bg.IsSel}"
							cs:VisualStates.BgNotEditingMouseOver="{StaticResource Cbx.Bg.NotEditg.MouseOver}"
							cs:VisualStates.BgNotSel="{StaticResource Cbx.Bg.NotSel}"
							cs:VisualStates.FgDisabled="{StaticResource Cbx.Fg.NotSel}"
							cs:VisualStates.FgIsEditing="{StaticResource Cbx.Fg.IsEditg}"
							cs:VisualStates.FgIsEditingMouseOver="{StaticResource Cbx.Fg.IsEditg.MouseOver}"
							cs:VisualStates.FgIsReadOnly="{StaticResource Cbx.Fg.IsReadOnly}"
							cs:VisualStates.FgIsSel="{StaticResource Cbx.Fg.IsSel}"
							cs:VisualStates.FgNotEditingMouseOver="{StaticResource Cbx.Fg.NotEditg.MouseOver}"
							cs:VisualStates.FgNotSel="{StaticResource Cbx.Fg.NotSel}"
							d:IsEnabled=" false"
							>

						<ComboBox.Style>
							<Style BasedOn="{StaticResource CtrlWithBdrTrigs.L2}" TargetType="ComboBox">
								<Setter Property="Template" Value="{StaticResource CsComboBoxCt}" />
							</Style>
						</ComboBox.Style>

						<ComboBox.Items>
							<ComboBoxItem>item 1</ComboBoxItem>
							<ComboBoxItem>item 2 this is a very wide item to test how a long item gets displayed and how to work with very wide items</ComboBoxItem>
							<ComboBoxItem>item 3</ComboBoxItem>
							<ComboBoxItem>item 4</ComboBoxItem>
							<ComboBoxItem>item 5</ComboBoxItem>
							<ComboBoxItem>item 6</ComboBoxItem>
						</ComboBox.Items>

					</ComboBox>

				</StackPanel>

			</DataTemplate>

			<!--#endregion-->

			<!--#region > base add unit-->

			<DataTemplate x:Key="DtAddUnit">

				<!-- to have
				group -> (triggers: enable / disable) -
					sub-title (triggers: enable / disable)
					value entry title (triggers: enable / disable)
					value entry with clear (triggers: enable / disable / editing / value good / value bad)
					clear button (triggers: enable / disable / editing / value good / value bad)
					value entry without clear (triggers: enable / disable / editing / value good / value bad)
				<- group
				-->
				<StackPanel Orientation="Vertical"
						cs:VisualStates.IsGoodBad="{Binding ElementName=win, Path=IsGoodOrBad}"
						cs:VisualStates.IsLocked="{Binding ElementName=win, Path=AddUnitIsLocked}"
						cs:VisualStates.IsReadOnly="{Binding ElementName=win, Path=AddUnitReadOnly}"
						cs:VisualStates.IsSelected="{Binding ElementName=win, Path=AddUnitSelected}"
						>

					<StackPanel Margin="10,0,0,5" Orientation="Horizontal">


						<CheckBox x:Name="CbxEnDisable"
								Content="Enable"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitEnabled, ElementName=win, Mode=TwoWay}"
								/>


						<CheckBox x:Name="CbxUnitSelected"
								Content="Selected"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitSelected, ElementName=win, FallbackValue='false'}"
								Margin="10,0,0,0"
								/>

						<CheckBox x:Name="CbxReadOnly"
								Content="ReadOnly"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitReadOnly, ElementName=win, FallbackValue='false'}"
								Margin="10,0,0,0"
								/>

						<CheckBox x:Name="CbxLocked"
								Content="Locked"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitIsLocked, ElementName=win, FallbackValue='false'}"
								Margin="10,0,0,0"
								/>


						<CheckBox x:Name="CbIsGoodOrBad"
								Content="Good or Bad"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding IsGoodOrBad, ElementName=win, FallbackValue='false'}"
								IsThreeState="True"
								Margin="10,0,0,0"
								/>


					</StackPanel>

					<Border x:Name="BdrAddUnit"
							BorderThickness="0"
							CornerRadius="{StaticResource CornerRadius.Lg}"
							HorizontalAlignment="Stretch"
							IsEnabled="{Binding AddUnitEnabled, ElementName=win}"
							Padding="12"
							VerticalAlignment="Top"
							cs:VisualStates.BgDisabled="{StaticResource AddUnit.Gbdr.Disabled}"
							cs:VisualStates.BgIsSel="{StaticResource AddUnit.Gbdr.IsSel}"
							cs:VisualStates.BgNotSel="{StaticResource AddUnit.Gbdr.NotSel}"
							d:IsEnabled="false"
							Style="{StaticResource BdrTrigs.L1}"
							>

						<StackPanel x:Name="SpAddUnit1" Orientation="Vertical">

							<Border x:Name="BdrAddUnitTitle"
									CornerRadius="{StaticResource CornerRadius.Std}"
									Margin="0,0,0,12"
									cs:VisualStates.BgDisabled="{StaticResource AddUnit.Title.Bg.Disabled}"
									cs:VisualStates.BgIsSel="{StaticResource AddUnit.Title.Bg.IsSel}"
									cs:VisualStates.BgNotSel="{StaticResource AddUnit.Title.Bg.NotSel}"
									Style="{StaticResource BdrTrigs.L1}"
									>

								<TextBlock x:Name="TblkAddUnitTitle"
										Padding="8,2,0,4"
										Text="Add the Above as a New Unit Style?"
										cs:VisualStates.FgDisabled="{StaticResource AddUnit.Title.Fg.Disabled}"
										cs:VisualStates.FgIsSel="{StaticResource AddUnit.Title.Fg.IsSel}"
										cs:VisualStates.FgNotSel="{StaticResource AddUnit.Title.Fg.NotSel}"
										Style="{StaticResource TblkTrigs.L1}"
										/>
							</Border>


							<Border x:Name="BdrAddUnitSubTitle"
									CornerRadius="{StaticResource CornerRadius.Std}"
									cs:VisualStates.BgDisabled="{StaticResource AddUnit.SubTitle.Bg.Disabled}"
									cs:VisualStates.BgIsSel="{StaticResource AddUnit.SubTitle.Bg.IsSel}"
									cs:VisualStates.BgNotSel="{StaticResource AddUnit.SubTitle.Bg.NotSel}"
									Style="{StaticResource BdrTrigs.L1}"
									>

								<StackPanel x:Name="SpAddUnitSubTitle" Orientation="Vertical">
									<TextBlock x:Name="TblkAddUnitSubTitle"
											Margin="8,2,0,4"
											Text="Name for New Unit Style?"
											cs:VisualStates.FgDisabled="{StaticResource AddUnit.SubTitle.Fg.Disabled}"
											cs:VisualStates.FgIsSel="{StaticResource AddUnit.SubTitle.Fg.IsSel}"
											cs:VisualStates.FgNotSel="{StaticResource AddUnit.SubTitle.Fg.NotSel}"
											Style="{StaticResource TblkTrigs.L1}"
											/>

									<!--  flags  -->
									<StackPanel DataContext="{Binding ElementName=TbxGetStyleName1}"
											Margin="0,0,0,0"
											Orientation="Vertical"
											>


										<StackPanel Orientation="Horizontal">

											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="Disabled"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding IsEnabled}" Value="False" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="NotSel"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding IsEnabled}" Value="True" />
																	<Condition Binding="{Binding IsFocused}" Value="False" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsSelected)}" Value="False" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsReadOnly)}" Value="false" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsLocked)}" Value="false" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="IsSel"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding IsEnabled}" Value="True" />
																	<Condition Binding="{Binding IsFocused}" Value="False" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsSelected)}" Value="true" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsReadOnly)}" Value="false" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsLocked)}" Value="false" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="IsEditg"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding IsEnabled}" Value="True" />
																	<Condition Binding="{Binding IsFocused}" Value="True" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsSelected)}" Value="true" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsReadOnly)}" Value="false" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsLocked)}" Value="false" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="ReadOnly"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding IsEnabled}" Value="True" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsReadOnly)}" Value="true" />
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsLocked)}" Value="false" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="IsLocked"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding Path=(cs:VisualStates.IsLocked)}" Value="true" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

										</StackPanel>


										<StackPanel Orientation="Horizontal">

											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="disabled"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsEnabled, Mode=OneWay}" Value="false">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="enabled"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsEnabled, Mode=OneWay}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>



											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="selected"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding (cs:VisualStates.IsSelected)}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="focused"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsFocused, Mode=OneWay}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="read only"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding (cs:VisualStates.IsReadOnly)}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="locked"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding (cs:VisualStates.IsLocked)}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

										</StackPanel>

									</StackPanel>


									<Border x:Name="BdrGetStyleName"
											BorderThickness="1"
											CornerRadius="{StaticResource CornerRadius.Std}"
											Margin="5"
											cs:VisualStates.BdrDisabled="{StaticResource ValEntry.Bdr.Disabled}"
											cs:VisualStates.BdrIsEditing="{StaticResource ValEntry.Bdr.IsEditg}"
											cs:VisualStates.BdrIsEditingMouseOver="{StaticResource ValEntry.Bdr.IsEditg.MouseOver}"
											cs:VisualStates.BdrIsLocked="{StaticResource ValEntry.Bdr.IsLocked}"
											cs:VisualStates.BdrIsReadOnly="{StaticResource ValEntry.Bdr.Disabled}"
											cs:VisualStates.BdrIsSel="{StaticResource ValEntry.Bdr.IsSel}"
											cs:VisualStates.BdrNotEditingMouseOver="{StaticResource ValEntry.Bdr.NotEditg.MouseOver}"
											cs:VisualStates.BdrNotSel="{StaticResource ValEntry.Bdr.NotSel}"
											cs:VisualStates.BgDisabled="{StaticResource ValEntry.Bg.Disabled}"
											cs:VisualStates.BgIsEditing="{StaticResource ValEntry.Bg.IsEditg}"
											cs:VisualStates.BgIsEditingMouseOver="{StaticResource ValEntry.Bg.IsEditg.MouseOver}"
											cs:VisualStates.BgIsLocked="{StaticResource ValEntry.Bg.IsLocked}"
											cs:VisualStates.BgIsReadOnly="{StaticResource ValEntry.Bg.IsReadOnly}"
											cs:VisualStates.BgIsSel="{StaticResource ValEntry.Bg.IsSel}"
											cs:VisualStates.BgNotEditingMouseOver="{StaticResource ValEntry.Bg.NotEditg.MouseOver}"
											cs:VisualStates.BgNotSel="{StaticResource ValEntry.Bg.NotSel}"
											cs:VisualStates.DoesMouseOver="true"
											Style="{StaticResource BdrTrigs.L5}"
											>

										<DockPanel x:Name="DpGetStyleName" HorizontalAlignment="Stretch">

											<Button x:Name="BtnClrStyleName"
													Content="&#xE106;"
													DockPanel.Dock="Right"
													BorderThickness="0"
													FontFamily="Segoe UI Symbol"
													FontSize="{StaticResource FontSize.Normal}"
													HorizontalAlignment="Stretch"
													Template="{StaticResource Btn.Ct.Stealth}"
													>
												<Button.Style>
													<Style TargetType="Button">
														<Setter Property="Visibility" Value="Collapsed" />
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="{StaticResource ValEntry.BtnClr.Fg.IsEditg}" />

														<Style.Triggers>
															<!--  true  -->
															<DataTrigger Binding="{Binding ElementName=BdrGetStyleName, Path=IsKeyboardFocusWithin}" Value="true">
																<Setter Property="Visibility" Value="Visible" />
															</DataTrigger>
															<!--  true  -->
															<Trigger Property="IsMouseOver" Value="true">
																<Setter Property="Background" Value="{StaticResource ValEntry.BtnClr.Bg.IsEditg}" />
															</Trigger>

														</Style.Triggers>

													</Style>
												</Button.Style>
											</Button>

											<TextBox x:Name="TbxGetStyleName1"
													DockPanel.Dock="Left"
													GotFocus="TbxGetStyleName1_GotFocus"
													Text="Sample Text"
													cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.Disabled}"
													cs:VisualStates.FgIsEditing="{StaticResource ValEntry.Fg.IsEditg}"
													cs:VisualStates.FgIsEditingMouseOver="{StaticResource ValEntry.Fg.IsEditg.MouseOver}"
													cs:VisualStates.FgIsLocked="{StaticResource ValEntry.Fg.IsLocked}"
													cs:VisualStates.FgIsReadOnly="{StaticResource ValEntry.Fg.IsReadOnly}"
													cs:VisualStates.FgIsSel="{StaticResource ValEntry.Fg.IsSel}"
													cs:VisualStates.FgNotEditingMouseOver="{StaticResource ValEntry.Fg.NotEditg.MouseOver}"
													cs:VisualStates.FgNotSel="{StaticResource ValEntry.Fg.NotSel}"
													Style="{StaticResource Tbx.Editable}"
													/>
											<!--  Background="Transparent"  -->
											<!--  BorderThickness="0"  -->
											<!--  HorizontalAlignment="Stretch"  -->
											<!--  Padding="5,2,0,4"  -->

										</DockPanel>

									</Border>

									<StackPanel IsEnabled="False"
											Margin="0,5,0,5"
											Orientation="Vertical"
											>
										<StackPanel Orientation="Horizontal">
											<Border Width="55"
													Background="{StaticResource ValEntry.Bg.Disabled}"
													BorderBrush="{StaticResource ValEntry.Bdr.Disabled}"
													BorderThickness="1"
													CornerRadius="{StaticResource CornerRadius.Std}"
													Margin="0,0,5,0"
													>
												<TextBox 
														IsEnabled="false"
														Text="disabled"
														cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.Disabled}"
														Style="{StaticResource TbxExample}"
														/>
											</Border>

											<Border Width="55"
													Background="{StaticResource ValEntry.Bg.NotSel}"
													BorderBrush="{StaticResource ValEntry.Bdr.NotSel}"
													BorderThickness="1"
													CornerRadius="{StaticResource CornerRadius.Std}"
													Margin="0,0,5,0"
													>
												<TextBox
														Text="not sel"
														cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.NotSel}"
														Style="{StaticResource TbxExample}"
														/>
											</Border>


											<Border Width="55"
													Background="{StaticResource ValEntry.Bg.IsSel}"
													BorderBrush="{StaticResource ValEntry.Bdr.IsSel}"
													BorderThickness="1"
													CornerRadius="{StaticResource CornerRadius.Std}"
													Margin="0,0,5,0"
													>
												<TextBox Background="Transparent"
														Text="sel"
														cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.IsSel}"
														Style="{StaticResource TbxExample}"
														/>
											</Border>


											<Border Width="55"
													Background="{StaticResource ValEntry.Bg.IsEditg}"
													BorderBrush="{StaticResource ValEntry.Bdr.IsEditg}"
													BorderThickness="1"
													CornerRadius="{StaticResource CornerRadius.Std}"
													Margin="0,0,5,0"
													>
												<TextBox Background="Transparent"
														Text="editing"
														cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.IsEditg}"
														Style="{StaticResource TbxExample}"
														/>
											</Border>

											<Border Width="55"
													Background="{StaticResource ValEntry.Bg.IsReadOnly}"
													BorderBrush="{StaticResource ValEntry.Bdr.IsReadOnly}"
													BorderThickness="1"
													CornerRadius="{StaticResource CornerRadius.Std}"
													Margin="0,0,5,0"
													>
												<TextBox Background="Transparent"
														Text="read only"
														cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.IsReadOnly}"
														Style="{StaticResource TbxExample}"
														/>
											</Border>


											<Border Width="55"
													Background="{StaticResource ValEntry.Bg.IsLocked}"
													BorderBrush="{StaticResource ValEntry.Bdr.IsLocked}"
													BorderThickness="1"
													CornerRadius="{StaticResource CornerRadius.Std}"
													Margin="0,0,5,0"
													>
												<TextBox Background="Transparent"
														Text="locked"
														cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.IsLocked}"
														Style="{StaticResource TbxExample}"
														/>
											</Border>


											<Border Width="55"
													Background="{StaticResource ValEntry.Bg.IsEditg}"
													BorderBrush="{StaticResource Bdr.Good}"
													BorderThickness="1"
													CornerRadius="{StaticResource CornerRadius.Std}"
													Margin="0,0,5,0"
													>
												<TextBox Background="Transparent"
														Text="good"
														cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.IsEditg}"
														Style="{StaticResource TbxExample}"
														/>
											</Border>


											<Border Width="55"
													Background="{StaticResource ValEntry.Bg.IsEditg}"
													BorderBrush="{StaticResource Bdr.Bad}"
													BorderThickness="1"
													CornerRadius="{StaticResource CornerRadius.Std}"
													Margin="0,0,5,0"
													>
												<TextBox Background="Transparent"
														Text="bad"
														cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.IsEditg}"
														Style="{StaticResource TbxExample}"
														/>
											</Border>



										</StackPanel>

										<StackPanel Margin="60,0,0,0" Orientation="Horizontal">

											<Border Width="115"
													Background="{StaticResource ValEntry.Bg.NotEditg.MouseOver}"
													BorderBrush="{StaticResource ValEntry.Bdr.NotEditg.MouseOver}"
													BorderThickness="1"
													CornerRadius="{StaticResource CornerRadius.Std}"
													Margin="0,0,5,0"
													>
												<TextBox Background="Transparent"
														Text="mo_not_ed"
														cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.NotEditg.MouseOver}"
														Style="{StaticResource TbxExample}"
														/>
											</Border>


											<Border Width="55"
													Background="{StaticResource ValEntry.Bg.IsEditg.MouseOver}"
													BorderBrush="{StaticResource ValEntry.Bdr.IsEditg.MouseOver}"
													BorderThickness="1"
													CornerRadius="{StaticResource CornerRadius.Std}"
													Margin="0,0,5,0"
													>
												<TextBox Background="Transparent"
														Text="mo_is_ed"
														cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.IsEditg.MouseOver}"
														Style="{StaticResource TbxExample}"
														/>
											</Border>
										</StackPanel>


									</StackPanel>

									<StackPanel Margin="5,5,0,0" Orientation="Vertical">

										<StackPanel DataContext="{Binding ElementName=CbxUnitSelect2}"
												Margin="0,5,0,0"
												Orientation="Vertical"
												>

											<StackPanel Orientation="Horizontal">

												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="Disabled"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition Binding="{Binding IsEnabled}" Value="False" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</MultiDataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>

												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="NotSel"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition Binding="{Binding IsEnabled}" Value="True" />
																		<Condition Binding="{Binding IsFocused}" Value="False" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsSelected)}" Value="False" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsReadOnly)}" Value="false" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsLocked)}" Value="false" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</MultiDataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>


												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="IsSel"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition Binding="{Binding IsEnabled}" Value="True" />
																		<Condition Binding="{Binding IsFocused}" Value="False" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsSelected)}" Value="true" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsReadOnly)}" Value="false" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsLocked)}" Value="false" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</MultiDataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>


												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="IsEditg"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition Binding="{Binding IsEnabled}" Value="True" />
																		<Condition Binding="{Binding IsFocused}" Value="True" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsSelected)}" Value="true" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsReadOnly)}" Value="false" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsLocked)}" Value="false" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</MultiDataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>


												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="60,0,10,0"
														Text="ReadOnly"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition Binding="{Binding IsEnabled}" Value="True" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsReadOnly)}" Value="true" />
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsLocked)}" Value="false" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</MultiDataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>


												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="IsLocked"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<MultiDataTrigger>
																	<MultiDataTrigger.Conditions>
																		<Condition Binding="{Binding Path=(cs:VisualStates.IsLocked)}" Value="true" />
																	</MultiDataTrigger.Conditions>
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</MultiDataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>


											</StackPanel>


											<StackPanel Orientation="Horizontal">


												<!--
													basis
													NotSel = disabled
													Sel = enabled
													IsEditg = enabled + focus
													ReadOnly = checkbox
													Locked = checkbox
													
													CbxReadOnly
												-->

												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="Disabled"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<DataTrigger Binding="{Binding IsEnabled, Mode=OneWay}" Value="False">
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</DataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>


												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="Enabled"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<DataTrigger Binding="{Binding IsEnabled, Mode=OneWay}" Value="True">
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</DataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>

												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="selected"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<DataTrigger Binding="{Binding (cs:VisualStates.IsSelected)}" Value="True">
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</DataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>


												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="Focused"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<DataTrigger Binding="{Binding IsFocused, Mode=OneWay}" Value="True">
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</DataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>

												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="FocusIn"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<DataTrigger Binding="{Binding IsKeyboardFocusWithin, Mode=OneWay}" Value="True">
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</DataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>


												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="read only"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<DataTrigger Binding="{Binding (cs:VisualStates.IsReadOnly)}" Value="True">
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</DataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>


												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="Locked"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<DataTrigger Binding="{Binding (cs:VisualStates.IsLocked)}" Value="True">
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</DataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>

												<TextBlock Width="50"
														FontSize="11"
														HorizontalAlignment="Left"
														Margin="0,0,10,0"
														Text="Good-Bad"
														TextAlignment="Center"
														>
													<TextBlock.Style>
														<Style TargetType="TextBlock">
															<Setter Property="Background" Value="Transparent" />
															<Setter Property="Foreground" Value="White" />
															<Style.Triggers>
																<DataTrigger Binding="{Binding ElementName=win, Path=IsGoodOrBad}" Value="true">
																	<Setter Property="Foreground" Value="Black" />
																	<Setter Property="Background" Value="Lime" />
																</DataTrigger>
																<DataTrigger Binding="{Binding ElementName=win, Path=IsGoodOrBad}" Value="false">
																	<Setter Property="Foreground" Value="White" />
																	<Setter Property="Background" Value="Red" />
																</DataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>

											</StackPanel>
										</StackPanel>


										<ComboBox x:Name="CbxUnitSelect2"
												DropDownOpened="CbxUnitSelect2_DropDownOpened"
												ItemContainerStyle="{DynamicResource CsCbxItemContainerStyle}"
												SelectedIndex="0"
												VerticalAlignment="Bottom"
												cs:CsComboBoxAp.ComboBoxBdrRadius="{StaticResource CornerRadius.Sm}"
												cs:CsComboBoxAp.DropDownBdrBrush="{StaticResource Cbx.DropDown.Bg.IsSel}"
												cs:CsComboBoxAp.DropDownBdrRadius="4"
												cs:CsComboBoxAp.DropDownBdrThickness="4"
												cs:CsComboBoxAp.DropDownBrush="{StaticResource Cbx.DropDown.Bg.IsSel}"
												cs:CsComboBoxAp.DropDownMaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource self}}"
												cs:CsComboBoxAp.DropDownMinWidth="80.0"
												cs:VisualStates.BdrDisabled="{StaticResource Cbx.Bdr.Disabled}"
												cs:VisualStates.BdrIsEditing="{StaticResource Cbx.Bdr.IsEditg}"
												cs:VisualStates.BdrIsEditingMouseOver="{StaticResource Cbx.Bdr.IsEditg.MouseOver}"
												cs:VisualStates.BdrIsLocked="{StaticResource Cbx.Bdr.IsLocked}"
												cs:VisualStates.BdrIsReadOnly="{StaticResource Cbx.Bdr.IsReadOnly}"
												cs:VisualStates.BdrIsSel="{StaticResource Cbx.Bdr.IsSel}"
												cs:VisualStates.BdrNotEditingMouseOver="{StaticResource Cbx.Bdr.NotEditg.MouseOver}"
												cs:VisualStates.BdrNotSel="{StaticResource Cbx.Bdr.NotSel}"
												cs:VisualStates.BgDisabled="{StaticResource Cbx.Bg.Disabled}"
												cs:VisualStates.BgIsEditing="{StaticResource Cbx.Bg.IsEditg}"
												cs:VisualStates.BgIsEditingMouseOver="{StaticResource Cbx.Bg.IsEditg.MouseOver}"
												cs:VisualStates.BgIsLocked="{StaticResource Cbx.Bg.IsLocked}"
												cs:VisualStates.BgIsReadOnly="{StaticResource Cbx.Bg.IsReadOnly}"
												cs:VisualStates.BgIsSel="{StaticResource Cbx.Bg.IsSel}"
												cs:VisualStates.BgNotEditingMouseOver="{StaticResource Cbx.Bg.NotEditg.MouseOver}"
												cs:VisualStates.BgNotSel="{StaticResource Cbx.Bg.NotSel}"
												cs:VisualStates.FgDisabled="{StaticResource Cbx.Fg.Disabled}"
												cs:VisualStates.FgIsEditing="{StaticResource Cbx.Fg.IsEditg}"
												cs:VisualStates.FgIsEditingMouseOver="{StaticResource Cbx.Fg.IsEditg.MouseOver}"
												cs:VisualStates.FgIsLocked="{StaticResource Cbx.Fg.IsLocked}"
												cs:VisualStates.FgIsReadOnly="{StaticResource Cbx.Fg.IsReadOnly}"
												cs:VisualStates.FgIsSel="{StaticResource Cbx.Fg.IsSel}"
												cs:VisualStates.FgNotEditingMouseOver="{StaticResource Cbx.Fg.NotEditg.MouseOver}"
												cs:VisualStates.FgNotSel="{StaticResource Cbx.Fg.NotSel}"
												Style="{StaticResource Combobox1}"
												>

											<!--  FocusVisualStyle="{x:Null}"  -->
											<!--  IsEditable="False"  -->
											<!--  IsReadOnly="True"  -->
											<!--  IsSynchronizedWithCurrentItem="True"  -->
											<!--  Margin="0,5,0,0"  -->
											<!--  MaxDropDownHeight="120"  -->
											<!--  Padding="0,1,0,5"  -->


											<!-- <ComboBox.Style> -->
											<!-- 	<Style BasedOn="{StaticResource CtrlWithBdrTrigs.L4}" TargetType="ComboBox"> -->
											<!-- 		<Setter Property="Template" Value="{StaticResource CsComboBoxCt}" /> -->
											<!-- 	</Style> -->
											<!-- </ComboBox.Style> -->

											<ComboBox.Items>
												<ComboBoxItem>item 1</ComboBoxItem>
												<ComboBoxItem>item 2 this is a very wide item to test how a long item gets displayed and how to work with very wide items</ComboBoxItem>
												<ComboBoxItem>item 3</ComboBoxItem>
												<ComboBoxItem>item 4</ComboBoxItem>
												<ComboBoxItem>item 5</ComboBoxItem>
												<ComboBoxItem>item 6</ComboBoxItem>
											</ComboBox.Items>

										</ComboBox>

										<StackPanel Margin="0,5,0,5" Orientation="Vertical">
											<StackPanel Orientation="Horizontal">
												<Border Width="60"
														Background="{StaticResource Cbx.Bg.Disabled}"
														BorderBrush="{StaticResource Cbx.Bdr.Disabled}"
														BorderThickness="1"
														CornerRadius="{StaticResource CornerRadius.Std}"
														Margin="0,0,5,0"
														>
													<TextBlock Foreground="{StaticResource Cbx.Fg.Disabled}"
															Text="disabled"
															TextAlignment="Center"
															/>
												</Border>

												<Border Width="60"
														Background="{StaticResource Cbx.Bg.NotSel}"
														BorderBrush="{StaticResource Cbx.Bdr.NotSel}"
														BorderThickness="1"
														CornerRadius="{StaticResource CornerRadius.Std}"
														Margin="0,0,5,0"
														>
													<TextBlock Foreground="{StaticResource Cbx.Fg.NotSel}"
															Text="not sel"
															TextAlignment="Center"
															/>
												</Border>


												<Border Width="60"
														Background="{StaticResource Cbx.Bg.IsSel}"
														BorderBrush="{StaticResource Cbx.Bdr.IsSel}"
														BorderThickness="1"
														CornerRadius="{StaticResource CornerRadius.Std}"
														Margin="0,0,5,0"
														>
													<TextBlock Foreground="{StaticResource Cbx.Fg.IsSel}"
															Text="sel"
															TextAlignment="Center"
															/>
												</Border>


												<Border Width="65"
														Background="{StaticResource Cbx.Bg.IsEditg}"
														BorderBrush="{StaticResource Cbx.Bdr.IsEditg}"
														BorderThickness="1"
														CornerRadius="{StaticResource CornerRadius.Std}"
														Margin="0,0,5,0"
														>
													<TextBlock Foreground="{StaticResource Cbx.Fg.IsEditg}"
															Text="editing"
															TextAlignment="Center"
															/>
												</Border>

												<Border Width="60"
														Background="{StaticResource Cbx.Bg.IsReadOnly}"
														BorderBrush="{StaticResource Cbx.Bdr.IsReadOnly}"
														BorderThickness="1"
														CornerRadius="{StaticResource CornerRadius.Std}"
														Margin="0,0,5,0"
														>
													<TextBlock Foreground="{StaticResource Cbx.Fg.IsReadOnly}"
															Text="read only"
															TextAlignment="Center"
															/>
												</Border>


												<Border Width="60"
														Background="{StaticResource Cbx.Bg.IsLocked}"
														BorderBrush="{StaticResource Cbx.Bdr.IsLocked}"
														BorderThickness="1"
														CornerRadius="{StaticResource CornerRadius.Std}"
														Margin="0,0,5,0"
														>
													<TextBlock Foreground="{StaticResource Cbx.Fg.IsLocked}"
															Text="locked"
															TextAlignment="Center"
															/>
												</Border>


											</StackPanel>

											<StackPanel Margin="65,0,0,0" Orientation="Horizontal">

												<Border Width="125"
														Background="{StaticResource Cbx.Bg.NotEditg.MouseOver}"
														BorderBrush="{StaticResource Cbx.Bdr.NotEditg.MouseOver}"
														BorderThickness="1"
														CornerRadius="{StaticResource CornerRadius.Std}"
														Margin="0,0,5,0"
														>
													<TextBlock Foreground="{StaticResource Cbx.Fg.NotEditg.MouseOver}"
															Text="mo_not_ed"
															TextAlignment="Center"
															/>
												</Border>


												<Border Width="65"
														Background="{StaticResource Cbx.Bg.IsEditg.MouseOver}"
														BorderBrush="{StaticResource Cbx.Bdr.IsEditg.MouseOver}"
														BorderThickness="1"
														CornerRadius="{StaticResource CornerRadius.Std}"
														Margin="0,0,5,0"
														>
													<TextBlock Foreground="{StaticResource Cbx.Fg.IsEditg.MouseOver}"
															Text="mo_is_ed"
															TextAlignment="Center"
															/>
												</Border>
											</StackPanel>


										</StackPanel>

									</StackPanel>

								</StackPanel>

							</Border>

						</StackPanel>

					</Border>

				</StackPanel>





			</DataTemplate>

			<!--#endregion-->




			<!--#region > properties and events test-->

			<DataTemplate x:Key="DtTrigsTest">

				<!-- to have
				group -> (triggers: enable / disable) -
					sub-title (triggers: enable / disable)
					value entry title (triggers: enable / disable)
					value entry with clear (triggers: enable / disable / editing / value good / value bad)
					clear button (triggers: enable / disable / editing / value good / value bad)
					value entry without clear (triggers: enable / disable / editing / value good / value bad)
				<- group
				-->
				<StackPanel Orientation="Vertical">

					<StackPanel Margin="10,0,0,5" Orientation="Horizontal">

						<CheckBox x:Name="CbxEnDisable"
								Content="Enable"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding ElementName=SpAddUnit, Path=IsEnabled, Mode=TwoWay}"
								/>


						<CheckBox x:Name="CbxUnitSelected"
								Content="Selected"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitSelected, ElementName=win, FallbackValue='false'}"
								Margin="10,0,0,0"
								/>

						<CheckBox x:Name="CbxReadOnly"
								Content="ReadOnly"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitReadOnly, ElementName=win, FallbackValue='false'}"
								Margin="10,0,0,0"
								/>

						<CheckBox x:Name="CbxLocked"
								Content="Locked"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding AddUnitIsLocked, ElementName=win, FallbackValue='false'}"
								Margin="10,0,0,0"
								/>


						<CheckBox x:Name="CbIsGoodOrBad"
								Content="Good or Bad"
								FontSize="11"
								Foreground="White"
								IsChecked="{Binding IsGoodOrBad, ElementName=win, FallbackValue='false'}"
								IsThreeState="True"
								Margin="10,0,0,0"
								/>


					</StackPanel>

					<Border x:Name="BdrAddUnit"
							BorderThickness="0"
							CornerRadius="{StaticResource CornerRadius.Lg}"
							HorizontalAlignment="Stretch"
							IsEnabled="True"
							Padding="12"
							VerticalAlignment="Top"
							cs:VisualStates.BgDisabled="{StaticResource AddUnit.Gbdr.NotSel}"
							cs:VisualStates.BgIsSel="{StaticResource AddUnit.Gbdr.IsSel}"
							Style="{StaticResource BdrIsEnabledTrigger}"
							>

						<StackPanel x:Name="SpAddUnit" Orientation="Vertical">

							<TextBlock Foreground="white" Text="study block but is out of date" />

							<Border x:Name="BdrAddUnitSubTitle"
									CornerRadius="{StaticResource CornerRadius.Std}"
									Visibility="Visible"
									cs:VisualStates.BgDisabled="{StaticResource AddUnit.SubTitle.Bg.Disabled}"
									cs:VisualStates.BgIsSel="{StaticResource AddUnit.SubTitle.Bg.IsSel}"
									cs:VisualStates.BgNotSel="{StaticResource AddUnit.SubTitle.Bg.NotSel}"
									Style="{StaticResource BdrTrigs.L1}"
									>
								<StackPanel x:Name="SpAddUnitSubTitle" Orientation="Vertical">


									<Border x:Name="BdrGetStyleName2"
											Background="{StaticResource ValEntry.Bg.IsSel}"
											BorderBrush="White"
											BorderThickness="1"
											CornerRadius="{StaticResource CornerRadius.Std}"
											Margin="5"
											Padding="2"
											Style="{StaticResource BdrTrigs.L2}"
											>
										<DockPanel x:Name="DpGetStyleName" HorizontalAlignment="Stretch">

											<Button x:Name="BtnClrStyleName"
													Content="&#xE106;"
													DockPanel.Dock="Right"
													FontFamily="Segoe UI Symbol"
													Foreground="{StaticResource CanEdit.Fg.IsSel}"
													HorizontalAlignment="Stretch"
													>
												<Button.Style>
													<Style BasedOn="{StaticResource BtnCanEditClear}" TargetType="Button">
														<Setter Property="Visibility" Value="Visible">
														</Setter>
														<Style.Triggers>
															<DataTrigger Binding="{Binding ElementName=win, Path=IsEditing}" Value="True">
																<Setter Property="Visibility" Value="Visible" />
															</DataTrigger>
														</Style.Triggers>

													</Style>
												</Button.Style>
											</Button>

											<TextBox x:Name="TbxGetStyleName2"
													DockPanel.Dock="Left"
													Background="Transparent"
													BorderThickness="0"
													Foreground="{StaticResource Fg.IsSel}"
													HorizontalAlignment="Stretch"
													TabIndex="2"
													Text="Sample Text"
													Style="{StaticResource TbxTrigs.L2.Old}"
													/>



										</DockPanel>

									</Border>




									<StackPanel DataContext="{Binding ElementName=TbxGetStyleName2}"
											Margin="10,0,0,0"
											Orientation="Vertical"
											>

										<StackPanel Margin="0,0,0,0" Orientation="Horizontal">

											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="Enabled"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsEnabled, Mode=OneWay}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="MouseOver"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsMouseOver, Mode=OneWay}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="MouseDirectlyOver"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsMouseDirectlyOver, Mode=OneWay}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="MouseCaptued"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsMouseCaptured}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="MouseCapWithin"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsMouseCaptureWithin, Mode=OneWay}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>



										</StackPanel>

										<StackPanel Margin="0,0,0,0" Orientation="Horizontal">

											<TextBlock Width="50"
													FontSize="11"
													Foreground="DarkOrange"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="textblock| "
													/>

											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="SelectionActive"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsSelectionActive, Mode=OneWay}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="Focus"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsFocused}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="KbFocus"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsKeyboardFocused}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="FocusWithin"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsKeyboardFocusWithin}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<!-- -->
											<!-- <TextBlock FontSize="11" -->
											<!-- 		HorizontalAlignment="Left" -->
											<!-- 		Margin="0,0,10,0" -->
											<!-- 		Text="FocusWithin" -->
											<!-- 		> -->
											<!-- 	<TextBlock.Style> -->
											<!-- 		<Style TargetType="TextBlock"> -->
											<!-- 			<Setter Property="Background" Value="Transparent" /> -->
											<!-- 			<Setter Property="Foreground" Value="White" /> -->
											<!-- 			<Style.Triggers> -->
											<!-- 				<DataTrigger Binding="{Binding FocusManager.IsFocusScope}" Value="True"> -->
											<!-- 					<Setter Property="Foreground" Value="Black" /> -->
											<!-- 					<Setter Property="Background" Value="Lime" /> -->
											<!-- 				</DataTrigger> -->
											<!-- 			</Style.Triggers> -->
											<!-- 		</Style> -->
											<!-- 	</TextBlock.Style> -->
											<!-- </TextBlock> -->

										</StackPanel>

										<StackPanel DataContext="{Binding ElementName=BdrGetStyleName2}"
												Margin="0,0,0,0"
												Orientation="Horizontal"
												>

											<TextBlock Width="50"
													FontSize="11"
													Foreground="DarkOrange"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="border| "
													/>

											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="SelectionActive"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsSelectionActive, Mode=OneWay}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="Focus"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsFocused}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="KbFocus"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsKeyboardFocused}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="FocusWithin"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsKeyboardFocusWithin}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<!-- <TextBlock FontSize="11" -->
											<!-- 		HorizontalAlignment="Left" -->
											<!-- 		Margin="0,0,10,0" -->
											<!-- 		Text="FocusWithin" -->
											<!-- 		> -->
											<!-- 	<TextBlock.Style> -->
											<!-- 		<Style TargetType="TextBlock"> -->
											<!-- 			<Setter Property="Background" Value="Transparent" /> -->
											<!-- 			<Setter Property="Foreground" Value="White" /> -->
											<!-- 			<Style.Triggers> -->
											<!-- 				<DataTrigger Binding="{Binding FocusManager.IsFocusScope}" Value="True"> -->
											<!-- 					<Setter Property="Foreground" Value="Black" /> -->
											<!-- 					<Setter Property="Background" Value="Lime" /> -->
											<!-- 				</DataTrigger> -->
											<!-- 			</Style.Triggers> -->
											<!-- 		</Style> -->
											<!-- 	</TextBlock.Style> -->
											<!-- </TextBlock> -->

										</StackPanel>


									</StackPanel>

									<StackPanel DataContext="{Binding ElementName=TbxGetStyleName2}"
											Margin="5,5,0,5"
											Orientation="Vertical"
											>
										<StackPanel Orientation="Horizontal">

											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="Disabled"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding IsEnabled}" Value="False" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="NotSel"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding IsEnabled}" Value="True" />
																	<Condition Binding="{Binding IsFocused}" Value="False" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitSelected}" Value="False" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitReadOnly}" Value="false" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitIsLocked}" Value="false" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="IsSel"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding IsEnabled}" Value="True" />
																	<Condition Binding="{Binding IsFocused}" Value="False" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitSelected}" Value="true" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitReadOnly}" Value="false" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitIsLocked}" Value="false" />

																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="IsEditg"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding IsEnabled}" Value="True" />
																	<Condition Binding="{Binding IsFocused}" Value="True" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitSelected}" Value="true" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitReadOnly}" Value="false" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitIsLocked}" Value="false" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="ReadOnly"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding IsEnabled}" Value="True" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitReadOnly}" Value="true" />
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitIsLocked}" Value="false" />

																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="IsLocked"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding ElementName=win, Path=AddUnitIsLocked}" Value="true" />
																</MultiDataTrigger.Conditions>
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

										</StackPanel>

										<StackPanel Orientation="Horizontal">

											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="disabled"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsEnabled, Mode=OneWay}" Value="false">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="enabled"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsEnabled, Mode=OneWay}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>



											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="selected"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding ElementName=win, Path=AddUnitSelected}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="focused"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsFocused, Mode=OneWay}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="read only"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding ElementName=win, Path=AddUnitReadOnly}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>


											<TextBlock Width="50"
													FontSize="11"
													HorizontalAlignment="Left"
													Margin="0,0,10,0"
													Text="locked"
													TextAlignment="Center"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Setter Property="Background" Value="Transparent" />
														<Setter Property="Foreground" Value="White" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding ElementName=win, Path=AddUnitIsLocked}" Value="True">
																<Setter Property="Foreground" Value="Black" />
																<Setter Property="Background" Value="Lime" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>

										</StackPanel>


									</StackPanel>

								</StackPanel>

							</Border>

						</StackPanel>

					</Border>

				</StackPanel>





			</DataTemplate>

			<!--#endregion-->

			<!--#region > base controls-->

			<DataTemplate x:Key="DtControls">

				<!--
					to have
					button: standard  (standard triggers / done)
					button: delete (enabled / disabled)
				-->

			</DataTemplate>

			<!--#endregion-->

			<!--#endregion-->




		</ResourceDictionary>

	</Window.Resources>

	<!--#region > prime grid-->

	<Grid x:Name="PrimeGrid" Margin="10">

		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="{StaticResource C1}" />
			<ColumnDefinition Width="{StaticResource C2}" />
		</Grid.ColumnDefinitions>

		<Grid.RowDefinitions>
			<RowDefinition />

			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>

		<!--#region > dialog controls-->

		<StackPanel x:Name="DialogControls"
				DockPanel.Dock="Bottom"
				Grid.Column="1"
				Grid.Row="1"
				Height="41"
				HorizontalAlignment="right"
				Orientation="Horizontal"
				VerticalAlignment="Center"
				>

			<Button Content="Cancel"
					FontSize="{StaticResource FontSize.Normal}"
					HorizontalAlignment="Right"
					Margin="5,10,0,0"
					MinHeight="28"
					MinWidth="90"
					Padding="5"
					Style="{StaticResource Button.Normal.Style}"
					/>

			<Button Content="Done"
					FontSize="{StaticResource FontSize.Normal}"
					HorizontalAlignment="Right"
					Margin="5,10,0,0"
					MinHeight="28"
					MinWidth="90"
					Padding="5"
					Style="{StaticResource Button.Normal.Style}"
					Click="BtnDone_OnClick"
					/>

		</StackPanel>

		<!--#endregion-->

		<!--#region > column left-->

		<DockPanel x:Name="ColumnLeft"
				Grid.Column="0"
				Grid.Row="0"
				Margin="0,0,5,0"
				>

			<Border x:Name="Header_1L"
					DockPanel.Dock="Top"
					Background="DimGray"
					BorderThickness="0"
					CornerRadius="{StaticResource CornerRadius.Std}"
					Margin="0,0,0,3"
					VerticalAlignment="Top"
					>
				<TextBlock FontSize="{StaticResource FontSize.Large}"
						Padding="5,0,0,3"
						Text="Header 1"
						/>

			</Border>

			<Border DockPanel.Dock="Top"
					HorizontalAlignment="Stretch"
					VerticalAlignment="Stretch"
					>

				<DockPanel DockPanel.Dock="Top" VerticalAlignment="Stretch">
					<StackPanel DockPanel.Dock="Top">
						<!--#region > study controls-->

						<CheckBox x:Name="Cbx_Selected"
								Content="Is Selected?"
								Height="34"
								FontSize="24"
								HorizontalAlignment="Left"
								IsChecked="{Binding IsSelected}"
								cs:CsCheckBoxAp.CheckBoxBoxMargin="0,4,4,4"
								cs:CsCheckBoxAp.CheckBoxCheckMargin="-2,0,0,0"
								d:IsChecked="True"
								d:IsEnabled="false"
								Style="{StaticResource Ckbx.Lv1.Style}"
								/>

						<CheckBox x:Name="Cbx_Editing"
								Content="Is Editing?"
								Height="34"
								FontSize="24"
								HorizontalAlignment="Left"
								IsChecked="{Binding IsEditing}"
								cs:CsCheckBoxAp.CheckBoxBoxMargin="0,4,4,4"
								cs:CsCheckBoxAp.CheckBoxCheckMargin="0"
								Style="{StaticResource Ckbx.Lv1.Style}"
								/>

						<CheckBox x:Name="Cbx_ReadOnly"
								Content="Is IsReadOnly?"
								Height="34"
								FontSize="24"
								HorizontalAlignment="Left"
								IsChecked="{Binding IsReadOnly}"
								cs:CsCheckBoxAp.CheckBoxBoxMargin="0,4,4,4"
								cs:CsCheckBoxAp.CheckBoxCheckMargin="0"
								Style="{StaticResource Ckbx.Lv1.Style}"
								/>

						<CheckBox x:Name="Cbx_Locked"
								Content="Is Locked?"
								Height="34"
								FontSize="24"
								HorizontalAlignment="Left"
								IsChecked="{Binding IsLocked}"
								cs:CsCheckBoxAp.CheckBoxBoxMargin="0,4,4,4"
								cs:CsCheckBoxAp.CheckBoxCheckMargin="0"
								Style="{StaticResource Ckbx.Lv1.Style}"
								/>

						<Button x:Name="BtnChangeSkin"
								Content="Change Skin"
								Height="34"
								Width="Auto"
								FontSize="24"
								HorizontalAlignment="Left"
								Margin="11,15,0,0"
								Click="BtnChangeSkin_OnClick"
								/>

						<Border x:Name="SkinBorder"
								Height="100"
								Width="100"
								HorizontalAlignment="Left"
								Margin="10,20,0,0"
								Style="{StaticResource TestBorderStyle}"
								>
							<Rectangle x:Name="SkinRectangle" Fill="{StaticResource TestBackground}" />

						</Border>
						<!--#endregion-->
					</StackPanel>

					<Expander x:Name="WindowExpander"
							IsExpanded="{Binding ExpandWindow, FallbackValue='true'}"
							Margin="0,30,0,0"
							VerticalAlignment="Stretch"
							Style="{DynamicResource ExpanderStyleStealth}"
							>
						<DockPanel Margin="10,0,0,0" VerticalAlignment="Stretch">

							<ContentControl DockPanel.Dock="Top"
									ContentTemplate="{StaticResource DtUnitSettings}"
									Margin="0,5,0,0"
									/>

							<ContentControl DockPanel.Dock="Top"
									ContentTemplate="{StaticResource DtAddUnit}"
									Margin="0,30,0,0"
									/>

							<ContentControl DockPanel.Dock="Top"
									ContentTemplate="{StaticResource DtControls}"
									Margin="0,30,0,0"
									/>

							<ContentControl DockPanel.Dock="Bottom"
									ContentTemplate="{StaticResource DtTrigsTest}"
									Margin="0,30,0,0"
									VerticalAlignment="Bottom"
									/>

						</DockPanel>
					</Expander>

				</DockPanel>


			</Border>

		</DockPanel>

		<!--#endregion-->

		<!--#region > column right-->

		<DockPanel x:Name="ColumnRight"
				Grid.Column="1"
				Grid.Row="0"
				Margin="0,0,0,0"
				>

			<Border x:Name="Header_1R"
					DockPanel.Dock="Top"
					Background="DimGray"
					BorderThickness="0"
					CornerRadius="{DynamicResource CornerRadius.Std}"
					Margin="0,0,0,3"
					VerticalAlignment="Top"
					>
				<TextBlock FontSize="{DynamicResource FontSize.Large}"
						Padding="5,0,0,3"
						Text="Header 1"
						/>
			</Border>

			<StackPanel x:Name="ItemSamples" Orientation="Vertical">

				<TextBlock x:Name="Header_2R"
						Background="{StaticResource Header.Bg.IsSel}"
						Foreground="Black"
						Text="This is header text"
						Style="{StaticResource TblkSamples}"
						/>

				<ContentControl x:Name="Row1" ContentTemplate="{StaticResource Sample}" />

				<ContentControl x:Name="Row5" Content="{StaticResource NotSelectedNotLockedNaEditing}" />

				<ContentControl x:Name="Row3" Content="{StaticResource IsSelectedNotLockedNotEditing}" />

				<ContentControl x:Name="Row4" Content="{StaticResource IsSelectedNotLockedIsEditing}" />

				<ContentControl x:Name="Row6" Content="{StaticResource IsSelectedNotLockedReadOnly}" />

				<ContentControl x:Name="Row7" Content="{StaticResource IsSelectedIsLockedNaEditing}" />
				<Border BorderBrush="White"
						BorderThickness="0"
						CornerRadius="6"
						HorizontalAlignment="Center"
						Padding="10"
						>
					<ContentControl x:Name="Row8"
							Content="{StaticResource HelpPopup}"
							Width="250"
							cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
							cs:VisualStates.TitleText="Action1 Help"
							>
						<!--  cs:TestVisualStates.MainContent="This is the main content and help information for action 1 &#013;&#x25CF;&#009;first item&#013;this is the first item of help"  -->
					</ContentControl>
				</Border>

				<ContentControl x:Name="Base"
						ContentTemplate="{StaticResource Base}"
						Margin="0,30,0,0"
						/>

			</StackPanel>

		</DockPanel>

		<!--#endregion-->



	</Grid>

	<!--#endregion-->

</Window>
