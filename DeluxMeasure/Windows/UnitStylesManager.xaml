<Window x:Name="WinUnitStyle"
		x:Class="DeluxMeasure.Windows.UnitStylesManager"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:local="clr-namespace:DeluxMeasure.Windows"
		xmlns:custom="clr-namespace:DeluxMeasure.Windows.Support"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:support="clr-namespace:DeluxMeasure.Windows.Support"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		xmlns:unitsUtil="clr-namespace:DeluxMeasure.UnitsUtil"
		Title="Unit Styles Manager"
		Height="740"
		Width="960"
		Closing="WinUnitStyle_Closing"
		Loaded="WinUnitStyle_Loaded"
		Background="{DynamicResource Normal.Window.Background}"
		DataContext="{Binding RelativeSource={RelativeSource Self}}"
		Foreground="White"
		MinWidth="960"
		ResizeMode="NoResize"
		mc:Ignorable="d"
		>

	<Window.Resources>

		<ResourceDictionary>

			<!--#region > resources and styles-->

			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="ResourceFiles/XamlResources/MasterColorList.xaml" />
				<ResourceDictionary Source="ResourceFiles/XamlResources/VisualStates.xaml" />
				<ResourceDictionary Source="Support/CsScrollBar.xaml" />
				<ResourceDictionary Source="Support/CsScrollViewer.xaml" />
				<ResourceDictionary Source="Support/CsComboBox.xaml" />
				<ResourceDictionary Source="ResourceFiles/SVG/IconDelete.xaml" />
				<ResourceDictionary Source="ResourceFiles/SVG/padlock.xaml" />

			</ResourceDictionary.MergedDictionaries>

			<support:PassThroughConverter x:Key="PassThroughConverter" />


			<sys:Double x:Key="FontSize.XLarge">18</sys:Double>
			<!--  header size  -->
			<sys:Double x:Key="FontSize.Large">16</sys:Double>
			<!--  typical font size  -->
			<sys:Double x:Key="FontSize.Normal">14</sys:Double>

			<sys:Double x:Key="FontSize.Smaller">13</sys:Double>

			<sys:Double x:Key="FontSize.Small">12</sys:Double>

			<sys:Double x:Key="FontSize.XSmall">10</sys:Double>

			<sys:Double x:Key="DropDown.Width">180.0</sys:Double>



			<GridLength x:Key="Main.Row.Height">94*</GridLength>
			<GridLength x:Key="Function.Row.Height">10*</GridLength>
			<GridLength x:Key="Control.Row.Height">7*</GridLength>

			<GridLength x:Key="Project.Unit.Width">300*</GridLength>
			<GridLength x:Key="Style.Chart.Width">600*</GridLength>
			<!--  total size = 15px + 200 + 617 + 8 == 840  -->
			<!--  project unit column  -->

			<GridLength x:Key="Style.Chart.Cnum">70</GridLength>
			<GridLength x:Key="Style.Chart.Cico">70</GridLength>
			<GridLength x:Key="Style.Chart.Cdata">20*</GridLength>
			<GridLength x:Key="Style.Chart.Cex">50*</GridLength>
			<GridLength x:Key="Style.Chart.Csho">118</GridLength>

			<sys:Double x:Key="R1">24</sys:Double>

			<CornerRadius x:Key="Normal.CornerRadius"
					BottomLeft="4"
					BottomRight="4"
					TopLeft="4"
					TopRight="4"
					/>

			<Thickness x:Key="Lv1.Padding.Nml">8,2,5,4</Thickness>

			<SolidColorBrush x:Key="Editbox.Clear.X.Disabled" Color="{StaticResource Gray.550}" />
			<SolidColorBrush x:Key="Editbox.Clear.X.Enabled" Color="{StaticResource Gray.800}" />

			<SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA" />
			<SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da" />
			<SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA" />
			<SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA" />
			<SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#CFDADADA" />

			<SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070" />
			<SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121" />
			<SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF" />
			<SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF" />
			<SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121" />
			<SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF" />
			<SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD" />
			<SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121" />
			<SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6" />
			<SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC" />
			<SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070" />


			<SolidColorBrush x:Key="Header.Background" Color="{StaticResource True.Green}" />
			<SolidColorBrush x:Key="Desc.Background" Color="{StaticResource Light.Blue.550}" />
			<SolidColorBrush x:Key="Value.Background" Color="{StaticResource Light.Blue.300}" />
			<SolidColorBrush x:Key="Value.Bkg.Selected" Color="{StaticResource Deep.Purple.450}" />

			<SolidColorBrush x:Key="Lv.Item.Panel.Bkg.Sel" Color="{StaticResource Deep.Purple.300}" />
			<SolidColorBrush x:Key="Lv.Item.Panel.Bkg.Nml" Color="{StaticResource Blue.200}" />
			<SolidColorBrush x:Key="Lv.Item.CkBx.Bkg.Nml" Color="{StaticResource Gray.600}" />


			<SolidColorBrush x:Key="Lv.Item.Control.Bkg2" Color="{StaticResource Cool.Blue.450}" />
			<SolidColorBrush x:Key="Lv.Item.Control.Bkg2.Unselected" Color="{StaticResource Blue.300}" />

			<SolidColorBrush x:Key="Lv.Item.Bkg2" Color="{StaticResource Cool.Blue.350}" />
			<SolidColorBrush x:Key="Lv.Item.Bkg2.Unselected" Color="{StaticResource Blue.220}" />

			<SolidColorBrush x:Key="Lv.Item.SubHdr.Bkg2" Color="{StaticResource Teal.500}" />
			<SolidColorBrush x:Key="Lv.Item.SubHdr.Bkg2.UnSelected" Color="{StaticResource Teal.250}" />

			<SolidColorBrush x:Key="Lv.Important" Color="{StaticResource Deep.Orange.400}" />
			<SolidColorBrush x:Key="Lv.Important.UnSelected" Color="{StaticResource Deep.Orange.100}" />

			<SolidColorBrush x:Key="Lv.Item.Fg" Color="White" />
			<SolidColorBrush x:Key="Lv.Item.Fg.UnSelected" Color="{StaticResource Gray.650}" />

			<SolidColorBrush x:Key="Icon.Bkg" Color="{StaticResource Gray.850}" />
			<SolidColorBrush x:Key="Icon.Bkg.UnSelected" Color="{StaticResource Gray.450}" />

			<!--#region combo box style info-->

			<sys:Double x:Key="ConditionFontSize">12</sys:Double>
			<sys:Double x:Key="BarSizeOutline">12</sys:Double>
			<sys:Double x:Key="TrackWidth">4</sys:Double>
			<sys:Double x:Key="RepeatButtonLength">10</sys:Double>
			<sys:Double x:Key="RepeatButtonIconLength">6</sys:Double>
			<sys:Double x:Key="RepeatButtonIconGirth">6</sys:Double>

			<Thickness x:Key="IconMarginTop">0, 0, 0, 0</Thickness>
			<Thickness x:Key="IconMarginBottom">0, 0, 0, 0</Thickness>
			<Thickness x:Key="IconMarginLeft">0, 0, 0, 0</Thickness>
			<Thickness x:Key="IconMarginRight">0, 0, 0, 0</Thickness>

			<Color x:Key="DisabledForegroundColor">#FF888888</Color>

			<SolidColorBrush x:Key="ComboBox.MouseOver" Color="DeepSkyBlue" />
			<SolidColorBrush x:Key="ComboBox.NotEnabled" Color="RoyalBlue" />
			<SolidColorBrush x:Key="ComboBox.DropDown" Color="CornflowerBlue" />

			<SolidColorBrush x:Key="ComboBox.ScrollBarBkg" Color="#222222" />

			<SolidColorBrush x:Key="ComboBox.Text.Normal" Color="{DynamicResource Gray.950}" />
			<SolidColorBrush x:Key="ComboBox.Text.Disabled" Color="{DynamicResource Gray.600}" />
			<SolidColorBrush x:Key="ComboBox.Subject.Background.Normal" Color="{DynamicResource Blue.450}" />
			<SolidColorBrush x:Key="ComboBox.Background.Normal" Color="{DynamicResource Blue.450}" />
			<!--    -->
			<!-- <SolidColorBrush x:Key="ComboBox.Subject.Background.MouseOver" Color="{DynamicResource Blue.600}" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.Subject.Background.Disabled" Color="{DynamicResource Blue.300}" /> -->
			<!-- <SolidColorBrush x:Key="ComboBox.ListItem.Background.Normal" Color="{DynamicResource Blue.400}" /> -->

			<SolidColorBrush x:Key="ComboBox.Subject.Background.MouseOver" Color="{StaticResource Teal.400}" />
			<SolidColorBrush x:Key="ComboBox.Subject.Background.Disabled" Color="{StaticResource Teal.300}" />
			<SolidColorBrush x:Key="ComboBox.ListItem.Background.Normal" Color="{StaticResource Teal.600}" />

			<!--#endregion-->


			<!--#region > TBLK styles-->


			<Style x:Key="Tblk.Base"
					TargetType="TextBlock"
					>
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="TextAlignment" Value="Left" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="HorizontalAlignment" Value="Left" />
			</Style>

			<Style x:Key="Tblk.Desc"
					BasedOn="{StaticResource Tblk.Base}"
					TargetType="TextBlock"
					>
				<Setter Property="Padding" Value="8,2,9,4" />
				<Setter Property="HorizontalAlignment" Value="Center" />
				<Setter Property="Background" Value="Transparent" />
			</Style>


			<Style x:Key="Tblk.Value"
					BasedOn="{StaticResource Tblk.Base}"
					TargetType="TextBlock"
					>

				<Setter Property="IsEnabled" Value="True" />
				<Setter Property="Padding" Value="8,2,21,4" />
				<Setter Property="TextAlignment" Value="Center" />
				<Setter Property="Background" Value="Transparent" />
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Foreground" Value="DarkGray" />
					</Trigger>
				</Style.Triggers>
			</Style>


			<Style x:Key="Tblk.Lv1.StyleB"
					BasedOn="{StaticResource Tblk.Base}"
					TargetType="TextBlock"
					>
				<Setter Property="Padding" Value="{StaticResource Lv1.Padding.Nml}" />
				<Setter Property="Foreground" Value="{StaticResource Lv.Item.Fg.UnSelected}" />
				<Setter Property="TextWrapping" Value="Wrap" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True">
						<Setter Property="Foreground" Value="{StaticResource Lv.Item.Fg}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<!--
				refer  to the surrounding border
				for foreground setting
			-->
			<Style x:Key="Tblk.Lv1.StyleA"
					BasedOn="{StaticResource Tblk.Base}"
					TargetType="TextBlock"
					>
				<Setter Property="Padding" Value="{StaticResource Lv1.Padding.Nml}" />

				<Setter Property="TextWrapping" Value="Wrap" />
				<!-- <Style.Triggers> -->
				<!-- 	<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True"> -->
				<!-- 		<Setter Property="Foreground" Value="{StaticResource Lv.Item.Fg}" /> -->
				<!-- 	</DataTrigger> -->
				<!-- </Style.Triggers> -->
			</Style>

			<!--#endregion-->

			<Style x:Key="StkPnl"
					TargetType="StackPanel"
					>
				<Setter Property="VerticalAlignment" Value="Top" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="Orientation" Value="Horizontal" />
				<Setter Property="Margin" Value="0,0,12,5" />
			</Style>

			<!--#region > Bdr styles-->

			<Style x:Key="Bdr.Base"
					TargetType="Border"
					>
				<Setter Property="CornerRadius" Value="{StaticResource Normal.CornerRadius}" />
				<Setter Property="BorderThickness" Value="0" />
			</Style>

			<Style x:Key="Bdr.Value.Entry"
					BasedOn="{StaticResource Bdr.Base}"
					TargetType="Border"
					>
				<Setter Property="Background">
					<Setter.Value>
						<SolidColorBrush Color="{StaticResource Gray.300}" />
					</Setter.Value>
				</Setter>
				<Setter Property="BorderBrush">
					<Setter.Value>
						<SolidColorBrush Color="{StaticResource Gray.450}" />
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="BorderBrush">
							<Setter.Value>
								<SolidColorBrush Color="{StaticResource Light.Blue.500}" />
							</Setter.Value>
						</Setter>
						<Setter Property="Background">
							<Setter.Value>
								<SolidColorBrush Color="{StaticResource Gray.200}" />
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Bdr.Hdr.Prime"
					BasedOn="{StaticResource Bdr.Base}"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{StaticResource Header.Prime.Bkg.Normal}" />
			</Style>


			<Style x:Key="Bdr.Proj.Units.Title"
					BasedOn="{StaticResource Bdr.Base}"
					TargetType="Border"
					>
				<Setter Property="CornerRadius" Value="4,0,0,4" />
				<Setter Property="Background" Value="{StaticResource Desc.Background}" />
			</Style>

			<Style x:Key="Bdr.Proj.Units.Value"
					BasedOn="{StaticResource Bdr.Base}"
					TargetType="Border"
					>
				<Setter Property="CornerRadius" Value="0,4,4,0" />
				<Setter Property="MinWidth" Value="30" />
				<Setter Property="Background" Value="{StaticResource Value.Background}" />
			</Style>

			<Style x:Key="Bdr.Proj.Units.Value.Editable"
					BasedOn="{StaticResource Bdr.Base}"
					TargetType="Border"
					>
				<Setter Property="CornerRadius" Value="0,4,4,0" />
				<Setter Property="MinWidth" Value="30" />
				<Setter Property="Background" Value="{StaticResource Value.Background}" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding ElementName=WinUnitStyle, Path=CanEditStyle}" Value="True">
						<Setter Property="Background">
							<Setter.Value>
								<SolidColorBrush Color="{StaticResource Teal.600}">
								</SolidColorBrush>
							</Setter.Value>
						</Setter>
					</DataTrigger>
				</Style.Triggers>
			</Style>




			<Style x:Key="Bdr.Lv1"
					BasedOn="{StaticResource Bdr.Base}"
					TargetType="Border"
					>
				<Setter Property="Margin" Value="4,4,0,0" />

			</Style>

			<Style x:Key="Bdr.Lv1.Prime.Item"
					BasedOn="{StaticResource Bdr.Lv1}"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{StaticResource Lv.Item.Bkg2.Unselected}" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="true">
						<Setter Property="Background" Value="{StaticResource Lv.Item.Bkg2}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Bdr.Lv1.Icon.Item"
					BasedOn="{StaticResource Bdr.Lv1}"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{StaticResource Icon.Bkg.UnSelected}" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="true">
						<Setter Property="Background" Value="{StaticResource Icon.Bkg}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Bdr.Lv1.2ndry.Item"
					BasedOn="{StaticResource Bdr.Lv1}"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{StaticResource Lv.Item.Bkg2.Unselected}" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True">
						<Setter Property="Background" Value="{StaticResource Lv.Item.Bkg2}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="Bdr.Lv1.Sub.HdrB"
					BasedOn="{StaticResource Bdr.Lv1}"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{StaticResource Lv.Item.SubHdr.Bkg2.UnSelected}" />
				<!-- <Style.Triggers> -->
				<!-- 	<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="true"> -->
				<!-- 		<Setter Property="Background" Value="{StaticResource Lv.Item.SubHdr.Bkg2}" /> -->
				<!-- 	</DataTrigger> -->
				<!-- </Style.Triggers> -->
			</Style>


			<!--
				cases:
				
				locked / selected
				border: dk teal | text: unselected
				
				locked / not selected
				border: dk teal 2 | text: unselected
				
				not selected / editable OR selected / not editable:
				border: dk teal 2 | text unselected
				
				selected / editable
				border: dk teal | text selected
			-->
			<Style x:Key="Bdr.Lv1.Sub.HdrA"
					BasedOn="{StaticResource Bdr.Lv1}"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{StaticResource Lv.Item.SubHdr.Bkg2.UnSelected}" />
				<Setter Property="TextBlock.Foreground" Value="{StaticResource Lv.Item.Fg.UnSelected}" />
				<Setter Property="IsEnabled" Value="False" />
				<!-- <Setter Property="DataContext"> -->
				<!-- 	<Setter.Value> -->
				<!-- 		<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}" Path="(unitsUtil:UnitsDataR.Ustyle)"></Binding> -->
				<!-- 	</Setter.Value> -->
				<!-- </Setter> -->
				<Style.Triggers>

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="true" />
							<Condition Binding="{Binding Path=(unitsUtil:UnitsDataR.Ustyle).IsLocked}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{StaticResource Lv.Item.SubHdr.Bkg2}" />
						<Setter Property="TextBlock.Foreground" Value="White" />
						<Setter Property="IsEnabled" Value="True" />
					</MultiDataTrigger>

					<DataTrigger Binding="{Binding Path=(unitsUtil:UnitsDataR.Ustyle).IsLocked}" Value="true">
						<Setter Property="TextBlock.Foreground" Value="{StaticResource Lv.Item.Fg.UnSelected}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>





			<Style x:Key="Bdr.Lv1.ChkBx"
					BasedOn="{StaticResource Bdr.Base}"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{StaticResource Lv.Item.Control.Bkg2.Unselected}" />
				<Setter Property="Margin" Value="1,3,2,0" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="true">
						<Setter Property="Background" Value="{StaticResource Lv.Item.Control.Bkg2}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<!--#endregion-->

			<Style x:Key="OptionMarkFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle Margin="14,0,0,0"
									SnapsToDevicePixels="true"
									Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
									StrokeDashArray="1 2"
									StrokeThickness="1"
									/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="FocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle Margin="2"
									SnapsToDevicePixels="true"
									Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
									StrokeDashArray="1 2"
									StrokeThickness="1"
									/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="Lv1.CheckBoxStyle"
					TargetType="{x:Type CheckBox}"
					>
				<Setter Property="IsEnabled" Value="True" />
				<Setter Property="Padding" Value="2,0,0,0" />
				<Setter Property="Margin" Value="8,-2,8,2" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
				<Setter Property="Background" Value="{StaticResource Lv.Item.CkBx.Bkg.Nml}" />
				<Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
				<Setter Property="Foreground" Value="{StaticResource Lv.Item.Fg}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type CheckBox}">
							<Border x:Name="checkBoxControlBorder"
									BorderBrush="Transparent"
									BorderThickness="1"
									CornerRadius="6"
									Padding="{TemplateBinding Padding}"
									>

								<Grid x:Name="templateRoot"
										Background="Transparent"
										SnapsToDevicePixels="True"
										>

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="12" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>

									<Border x:Name="checkBoxBorder"
											Height="12"
											BorderBrush="{TemplateBinding BorderBrush}"
											BorderThickness="0"
											>
										<Grid x:Name="markGrid">
											<Rectangle Fill="{TemplateBinding Background}"
													Margin="1"
													/>
											<Path x:Name="optionMark"
													Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
													Fill="{StaticResource OptionMark.Static.Glyph}"
													HorizontalAlignment="Center"
													Margin="0"
													Opacity="0"
													Stretch="UniformToFill"
													VerticalAlignment="Center"
													/>
											<Rectangle x:Name="indeterminateMark"
													Fill="{StaticResource OptionMark.Static.Glyph}"
													Margin="0"
													Opacity="0"
													/>

										</Grid>
									</Border>
									<ContentPresenter x:Name="contentPresenter"
											Grid.Column="1"
											Focusable="False"
											HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											Margin="5,0,0,1"
											RecognizesAccessKey="True"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											/>
								</Grid>
							</Border>
							<ControlTemplate.Triggers>

								<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="False">
									<Setter Property="Foreground" Value="{StaticResource Lv.Item.Fg.UnSelected}" />
									<Setter Property="IsEnabled" Value="False" />
								</DataTrigger>
								<Trigger Property="HasContent" Value="true">
									<Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}" />
								</Trigger>
								<!-- <Setter Property="Padding" Value="4,-1,0,0" /> -->
								<Trigger Property="IsMouseOver" Value="True">
									<!--  <Setter  -->
									<!--  Property="Background"  -->
									<!--  TargetName="checkBoxBorder"  -->
									<!--  Value="{StaticResource OptionMark.MouseOver.Background}"  -->
									<!--  />  -->
									<Setter Property="BorderBrush" TargetName="checkBoxControlBorder" Value="{StaticResource OptionMark.MouseOver.Border}" />
									<!--  TargetName="checkBoxBorder"  -->
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<!-- <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Disabled.Background}" /> -->
									<!-- <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Disabled.Border}" /> -->
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}" />
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}" />
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}" />
									<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}" />
									<Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}" />
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}" />
								</Trigger>
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Opacity" TargetName="optionMark" Value="1" />
									<Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
								</Trigger>
								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter Property="Opacity" TargetName="optionMark" Value="0" />
									<Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>


			<Style x:Key="ListBoxItemContainerStyle1"
					TargetType="{x:Type ListBoxItem}"
					>
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="Padding" Value="0,0,4,4" />
				<Setter Property="Margin" Value="2,0,0,3" />
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="Background" Value="{StaticResource Lv.Item.Panel.Bkg.Nml}" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListBoxItem}">
							<Border x:Name="BdCs1"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									CornerRadius="{StaticResource Normal.CornerRadius}"
									Padding="{TemplateBinding Padding}"
									SnapsToDevicePixels="true"
									>
								<ContentPresenter x:Name="Lv1Cp1"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										/>
							</Border>
							<ControlTemplate.Triggers>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="True" />
									</MultiTrigger.Conditions>
									<Setter Property="Background" TargetName="BdCs1" Value="{StaticResource Item.MouseOver.Background}" />
									<Setter Property="BorderBrush" TargetName="BdCs1" Value="{StaticResource Item.MouseOver.Border}" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="Selector.IsSelectionActive" Value="False" />
										<Condition Property="IsSelected" Value="True" />
									</MultiTrigger.Conditions>
									<Setter Property="Padding" TargetName="BdCs1" Value="0,0,4,4" />
									<Setter Property="BorderThickness" TargetName="BdCs1" Value="0.5" />
									<Setter Property="Background" TargetName="BdCs1" Value="{StaticResource Lv.Item.Panel.Bkg.Sel}" />
									<Setter Property="BorderBrush" TargetName="BdCs1" Value="{StaticResource Item.SelectedInactive.Border}" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="Selector.IsSelectionActive" Value="True" />
										<Condition Property="IsSelected" Value="True" />
									</MultiTrigger.Conditions>
									<Setter Property="Padding" TargetName="BdCs1" Value="0,0,4,4" />
									<Setter Property="Background" TargetName="BdCs1" Value="{StaticResource Item.SelectedActive.Background}" />
									<Setter Property="BorderBrush" TargetName="BdCs1" Value="{StaticResource Item.SelectedActive.Border}" />
								</MultiTrigger>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="TextElement.Foreground" TargetName="BdCs1" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="svStyle"
					TargetType="{x:Type ScrollViewer}"
					>
				<Setter Property="Template" Value="{StaticResource CsScrollViewerCt}" />
				<Setter Property="support:CsScrollBarAp.ScrollBarWidth" Value="12" />
				<Setter Property="support:CsScrollBarAp.ThumbCornerRadius" Value="3" />
				<Setter Property="support:CsScrollBarAp.RepeatButtonLength" Value="12" />
				<Setter Property="support:CsScrollBarAp.TrackWidth" Value="5" />
				<Setter Property="support:CsScrollBarAp.RepeatButtonIconGirth" Value="6" />
				<Setter Property="support:CsScrollBarAp.RepeatButtonIconLength" Value="10" />
				<Setter Property="support:CsScrollBarAp.VertBorderThickness" Value="0,0,0,0" />
				<Setter Property="support:CsScrollBarAp.VertBorderColor">
					<Setter.Value>
						<SolidColorBrush Color="{StaticResource Blue.350}" />
					</Setter.Value>
				</Setter>
				<Setter Property="support:CsScrollBarAp.HorizBorderThickness" Value="0,0,0,0" />
				<Setter Property="support:CsScrollBarAp.HorizBorderColor">
					<Setter.Value>
						<SolidColorBrush Color="{StaticResource Blue.350}" />
					</Setter.Value>
				</Setter>

				<Setter Property="support:CsScrollViewerAp.CornerRectBkgBrush">
					<Setter.Value>
						<SolidColorBrush Color="{StaticResource Gray.150}" />
					</Setter.Value>
				</Setter>


			</Style>

			<!--#endregion-->


			<DataTemplate x:Key="Lv1ItemTemplate"
					DataType="unitsUtil:UnitsDataR"
					d:DataType="unitsUtil:UnitsDataD"
					>

				<Grid x:Name="ChartGrid"
						HorizontalAlignment="Stretch"
						Margin="0,0,0,0"
						>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="{StaticResource Style.Chart.Cnum}" />
						<ColumnDefinition Width="{StaticResource Style.Chart.Cico}" />
						<ColumnDefinition Width="{StaticResource Style.Chart.Cdata}" />
						<ColumnDefinition Width="{StaticResource Style.Chart.Cex}" />
						<ColumnDefinition Width="{StaticResource Style.Chart.Csho}" />

					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="*" />
						<RowDefinition Height="*" />
						<RowDefinition Height="*" />
					</Grid.RowDefinitions>


					<Border x:Name="ItemNumber"
							Grid.Column="0"
							Grid.Row="0"
							Grid.RowSpan="3"
							Style="{StaticResource Bdr.Lv1.Prime.Item}"
							>
						<TextBlock FontSize="38"
								HorizontalAlignment="Center"
								Margin="0,-8,0,0"
								Padding="0"
								Text="{Binding SeqFormatted,
															 Mode=OneWay}"
								VerticalAlignment="Center"
								Style="{StaticResource Tblk.Lv1.StyleB}"
								/>
					</Border>

					<Viewbox x:Name="vbPadlock"
							Grid.Column="0"
							Grid.Row="2"
							Height="16"
							Width="16"
							HorizontalAlignment="Right"
							Margin="0,0,2,4"
							Panel.ZIndex="2"
							Stretch="none"
							VerticalAlignment="Bottom"
							>
						<Viewbox.Child>

							<ContentControl Content="{StaticResource Padlock}"
									Margin="0"
									>

								<ContentControl.Style>
									<Style TargetType="ContentControl">
										<Setter Property="Background" Value="{StaticResource Lv.Important}" />
										<Setter Property="Visibility" Value="Hidden" />
										<Style.Triggers>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True" />
													<Condition Binding="{Binding Path=Ustyle.IsLocked}" Value="True" />
												</MultiDataTrigger.Conditions>
												<Setter Property="Visibility" Value="Visible" />
											</MultiDataTrigger>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="False" />
													<Condition Binding="{Binding Path=Ustyle.IsLocked}" Value="True" />
												</MultiDataTrigger.Conditions>
												<Setter Property="Visibility" Value="Visible" />
												<Setter Property="Background" Value="{StaticResource Lv.Important.UnSelected}" />
											</MultiDataTrigger>
										</Style.Triggers>
									</Style>
								</ContentControl.Style>


							</ContentControl>

						</Viewbox.Child>


					</Viewbox>

					<Border x:Name="Icon"
							Grid.Column="1"
							Grid.Row="0"
							Grid.RowSpan="3"
							Style="{StaticResource Bdr.Lv1.Icon.Item}"
							>

						<Image Name="UnitIcon"
								DockPanel.Dock="Top"
								Margin="8"
								Source="{Binding Path=Ux}"
								Stretch="None"
								/>

					</Border>



					<Border x:Name="NameTitle"
							Grid.Column="2"
							Grid.Row="0"
							Style="{StaticResource Bdr.Lv1.Sub.HdrA}"
							>
						<TextBlock FontSize="{StaticResource FontSize.Normal}"
								Text="Name"
								TextAlignment="Left"
								Style="{StaticResource Tblk.Lv1.StyleA}"
								/>
						<!--  Style="{StaticResource Tblk.Lv1.Style}"  -->
					</Border>

					<Border x:Name="Name"
							Grid.Column="3"
							Grid.Row="0"
							Grid.ColumnSpan="1"
							Style="{StaticResource Bdr.Lv1.Prime.Item}"
							>
						<TextBox Text="{Binding Path=Ustyle.Name}" />
						<!--  Style="{StaticResource Tblk.Lv1.Style}"  -->
					</Border>

					<Border x:Name="DescTitle"
							Grid.Column="2"
							Grid.Row="1"
							Style="{StaticResource Bdr.Lv1.Sub.HdrB}"
							>
						<TextBlock FontSize="{StaticResource FontSize.Normal}"
								Text="Description"
								TextAlignment="Left"
								Style="{StaticResource Tblk.Lv1.StyleB}"
								/>
					</Border>

					<Border x:Name="Desc"
							Grid.Column="3"
							Grid.Row="1"
							Grid.ColumnSpan="1"
							Style="{StaticResource Bdr.Lv1.2ndry.Item}"
							>
						<TextBlock Text="{Binding Path=Ustyle.Description}"
								Style="{StaticResource Tblk.Lv1.StyleB}"
								/>
					</Border>


					<Border x:Name="ExampleTitle"
							Grid.Column="2"
							Grid.Row="2"
							Style="{StaticResource Bdr.Lv1.Sub.HdrB}"
							>
						<TextBlock FontSize="{StaticResource FontSize.Normal}"
								Text="Example"
								TextAlignment="Left"
								Style="{StaticResource Tblk.Lv1.StyleB}"
								/>
					</Border>

					<Border x:Name="Example"
							Grid.Column="3"
							Grid.Row="2"
							HorizontalAlignment="Stretch"
							Style="{StaticResource Bdr.Lv1.Prime.Item}"
							>
						<!--  d:Text="120'-11 248/255&quot;"  -->
						<TextBlock FontSize="{StaticResource FontSize.Normal}"
								HorizontalAlignment="Center"
								Text="{Binding Path=UnitSampleFormatted,
															 FallbackValue='0.00'}"
								TextAlignment="Center"
								Style="{StaticResource Tblk.Lv1.StyleB}"
								/>
					</Border>

					<Border x:Name="ShowHere"
							Grid.Column="4"
							Grid.Row="0"
							Grid.RowSpan="3"
							HorizontalAlignment="Stretch"
							Style="{StaticResource Bdr.Lv1.Prime.Item}"
							>
						<StackPanel Orientation="Vertical"
								VerticalAlignment="Stretch"
								>

							<Border Margin="4"
									Style="{StaticResource Bdr.Lv1.Sub.HdrB}"
									>
								<TextBlock Margin="5,0,0,2"
										Padding="0"
										Text="Show Here"
										Style="{StaticResource Tblk.Lv1.StyleB}"
										/>
							</Border>

							<CheckBox Content="Ribbon Favs"
									FontSize="{StaticResource FontSize.Smaller}"
									IsChecked="{Binding Ustyle.ShowInRibbon}"
									VerticalAlignment="Top"
									>
								<CheckBox.Style>
									<Style BasedOn="{StaticResource Lv1.CheckBoxStyle}"
											TargetType="CheckBox"
											>
										<Style.Triggers>
											<DataTrigger Binding="{Binding Ustyle.InRibbonEnabled}" Value="False">
												<Setter Property="IsEnabled" Value="False" />
												<Setter Property="IsChecked" Value="{x:Null}" />
												<Setter Property="Foreground" Value="{StaticResource Lv.Item.Fg.UnSelected}" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</CheckBox.Style>
							</CheckBox>

							<CheckBox Content="Dialog Left"
									FontSize="{StaticResource FontSize.Smaller}"
									IsChecked="{Binding Ustyle.ShowInDialogLeft}"
									VerticalAlignment="Center"
									Style="{StaticResource Lv1.CheckBoxStyle}"
									/>

							<CheckBox Content="Dialog Right"
									FontSize="{StaticResource FontSize.Smaller}"
									IsChecked="{Binding Ustyle.ShowInDialogRight}"
									VerticalAlignment="Bottom"
									Style="{StaticResource Lv1.CheckBoxStyle}"
									/>

						</StackPanel>

					</Border>



				</Grid>

			</DataTemplate>

			<DataTemplate x:Key="StylesSelection">

				<!--#region > selection grid-->
				<!--#endregion-->

				<Grid x:Name="StylesSelectionGrid"
						DataContext="{Binding ElementName=WinUnitStyle}"
						>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="{StaticResource Project.Unit.Width}" />
						<ColumnDefinition Width="{StaticResource Style.Chart.Width}" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="{StaticResource Main.Row.Height}" />
						<RowDefinition Height="{StaticResource Function.Row.Height}" />
						<RowDefinition Height="{StaticResource Control.Row.Height}" />
					</Grid.RowDefinitions>

					<!--#region > columns-->
					<!--#endregion-->


					<!--#region > column 0-->

					<DockPanel x:Name="AddUnitControl"
							Grid.Column="0"
							Grid.Row="2"
							HorizontalAlignment="Stretch"
							>

						<Button x:Name="BtnAddBefore"
								DockPanel.Dock="Left"
								FontSize="{StaticResource FontSize.Normal}"
								HorizontalAlignment="Left"
								IsEnabled="{Binding Path=CanAddBefore}"
								VerticalAlignment="Bottom"
								Template="{StaticResource Button.Normal.ControlTemplate}"
								Click="BtnAddBefore_OnClick"
								>

							<Button.Content>
								<TextBlock FontSize="{StaticResource FontSize.Normal}"
										Padding="10,1,10,3"
										Text="Add Before"
										/>
							</Button.Content>
						</Button>

						<Border DockPanel.Dock="Left"
								Height="Auto"
								Width="Auto"
								BorderThickness="1"
								Margin="10,0,0,0"
								VerticalAlignment="Bottom"
								>
							<Border.Style>
								<Style BasedOn="{StaticResource Bdr.Value.Entry}"
										TargetType="Border"
										>
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=IsInsPosOk}" Value="True">
											<Setter Property="BorderBrush" Value="LawnGreen" />
										</DataTrigger>
										<DataTrigger Binding="{Binding Path=IsInsPosOk}" Value="False">
											<Setter Property="BorderBrush" Value="Red" />
										</DataTrigger>
									</Style.Triggers>

								</Style>
							</Border.Style>

							<TextBox x:Name="TbxAddPosition"
									AcceptsReturn="False"
									AcceptsTab="False"
									AutoWordSelection="True"
									Background="Transparent"
									BorderThickness="0"
									CaretBrush="White"
									FontSize="{StaticResource FontSize.Normal}"
									Foreground="White"
									MinWidth="55"
									Padding="0,1,0,2"
									Text="{Binding ElementName=WinUnitStyle,
																 Path=InsPosition,
																 StringFormat='{}{0:D}',
																 Mode=TwoWay}"
									TextAlignment="Center"
									/>
							<!--  Text="{Binding ElementName=WinUnitStyle,  -->
							<!--  Path=InsertPosition,  -->
							<!--  Mode=TwoWay}"  -->

						</Border>

						<Button x:Name="BtnAddLast"
								DockPanel.Dock="Right"
								FontSize="{StaticResource FontSize.Normal}"
								HorizontalAlignment="Right"
								IsEnabled="{Binding Path=CanAddAfter}"
								VerticalAlignment="Bottom"
								Template="{StaticResource Button.Normal.ControlTemplate}"
								Click="BtnAddLast_OnClick"
								>

							<Button.Content>
								<TextBlock FontSize="{StaticResource FontSize.Normal}"
										Padding="15,1,15,3"
										Text="Add Last"
										/>
							</Button.Content>
						</Button>

					</DockPanel>



					<DockPanel x:Name="Column0"
							Grid.Column="0"
							Grid.Row="0"
							Grid.RowSpan="2"
							DataContext="{Binding ElementName=WinUnitStyle,
																		Path=DetailUnit}"
							Margin="0,0,0,0"
							d:DataContext="{Binding Source={x:Static unitsUtil:UnitStdStylesD.ListD},
																			Path=[0]}"
							>
						<DockPanel DockPanel.Dock="Top">
							<Border x:Name="Column0Title2"
									DockPanel.Dock="right"
									Width="100"
									Margin="0,0,0,3"
									Style="{StaticResource Bdr.Hdr.Prime}"
									>
								<TextBlock FontSize="{StaticResource FontSize.XLarge}"
										Foreground="Black"
										Padding="5,0,0,2"
										Text="Length"
										/>
							</Border>

							<Border x:Name="Column0Title1"
									DockPanel.Dock="Left"
									HorizontalAlignment="Stretch"
									Margin="0,0,3,3"
									Style="{StaticResource Bdr.Hdr.Prime}"
									>

								<TextBlock FontSize="{StaticResource FontSize.XLarge}"
										Foreground="Black"
										Padding="5,0,0,2"
										Text="Unit Settings"
										/>
							</Border>



						</DockPanel>

						<ComboBox x:Name="Cbx1"
								DockPanel.Dock="Top"
								BorderThickness="0"
								DataContext="{Binding ElementName=WinUnitStyle}"
								DisplayMemberPath="Key"
								FocusVisualStyle="{x:Null}"
								FontSize="{StaticResource FontSize.Normal}"
								Foreground="White"
								HorizontalAlignment="Stretch"
								Initialized="CbxStdStyles_Initialized"
								IsEditable="False"
								IsReadOnly="True"
								IsSynchronizedWithCurrentItem="True"
								ItemsSource="{Binding Path=CbxList,
																			Mode=OneWay}"
								Margin="0,0,0,3"
								MaxDropDownHeight="200"
								Padding="3"
								SelectedIndex="{Binding CbxSelIndex}"
								SelectedItem="{Binding CbxSelectedItem,
																			 Mode=TwoWay}"
								custom:CsComboBoxAp.ComboBoxBdrRadius="{StaticResource Normal.CornerRadius}"
								custom:CsComboBoxAp.DropDownBdrBrush="{StaticResource ComboBox.ListItem.Background.Normal}"
								custom:CsComboBoxAp.DropDownBdrRadius="4"
								custom:CsComboBoxAp.DropDownBdrThickness="1"
								custom:CsComboBoxAp.DropDownBrush="{StaticResource ComboBox.Background.Normal}"

								d:DisplayMemberPath="Value.DropDownName"
								d:ItemsSource="{x:Static unitsUtil:UnitStdStylesD.SStdStyles}"
								d:SelectedIndex="0"
								Style="{StaticResource CsComboBoxStyle}"
								>
							<!-- custom:CsComboBoxAp.DropDownWidthAdjustment="-10.0" -->
							<!-- custom:CsComboBoxAp.MouseOverBrush="{StaticResource ComboBox.Subject.Background.MouseOver}" -->
							<!-- custom:CsComboBoxAp.NotEnabledBrush="{StaticResource ComboBox.Subject.Background.Disabled}" -->

						</ComboBox>

						<StackPanel x:Name="ProjUnit"
								DockPanel.Dock="Top"
								Orientation="Vertical"
								>

							<StackPanel x:Name="Sp_UnitName"
									Style="{StaticResource StkPnl}"
									>

								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Name"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Name_Units"
										Style="{StaticResource Bdr.Proj.Units.Value.Editable}"
										>
									<TextBlock 
											Text="{Binding Ustyle.Name,
																		 FallbackValue='none'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>

							</StackPanel>

							<StackPanel x:Name="Sp_UnitDesc"
									Style="{StaticResource StkPnl}"
									>

								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Desc"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Desc_Units"
										Style="{StaticResource Bdr.Proj.Units.Value}"
										>
									<TextBlock Text="{Binding Ustyle.Description,
																		 FallbackValue='none'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>

							</StackPanel>

							<StackPanel x:Name="Sp_UnitSys"
									Style="{StaticResource StkPnl}"
									>

								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Unit System"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Unit_System"
										Style="{StaticResource Bdr.Proj.Units.Value}"
										>
									<!--  d:Text="Unit System"  -->
									<TextBlock Text="{Binding USystem,
																		 FallbackValue='missing'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>

							</StackPanel>

							<StackPanel x:Name="Sp_Symbol"
									Style="{StaticResource StkPnl}"
									>
								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Symbol"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Value_Symbol"
										Style="{StaticResource Bdr.Proj.Units.Value}"
										>
									<!--  d:Text="Unit Symbol"  -->
									<TextBlock Text="{Binding UnitSymbolFormated,
																		 FallbackValue='missing'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>
							</StackPanel>

							<StackPanel x:Name="Sp_Rounding"
									Style="{StaticResource StkPnl}"
									>
								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Rounding"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Value_Rounding"
										Style="{StaticResource Bdr.Proj.Units.Value}"
										>
									<!--  d:Text="Unit Rounding"  -->
									<TextBlock Text="{Binding UnitPrecisionFormatted,
																		 FallbackValue='missing'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>
							</StackPanel>

							<StackPanel x:Name="Sp_LeadZero"
									Style="{StaticResource StkPnl}"
									>
								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Leading Zero"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Value_LeadZero"
										Style="{StaticResource Bdr.Proj.Units.Value}"
										>
									<!--  d:Text="Unit Lead Zero"  -->
									<TextBlock IsEnabled="{Binding UnitLeadZeroEnable}"
											Text="{Binding UnitLeadZero,
																		 FallbackValue='missing'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>
							</StackPanel>

							<StackPanel x:Name="Sp_TrailZero"
									Style="{StaticResource StkPnl}"
									>
								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Trailing Zeros"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Value_TrailZero"
										Style="{StaticResource Bdr.Proj.Units.Value}"
										>
									<!--  d:Text="Unit Trail Zero"  -->
									<TextBlock IsEnabled="{Binding UnitTrailZeroEnable}"
											Text="{Binding UnitTrailZero,
																		 FallbackValue='missing'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>
							</StackPanel>

							<StackPanel x:Name="Sp_Spaces"
									Style="{StaticResource StkPnl}"
									>
								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Show Extra Spaces"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Value_Spaces"
										Style="{StaticResource Bdr.Proj.Units.Value}"
										>
									<!--  d:Text="Unit Show Extra Spaces"  -->
									<TextBlock IsEnabled="{Binding UnitExtraSpacesEnable}"
											Text="{Binding UnitExtraSpaces,
																		 FallbackValue='missing'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>
							</StackPanel>

							<StackPanel x:Name="Sp_UsePlus"
									Style="{StaticResource StkPnl}"
									>
								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Show + for Positive Values"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Value_UsePlus"
										Style="{StaticResource Bdr.Proj.Units.Value}"
										>
									<!--  d:Text="Unit Show Plus"  -->
									<TextBlock IsEnabled="{Binding UnitShowPlusEnable}"
											Text="{Binding UnitShowPlus,
																		 FallbackValue='missing'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>
							</StackPanel>

							<StackPanel x:Name="Sp_Grouping"
									Style="{StaticResource StkPnl}"
									>
								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Use Digit Grouping"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Value_Grouping"
										Style="{StaticResource Bdr.Proj.Units.Value}"
										>
									<!--  d:Text="Unit Grouping"  -->
									<TextBlock IsEnabled="{Binding UnitDigitGrpEnable}"
											Text="{Binding UnitDigitGrp,
																		 FallbackValue='missing'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>
							</StackPanel>


							<StackPanel x:Name="Sp_UnitSample"
									Style="{StaticResource StkPnl}"
									>

								<Border Style="{StaticResource Bdr.Proj.Units.Title}">
									<TextBlock Text="Unit Sample"
											Style="{StaticResource Tblk.Desc}"
											/>
								</Border>

								<Border x:Name="Unit_Sample"
										Style="{StaticResource Bdr.Proj.Units.Value}"
										>
									<!--  d:Text="120'-11 248/255&quot;"  -->
									<TextBlock Text="{Binding UnitSampleFormatted,
																		 FallbackValue='missing'}"
											Style="{StaticResource Tblk.Value}"
											/>
								</Border>

							</StackPanel>

						</StackPanel>

						<DockPanel x:Name="AddUnit"
								DockPanel.Dock="Bottom"
								DataContext="{Binding ElementName=WinUnitStyle}"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Bottom"
								>

							<Border x:Name="BdrAddStyle"
									DockPanel.Dock="Top"
									Background="{StaticResource Lv.Item.SubHdr.Bkg2}"
									BorderThickness="0"
									CornerRadius="{StaticResource Normal.CornerRadius}"
									VerticalAlignment="Bottom"
									>
								<TextBlock x:Name="AddTitle1"
										FontSize="{StaticResource FontSize.Normal}"
										HorizontalAlignment="Stretch"
										Margin="5,5,5,5"
										Text="Add the above as a new Style?"
										TextWrapping="NoWrap"
										VerticalAlignment="Stretch"
										/>
							</Border>


							<TextBlock x:Name="NameTitle"
									DockPanel.Dock="Top"
									FontSize="{StaticResource FontSize.Normal}"
									Margin="0,5,5,5"
									Text="Name for the new Style"
									/>

							<Border x:Name="NameEntry"
									DockPanel.Dock="Top"
									BorderThickness="1"
									Margin="0,0,0,0"
									VerticalAlignment="Bottom"
									>
								<Border.Style>
									<Style BasedOn="{StaticResource Bdr.Value.Entry}"
											TargetType="Border"
											>
										<Style.Triggers>
											<DataTrigger Binding="{Binding Path=IsNewNameOk}" Value="True">
												<Setter Property="BorderBrush" Value="LawnGreen" />
											</DataTrigger>
											<DataTrigger Binding="{Binding Path=IsNewNameOk}" Value="False">
												<Setter Property="BorderBrush" Value="Red" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Border.Style>

								<Grid HorizontalAlignment="Stretch"
										Margin="0"
										>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="22" />
									</Grid.ColumnDefinitions>


									<TextBox x:Name="TbxNameEntry"
											DockPanel.Dock="Top"
											Grid.Column="0"
											Grid.Row="0"
											AcceptsReturn="False"
											AcceptsTab="False"
											Background="Transparent"
											BorderThickness="0"
											CaretBrush="White"
											FontSize="{StaticResource FontSize.Normal}"
											Foreground="White"
											HorizontalAlignment="Stretch"
											Margin="0,0,10,0"
											Padding="5,0,5,2"
											Text="{Binding NewName,
																		 Mode=TwoWay}"
											>

									</TextBox>

									<Button x:Name="Btn_NameEntryClear"
											Grid.Column="1"
											Grid.Row="0"
											BorderBrush="Transparent"
											BorderThickness="0"
											HorizontalAlignment="Stretch"
											HorizontalContentAlignment="Center"
											Margin="0"
											Padding="0,0,0,2"
											VerticalContentAlignment="Center"
											Template="{StaticResource Button.Stealth.ControlTemplate}"
											Click="Btn_NameEntryClear_OnClick"
											>
										<Button.Content>
											<TextBlock Background="Transparent"
													FontSize="{StaticResource FontSize.XLarge}"
													IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent},
																							Path=IsEnabled}"
													Margin="0,-2,0,-3"
													Padding="0"
													Text="X"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<!-- <Setter Property="IsEnabled" Value="False" /> -->
														<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Disabled}" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsNewNameOk}" Value="True">
																<!-- <Setter Property="IsEnabled" Value="True" /> -->
																<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Enabled}" />
															</DataTrigger>
															<DataTrigger Binding="{Binding IsNewNameOk}" Value="False">
																<!-- <Setter Property="IsEnabled" Value="True" /> -->
																<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Enabled}" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>
										</Button.Content>

										<Button.Style>
											<Style TargetType="Button">
												<Setter Property="IsEnabled" Value="False" />
												<Setter Property="Background" Value="Transparent" />

												<Style.Triggers>
													<Trigger Property="IsMouseOver" Value="True">
														<Setter Property="Background" Value="DimGray">
														</Setter>
													</Trigger>
													<DataTrigger Binding="{Binding IsNewNameOk}" Value="True">
														<Setter Property="IsEnabled" Value="True" />
														<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Enabled}" />
													</DataTrigger>
													<DataTrigger Binding="{Binding IsNewNameOk}" Value="False">
														<Setter Property="IsEnabled" Value="True" />
														<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Enabled}" />
													</DataTrigger>
													<!-- <DataTrigger Binding="{Binding Path=(local:UnitStylesManager.WinLocationChanging)}" Value="true"> -->
													<!-- 	<Setter Property="Background" Value="Red" /> -->
													<!-- </DataTrigger> -->

												</Style.Triggers>
											</Style>
										</Button.Style>

									</Button>

									<Popup x:Name="TbxNameEntryPopup"
											Grid.Column="0"
											Grid.Row="0"
											HorizontalOffset="4"
											Placement="Bottom"
											PlacementTarget="{Binding ElementName=NameEntry,
																								Mode=OneWay}"
											VerticalOffset="2"
											>

										<Popup.Style>
											<Style TargetType="Popup">
												<Setter Property="IsOpen" Value="False" />
												<Style.Triggers>
													<!-- <DataTrigger Binding="{Binding Path=(local:UnitStylesManager.WinLocationChanging), Converter={StaticResource PassThroughConverter}}" Value="True"> -->
													<!-- 	<Setter Property="IsOpen" Value="False" /> -->
													<!-- </DataTrigger> -->
													<DataTrigger Binding="{Binding ElementName=TbxNameEntry, Path=IsKeyboardFocused}" Value="True">
														<Setter Property="IsOpen" Value="True" />
													</DataTrigger>
													<DataTrigger Binding="{Binding ElementName=WinUnitStyle, Path=WinLocationChanging}" Value="True">
														<Setter Property="IsOpen" Value="false" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</Popup.Style>
										<Border Background="CadetBlue"
												BorderThickness="0"
												CornerRadius="{StaticResource Normal.CornerRadius}"
												Margin="0"
												Padding="8,5,8,8"
												>
											<TextBlock Width="200"
													Background="CadetBlue"
													Foreground="White"
													Padding="0"
													Text="Name Requirements&#x0a;● Minimum 5 characters&#x0a;● First character must be alphabetic&#x0a;● Cannot match existing name"
													TextWrapping="Wrap"
													/>
										</Border>
									</Popup>
								</Grid>

							</Border>


							<TextBlock x:Name="DescTitle"
									DockPanel.Dock="Top"
									FontSize="{StaticResource FontSize.Normal}"
									Margin="0,6,5,5"
									Text="Description for the new Style"
									/>


							<Border x:Name="DescEntry"
									DockPanel.Dock="Top"
									BorderThickness="1"
									VerticalAlignment="Bottom"
									>
								<Border.Style>
									<Style BasedOn="{StaticResource Bdr.Value.Entry}"
											TargetType="Border"
											>
										<Style.Triggers>
											<DataTrigger Binding="{Binding Path=IsNewDescOk}" Value="True">
												<Setter Property="BorderBrush" Value="LawnGreen" />
											</DataTrigger>
											<DataTrigger Binding="{Binding Path=IsNewDescOk}" Value="False">
												<Setter Property="BorderBrush" Value="Red" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Border.Style>

								<Grid HorizontalAlignment="Stretch">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="22" />
									</Grid.ColumnDefinitions>


									<TextBox x:Name="TbxDescEntry"
											DockPanel.Dock="Top"
											Grid.Column="0"
											Grid.Row="0"
											AcceptsReturn="False"
											AcceptsTab="False"
											Background="Transparent"
											BorderThickness="0"
											CaretBrush="White"
											FontSize="{StaticResource FontSize.Normal}"
											Foreground="White"
											HorizontalAlignment="Stretch"
											Margin="0,0,10,0"
											Padding="5,0,5,2"
											Text="{Binding NewDesc,
																		 Mode=TwoWay}"
											>

									</TextBox>

									<Button x:Name="Btn_DescEntryClear"
											Grid.Column="1"
											Grid.Row="0"
											BorderBrush="Transparent"
											BorderThickness="0"
											FontSize="{StaticResource FontSize.XLarge}"
											HorizontalAlignment="Stretch"
											HorizontalContentAlignment="Center"
											Margin="0,0,0,0"
											Padding="0,0,0,0"
											VerticalContentAlignment="Center"
											Template="{StaticResource Button.Stealth.ControlTemplate}"
											Click="Btn_DescEntryClear_OnClick"
											>
										<Button.Content>
											<TextBlock Background="Transparent"
													FontSize="{StaticResource FontSize.XLarge}"
													IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent},
																							Path=IsEnabled}"
													Margin="0,-2,0,-3"
													Text="X"
													>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<!-- <Setter Property="IsEnabled" Value="False" /> -->
														<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Disabled}" />
														<Style.Triggers>
															<DataTrigger Binding="{Binding IsNewDescOk}" Value="True">
																<!-- <Setter Property="IsEnabled" Value="True" /> -->
																<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Enabled}" />
															</DataTrigger>
															<DataTrigger Binding="{Binding IsNewDescOk}" Value="False">
																<!-- <Setter Property="IsEnabled" Value="True" /> -->
																<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Enabled}" />
															</DataTrigger>
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											</TextBlock>
										</Button.Content>
										<Button.Style>
											<Style TargetType="Button">
												<Setter Property="IsEnabled" Value="False" />
												<Setter Property="Background" Value="Transparent">
												</Setter>
												<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Disabled}" />
												<Style.Triggers>
													<Trigger Property="IsMouseOver" Value="True">
														<Setter Property="Background" Value="DimGray">
														</Setter>
													</Trigger>
													<DataTrigger Binding="{Binding IsNewDescOk}" Value="True">
														<Setter Property="IsEnabled" Value="True" />
														<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Enabled}" />
													</DataTrigger>
													<DataTrigger Binding="{Binding IsNewDescOk}" Value="False">
														<Setter Property="IsEnabled" Value="True" />
														<Setter Property="Foreground" Value="{StaticResource Editbox.Clear.X.Enabled}" />
													</DataTrigger>
													<!-- <DataTrigger Binding="{Binding Path=(local:UnitStylesManager.WinLocationChanging)}" Value="true"> -->
													<!-- 	<Setter Property="Background" Value="Red" /> -->
													<!-- </DataTrigger> -->

												</Style.Triggers>
											</Style>
										</Button.Style>

									</Button>

									<Popup x:Name="TbxDescEntryPopup"
											Grid.Column="0"
											Grid.Row="0"
											HorizontalOffset="4"
											Placement="Bottom"
											PlacementTarget="{Binding ElementName=TbxDescEntry,
																								Mode=OneWay}"
											VerticalOffset="2"
											>

										<Popup.Style>
											<Style TargetType="Popup">
												<Setter Property="IsOpen" Value="False" />
												<Style.Triggers>
													<!-- <DataTrigger Binding="{Binding Path=(local:UnitStylesManager.WinLocationChanging)}" Value="True"> -->
													<!-- 	<Setter Property="IsOpen" Value="False" /> -->
													<!-- </DataTrigger> -->
													<DataTrigger Binding="{Binding ElementName=TbxDescEntry, Path=IsKeyboardFocused}" Value="True">
														<Setter Property="IsOpen" Value="True" />
													</DataTrigger>
													<DataTrigger Binding="{Binding ElementName=WinUnitStyle, Path=WinLocationChanging}" Value="True">
														<Setter Property="IsOpen" Value="false" />
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</Popup.Style>
										<Border Background="CadetBlue"
												BorderThickness="0"
												CornerRadius="{StaticResource Normal.CornerRadius}"
												Margin="0"
												Padding="8,5,8,8"
												>
											<TextBlock Width="200"
													Background="CadetBlue"
													Foreground="White"
													Padding="0"
													Text="Description Requirements&#x0a;● A description is required&#x0a;● First character cannot be a space&#x0a;● Minimum of 10 characters"
													TextWrapping="Wrap"
													/>
										</Border>
									</Popup>
								</Grid>

							</Border>

						</DockPanel>

					</DockPanel>

					<!--#endregion-->

					<!--#region > column 1-->

					<DockPanel x:Name="Lv1Control"
							DockPanel.Dock="Bottom"
							Grid.Column="1"
							Grid.Row="2"
							HorizontalAlignment="Stretch"
							Margin="15,0,10,0"
							VerticalAlignment="Bottom"
							>

						<Button x:Name="BtnUp"
								DockPanel.Dock="Left"
								Height="{Binding ElementName=BtnAddBefore,
																 Path=ActualHeight}"
								FontSize="{StaticResource FontSize.Normal}"
								HorizontalAlignment="Right"
								Margin="0,0,5,0"
								Template="{StaticResource Button.Normal.ControlTemplate}"
								Click="BtnUp_OnClick"
								>
							<Button.Content>
								<TextBlock FontSize="{StaticResource FontSize.Normal}"
										Padding="10,0,10,4"
										Text="▲"
										/>
							</Button.Content>
						</Button>

						<Button x:Name="BtnDn"
								DockPanel.Dock="Left"
								Height="{Binding ElementName=BtnAddBefore,
																 Path=ActualHeight}"
								HorizontalAlignment="Right"
								Margin="0,0,5,0"
								Template="{StaticResource Button.Normal.ControlTemplate}"
								Click="BtnDn_OnClick"
								>
							<Button.Content>
								<TextBlock FontSize="{StaticResource FontSize.Normal}"
										Padding="10,2,10,4"
										Text="▼"
										/>
							</Button.Content>
						</Button>

						<Button x:Name="BtnDelete"
								DockPanel.Dock="Left"
								Height="{Binding ElementName=BtnDn,
																 Path=ActualHeight,
																 FallbackValue=18}"
								Width="{Binding ElementName=BtnDn,
																Path=ActualWidth,
																FallbackValue=18}"
								Foreground="White"
								Margin="0,0,5,0"
								Template="{StaticResource Button.Normal.ControlTemplate}"
								Click="BtnDelete_OnClick"
								>
							<Button.Background>
								<SolidColorBrush Color="{StaticResource Deep.Orange.600}" />
							</Button.Background>
							<Button.Content>

								<Label Content="{StaticResource DeleteIcon}"
										BorderThickness="0"
										Foreground="White"
										/>

							</Button.Content>
						</Button>

						<Border x:Name="ChangeCount"
								DockPanel.Dock="Left"
								BorderThickness="1"
								HorizontalAlignment="Right"
								Margin="0,0,0,0"
								VerticalAlignment="Stretch"
								Visibility="Visible"
								Style="{StaticResource Bdr.Value.Entry}"
								>
							<TextBlock DockPanel.Dock="Right"
									Width="60"
									FontSize="{StaticResource FontSize.Large}"
									HorizontalAlignment="Right"
									Margin="0"
									Padding="5,0,5,2"
									Text="{Binding HasChanges,
																 StringFormat='{}{0:D2}',
																 FallbackValue=0}"
									TextAlignment="Center"
									/>
						</Border>


					</DockPanel>

					<DockPanel x:Name="Lv1Panel"
							Grid.Column="1"
							Grid.Row="0"
							Grid.RowSpan="2"
							HorizontalAlignment="Stretch"
							Margin="15,0,0,0"
							>

						<Border DockPanel.Dock="Top"
								Margin="3,0,10,3"
								Style="{StaticResource Bdr.Hdr.Prime}"
								>

							<TextBlock FontSize="{StaticResource FontSize.XLarge}"
									Foreground="Black"
									Padding="5,0,0,2"
									Text="Saved Styles"
									/>
						</Border>

						<ListBox x:Name="lbx"
								DockPanel.Dock="Top"
								Grid.IsSharedSizeScope="True"
								Background="Transparent"
								BorderThickness="0"
								DataContext="{Binding ElementName=WinUnitStyle,
																			Path=StylesView}"
								HorizontalAlignment="Stretch"
								HorizontalContentAlignment="Stretch"
								Initialized="lbx_Initialized"
								IsSynchronizedWithCurrentItem="True"
								ItemContainerStyle="{DynamicResource ListBoxItemContainerStyle1}"
								ItemTemplate="{StaticResource Lv1ItemTemplate}"
								ItemsSource="{Binding}"
								Margin="0,0,0,0"
								Padding="0,0,0,0"
								SelectedIndex="{Binding LbxSelIndex,
																				ElementName=WinUnitStyle,
																				Mode=TwoWay}"
								SelectedItem="{Binding ElementName=WinUnitStyle,
																			 Path=LbxSelItem,
																			 Mode=OneWayToSource}"
								VerticalAlignment="Top"
								d:DataContext="{x:Static unitsUtil:UnitStdStylesD.ListD}"
								d:SelectedIndex="2"
								>

							<ListBox.Resources>

								<Style BasedOn="{StaticResource svStyle}"
										TargetType="{x:Type ScrollViewer}"
										/>

							</ListBox.Resources>

							<ListBox.Style>
								<Style TargetType="ListBox">
									<Setter Property="HorizontalAlignment" Value="Stretch" />
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate x:Name="Lv1Ctl1"
													TargetType="{x:Type ListBox}"
													>
												<ScrollViewer Focusable="false"
														Padding="{TemplateBinding Padding}"
														>
													<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
												</ScrollViewer>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
								</Style>
							</ListBox.Style>

						</ListBox>

					</DockPanel>

					<!--#endregion-->

				</Grid>

			</DataTemplate>


			<DataTemplate x:Key="StylesOrder" />


		</ResourceDictionary>

	</Window.Resources>

	<Grid x:Name="WinGrid"
			Margin="15,12,8,8"
			>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="1*" />
		</Grid.ColumnDefinitions>

		<Grid.RowDefinitions>
			<RowDefinition Height="{StaticResource Main.Row.Height}" />
			<RowDefinition Height="{StaticResource Control.Row.Height}" />
		</Grid.RowDefinitions>

		<DockPanel x:Name="DialogControl"
				Grid.Column="0"
				Grid.Row="1"
				HorizontalAlignment="Stretch"
				Margin="0,0,10,0"
				VerticalAlignment="Bottom"
				>

			<Button x:Name="BtnChgTemplate1"
					DockPanel.Dock="Left"
					HorizontalAlignment="left"
					Margin="0,0,5,0"
					VerticalAlignment="Bottom"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					Click="BtnChgTemplate_OnClick"
					>
				<TextBlock FontSize="{StaticResource FontSize.Normal}"
						Padding="12,0,12,4"
						Text="{Binding ContentType}"
						d:Text="Adjust Styles"
						/>
			</Button>

			<Button x:Name="BtnDone"
					DockPanel.Dock="Right"
					FontSize="{StaticResource FontSize.Normal}"
					HorizontalAlignment="Right"
					Margin="5,0,0,0"
					VerticalAlignment="Bottom"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					Click="BtnDone_OnClick"
					>
				<TextBlock FontSize="{StaticResource FontSize.Normal}"
						Padding="25,0,25,4"
						Text="{Binding CloseType,
													 FallbackValue='Done'}"
						/>
			</Button>

			<Button x:Name="BtnApply"
					DockPanel.Dock="Right"
					HorizontalAlignment="Right"
					Margin="5,0,0,0"
					VerticalAlignment="Bottom"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					Click="BtnApply_OnClick"
					>
				<TextBlock FontSize="{StaticResource FontSize.Normal}"
						Padding="25,0,25,4"
						Text="Apply"
						/>
			</Button>

			<Button x:Name="BtnCancel"
					DockPanel.Dock="Right"
					HorizontalAlignment="Right"
					Margin="5,0,0,0"
					VerticalAlignment="Bottom"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					Click="BtnCancel_OnClick"
					>
				<TextBlock FontSize="{StaticResource FontSize.Normal}"
						Padding="25,0,25,4"
						Text="Cancel"
						/>
			</Button>

			<Button x:Name="BtnReset"
					DockPanel.Dock="Right"
					HorizontalAlignment="Right"
					Margin="5,0,0,0"
					VerticalAlignment="Bottom"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					Click="BtnReset_OnClick"
					>
				<TextBlock FontSize="{StaticResource FontSize.Normal}"
						Padding="25,0,25,4"
						Text="Reset"
						/>
			</Button>

			<Button x:Name="BtnDebug"
					DockPanel.Dock="Right"
					HorizontalAlignment="Right"
					Margin="5,0,0,0"
					VerticalAlignment="Bottom"
					Template="{StaticResource Button.Normal.ControlTemplate}"
					Click="BtnDebug_OnClick"
					>
				<TextBlock FontSize="{StaticResource FontSize.Normal}"
						Padding="25,0,25,4"
						Text="Debug"
						/>
			</Button>

		</DockPanel>

		<ContentControl x:Name="Content"
				Grid.Column="0"
				Grid.Row="0"
				DataContext="{Binding ElementName=WinUnitStyle}"
				>

			<ContentControl.Style>
				<Style TargetType="ContentControl">
					<Setter Property="HorizontalAlignment" Value="Stretch" />
					<Style.Triggers>
						<DataTrigger Binding="{Binding DialogIndex, FallbackValue='0'}" Value="0">
							<Setter Property="ContentTemplate" Value="{DynamicResource StylesSelection}" />
						</DataTrigger>
						<DataTrigger Binding="{Binding DialogIndex}" Value="1">
							<Setter Property="ContentTemplate" Value="{DynamicResource StylesOrder}" />
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</ContentControl.Style>

		</ContentControl>

	</Grid>

</Window>

