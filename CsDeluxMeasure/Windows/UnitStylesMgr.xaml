<Window x:Name="WinUnitStyle"
		x:Class="CsDeluxMeasure.Windows.UnitStylesMgr"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:local="clr-namespace:CsDeluxMeasure.Windows"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:sys="clr-namespace:System;assembly=mscorlib"
		xmlns:cs="clr-namespace:CsDeluxMeasure.Windows.Support"
		xmlns:util="clr-namespace:CsDeluxMeasure.UnitsUtil"
		xmlns:shell="clr-namespace:System.Windows.Shell;assembly=PresentationFramework"
		Title="Unit Styles Manager"
		Width="900"
		MinWidth="980"
		MaxHeight="760"
		DataContext="{Binding RelativeSource={RelativeSource Self}}"
		mc:Ignorable="d"
		FontSize="{DynamicResource FontSize.Normal}"
		Background="{DynamicResource Normal.Window.Background}"
		Foreground="White"
		ResizeMode="NoResize"
		d:Opacity="1"
		Loaded="UnitStylesMgr_Loaded"
		Closing="UnitStylesMgr_Closing"
		IsKeyboardFocusWithinChanged="UnitStylesMgr_OnIsKeyboardFocusWithinChanged"
		>
	<!--    -->
	<!--  Background="{DynamicResource Normal.Window.Background}"  -->

	<Window.Style>
		<Style TargetType="Window">
			<Setter Property="Opacity" Value="0" />
			<!-- <Setter Property="Height" Value="0"/> -->
			<Style.Triggers>

				<EventTrigger RoutedEvent="Loaded">
					<EventTrigger.Actions>
						<BeginStoryboard>
							<Storyboard>
								<DoubleAnimation
										Storyboard.TargetProperty="Opacity"
										From="0" To="1"
										BeginTime="0:0:0.3"
										Duration="0:0:0.3"
										/>
							</Storyboard>
						</BeginStoryboard>
					</EventTrigger.Actions>
				</EventTrigger>


				<!-- <DataTrigger Binding="{Binding ElementName=WinUnitStyle, Path=WinIsEnabled}" Value="True"> -->
				<!--    -->
				<!-- 	<DataTrigger.EnterActions> -->
				<!-- 		<BeginStoryboard> -->
				<!-- 			<Storyboard> -->
				<!--  ~1~ <DoubleAnimation @1@  -->
				<!--  ~1~ 		Storyboard.TargetProperty="Height" @1@  -->
				<!--  ~1~ 		From="0" @1@  -->
				<!--  ~1~ 		To="700" @1@  -->
				<!--  ~1~ 		BeginTime="0:0:0.2" @1@  -->
				<!--  ~1~ 		Duration="0:0:0.3" @1@  -->
				<!--  ~1~ 		/> @1@  -->
				<!--  <DoubleAnimation  -->
				<!--  Storyboard.TargetProperty="Opacity"  -->
				<!--  From="0" To="1"  -->
				<!--  BeginTime="0:0:0.3"  -->
				<!--  Duration="0:0:0.3"  -->
				<!--  />  -->
				<!-- 			</Storyboard> -->
				<!-- 		</BeginStoryboard> -->
				<!-- 	</DataTrigger.EnterActions> -->
				<!-- </DataTrigger> -->
			</Style.Triggers>
		</Style>

	</Window.Style>

	<!--  MaxHeight="760"  -->
	<!--  SizeToContent="Height"  -->
	<!--  IsKeyboardFocusWithinChanged="UnitStylesMgr_OnIsKeyboardFocusWithinChanged"  -->
	<!--  LocationChanged="UnitStylesMgr_LocationChanged"  -->

	<Window.Resources>

		<ResourceDictionary>
			<!--#region > L4 resource dictionaries-->
			<ResourceDictionary.MergedDictionaries>

				<ResourceDictionary Source="pack://Application:,,,/CsDeluxMeasure;component/Windows/ResourceFiles/XamlResources/MasterColorList.xaml" />
				<ResourceDictionary Source="pack://Application:,,,/CsDeluxMeasure;component/Windows/ResourceFiles/XamlResources/VisualStates.xaml" />
				<ResourceDictionary Source="pack://Application:,,,/CsDeluxMeasure;component/Windows/Skin/CyberStudioSkin.xaml" />

				<ResourceDictionary Source="pack://Application:,,,/CsDeluxMeasure;component/Windows/Support/CsExpander.xaml" />
				<ResourceDictionary Source="pack://Application:,,,/CsDeluxMeasure;component/Windows/Support/CsScrollViewer.xaml" />
				<ResourceDictionary Source="pack://Application:,,,/CsDeluxMeasure;component/Windows/Support/CsScrollBar.xaml" />
				<ResourceDictionary Source="pack://Application:,,,/CsDeluxMeasure;component/Windows/Support/CsComboBox.xaml" />
				<ResourceDictionary Source="pack://Application:,,,/CsDeluxMeasure;component/Windows/Support/CsButtons.xaml" />
				<ResourceDictionary Source="pack://Application:,,,/CsDeluxMeasure;component/Windows/Support/CsCheckBox.xaml" />


				<!-- <ResourceDictionary Source="../Windows/ResourceFiles/XamlResources/MasterColorList.xaml" /> -->
				<!-- <ResourceDictionary Source="../Windows/ResourceFiles/XamlResources/VisualStates.xaml" /> -->
				<!-- <ResourceDictionary Source="../Windows/Skin/CyberStudioSkin.xaml" /> -->
				<!-- <ResourceDictionary Source="../Windows/Support/CsExpander.xaml" /> -->
				<!-- <ResourceDictionary Source="../Windows/Support/CsScrollBar.xaml" /> -->
				<!-- <ResourceDictionary Source="../Windows/Support/CsScrollViewer.xaml" /> -->
				<!-- <ResourceDictionary Source="../Windows/Support/CsComboBox.xaml" /> -->
				<!-- <ResourceDictionary Source="../Windows/Support/CsButtons.xaml" /> -->
				<!-- <ResourceDictionary Source="../Windows/Support/CsCheckBox.xaml" /> -->

				<!-- <ResourceDictionary Source="/Windows/ResourceFiles/XamlResources/MasterColorList.xaml" /> -->
				<!-- <ResourceDictionary Source="/Windows/ResourceFiles/XamlResources/VisualStates.xaml" /> -->
				<!-- <ResourceDictionary Source="/Windows/Skin/CyberStudioSkin.xaml" /> -->
				<!-- <ResourceDictionary Source="/Windows/Support/CsExpander.xaml" /> -->
				<!-- <ResourceDictionary Source="/Windows/Support/CsScrollBar.xaml" /> -->
				<!-- <ResourceDictionary Source="/Windows/Support/CsScrollViewer.xaml" /> -->
				<!-- <ResourceDictionary Source="/Windows/Support/CsComboBox.xaml" /> -->
				<!-- <ResourceDictionary Source="/Windows/Support/CsButtons.xaml" /> -->
				<!-- <ResourceDictionary Source="/Windows/Support/CsCheckBox.xaml" /> -->

			</ResourceDictionary.MergedDictionaries>

			<!--#endregion-->

			<!--  <Style x:Key="junk1"  -->
			<!--  TargetType="Button"  -->
			<!--  >  -->
			<!-- 	<Setter Property="Tag" Value="{x:Static local:UnitStylesMgr.RIBBONFAV}"/> -->
			<!-- 	<Setter Property="Content" Value="{x:Static local:UnitStylesMgr.RIBBONFAVORITE}"/> -->
			<!-- </Style> -->

			<cs:MultiSubtractConverter x:Key="SubtractConverter" />


			<ControlTemplate x:Key="CtTextBox"
					TargetType="TextBox"
					>
				<Border x:Name="border"
						Background="{TemplateBinding Background}"
						BorderThickness="{TemplateBinding BorderThickness}"
						BorderBrush="{TemplateBinding BorderBrush}"
						SnapsToDevicePixels="True"
						>
					<ScrollViewer x:Name="PART_ContentHost"
							Focusable="false"
							HorizontalScrollBarVisibility="Hidden"
							VerticalScrollBarVisibility="Hidden"
							/>
				</Border>
			</ControlTemplate>

			<!--#region > L4 trigger styles-->

			<!--#region > L5 trigger border styles-->

			<!--  border  -->

			<!--
				config
				
				Bx00:				disabled            (default) (backgrnd)
				
				Bx11:       Bx00 + enabled		   (is enabled + not selected + not locked + not readonly)
				Bx12:       Bx11 + selected      (is enabled  + is selected + not locked + not readonly)
				Bx13:				Bx12 + locked        (not enabled + is selected + is locked + not readonly)
				Bx14:       Bx13 + editing       (is or not selected + is editing) (enabled implied)
				Bx15:       Bx13 + is good/bad   (bdr is good or is bad)
				Bx16:       Bx14 + is good/bad   (bdr is good or is bad)
				
				BG11
				BG12
				BG13
				BG14
				BG15
				
				BBM11
				BBM12
				BBM14
				BBM15
			-->



			<!--  basic - disabled value  -->
			<!--  no mouse over  -->
			<Style x:Key="Bx00"
					TargetType="Border"
					>
				<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDisabled)}" />
				<Setter Property="BorderBrush" Value="White" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="CornerRadius" Value="{StaticResource CornerRadius.Std}" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="Margin" Value="0" />
			</Style>

			<!--
				all vars
				cs:VisualStates.BgDisabled
				cs:VisualStates.BgIsEnabled
				cs:VisualStates.BgIsSel
				cs:VisualStates.BgIsLocked
				cs:VisualStates.BgIsEditing
			-->


			<!--  border  -->
			<!--  level BG1 trigger styles (Bx0 + enabled)  -->
			<!--  being enabled means it is not locked / not read only  -->
			<!--  border: background only / no border / no mouse over  -->
			<Style x:Key="BG11"
					TargetType="Border"
					BasedOn="{StaticResource Bx00}"
					>
				<Style.Triggers>
					<!--  enabled  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Tag" Value="Style BG11" />
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEnabled)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>


			<!--  level BG12 trigger styles (Bx01 + selected)  -->
			<!--  background only / no border / no mouse over  -->
			<Style x:Key="BG12"
					TargetType="Border"
					BasedOn="{StaticResource BG11}"
					>
				<Style.Triggers>

					<!--  enabled / selected  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Tag" Value="Style BG12" />
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>


			<!--  level BG13 trigger styles (BG12 + not enabled + selected + locked)  -->
			<Style x:Key="BG13"
					TargetType="Border"
					BasedOn="{StaticResource BG12}"
					>
				<Style.Triggers>

					<!--  not enabled / selected / locked  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="False" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Tag" Value="Style BG13" />
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsLocked)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>


			<!--  level BG14 trigger styles (BG13 + editing)  -->
			<!--  is focused means it is enabled / selected (I think)  -->
			<Style x:Key="BG14"
					TargetType="Border"
					BasedOn="{StaticResource BG13}"
					>
				<Style.Triggers>

					<!--  enabled / selected / editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<!-- <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
							<!-- <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
							<!-- <Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
						</MultiDataTrigger.Conditions>
						<Setter Property="Tag" Value="Style BG14" />
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditing)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>




			<!--
				all vars
				cs:VisualStates.BgDisabled
				cs:VisualStates.BgIsEnabled
				cs:VisualStates.BgIsSel
				cs:VisualStates.BgIsEditing
				
				cs:VisualStates.BdrDisabled
				cs:VisualStates.BdrIsEnabled
				cs:VisualStates.BdrIsSel
				cs:VisualStates.BdrIsEditing
				
				
				cs:VisualStates.BgIsEnabledMouseOver
				cs:VisualStates.BgIsSelMouseOver
				cs:VisualStates.BgIsEditingMouseOver
				
				cs:VisualStates.BdrIsEnabledMouseOver
				cs:VisualStates.BdrIsSelMouseOver
				cs:VisualStates.BdrIsEditingMouseOver
			-->




			<!--  level BG1 trigger styles (Bx0 + enabled)  -->
			<!--  being enabled means it is not locked / not read only  -->
			<!--  border: background & border / with mouse over  -->
			<Style x:Key="BBM11"
					TargetType="Border"
					BasedOn="{StaticResource Bx00}"
					>
				<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrDisabled)}" />
				<Setter Property="BorderThickness" Value="1" />
				<Style.Triggers>
					<!--  enabled  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Tag" Value="Style BBM11" />
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEnabled)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEnabled)}" />
					</MultiDataTrigger>

					<!--  enabled + mouse over  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Tag" Value="Style BBM11.mo" />
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEnabledMouseOver)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEnabledMouseOver)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>


			<!--  level BBM12 trigger styles (BBM11 + selected)  -->
			<Style x:Key="BBM12"
					TargetType="Border"
					BasedOn="{StaticResource BBM11}"
					>
				<Style.Triggers>

					<!--  enabled / selected  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Tag" Value="Style BBM12" />
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsSel)}" />
					</MultiDataTrigger>

					<!--  enabled / selected / mouse over  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Tag" Value="Style BBM12.mo" />
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSelMouseOver)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsSelMouseOver)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>


			<!--  level BBM13 trigger styles - does not apply  -->


			<!--  level BG14 trigger styles (BG12 + editing)  -->
			<!--  keyboardfocuswithin means it is enabled / selected (I think)  -->
			<Style x:Key="BBM14"
					TargetType="Border"
					BasedOn="{StaticResource BBM12}"
					>
				<Style.Triggers>

					<!--  enabled / selected / editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<!-- <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
							<!-- <Condition Value="True" Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" /> -->
							<!-- <Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
						</MultiDataTrigger.Conditions>
						<Setter Property="Tag" Value="Style BBM14" />
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditing)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEditing)}" />
					</MultiDataTrigger>

					<!--  enabled / selected / editing / mouse over  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
							<!-- <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
							<!-- <Condition Value="True" Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" /> -->
							<!-- <Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
						</MultiDataTrigger.Conditions>
						<Setter Property="Tag" Value="Style BBM14.mo" />
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditingMouseOver)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEditingMouseOver)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>


			<Style x:Key="BBM15"
					TargetType="Border"
					BasedOn="{StaticResource BBM12}"
					>
				<Style.Triggers>

					<DataTrigger Value="true" Binding="{Binding (cs:VisualStates.IsGoodBad), RelativeSource={RelativeSource Self}, Mode=OneWay}">
						<Setter Property="Tag" Value="Style BBM15 - good-bad = true" />
						<Setter Property="BorderBrush" Value="{StaticResource Bdr.IsGood}" />
					</DataTrigger>

					<DataTrigger Value="false" Binding="{Binding (cs:VisualStates.IsGoodBad), RelativeSource={RelativeSource Self}, Mode=OneWay}">
						<Setter Property="Tag" Value="Style BBM15 - good-bad = false" />
						<Setter Property="BorderBrush" Value="{StaticResource Bdr.IsBad}" />
					</DataTrigger>

				</Style.Triggers>
			</Style>


			<!--#endregion-->


			<!--#region > L5 trigger textblock styles-->

			<!--
				vars
				cs:VisualStates.FgDisabled="{StaticResource Cbx.Fg.IsEnabled}"
				cs:VisualStates.FgIsEnabled="{StaticResource Cbx.Fg.IsEnabled}"
				cs:VisualStates.FgIsSel="{StaticResource Cbx.Fg.IsSel}"
				cs:VisualStates.FgIsEditing="{StaticResource Cbx.Fg.IsEditg}"
				cs:VisualStates.FgIsReadOnly="{StaticResource Cbx.Fg.IsReadOnly}"
				cs:VisualStates.FgIsLocked="{StaticResource Cbx.Fg.IsLocked}"
				cs:VisualStates.FgIsEnabledMouseOver="{StaticResource Cbx.Fg.IsEnabled.MouseOver}"
				cs:VisualStates.FgIsSelMouseOver="{StaticResource Cbx.Fg.IsSel.MouseOver}"
				cs:VisualStates.FgIsEditingMouseOver="{StaticResource Cbx.Fg.IsEditg.MouseOver}"
			-->

			<!--  textblock  -->
			<!--  basic - disabled value  -->
			<Style x:Key="TblkBasic"
					TargetType="TextBlock"
					>
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
			</Style>
			<!--  textblock  -->
			<!--  level 1a trigger styles (basic + issel)  -->
			<!--  no mouse over  -->
			<Style x:Key="TblkTrigs.L1a"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkBasic}"
					>
				<!--  disabled  -->
				<!--  from root  -->
				<Style.Triggers>
					<!--  enabled / selected  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>
			<!--  textblock  -->
			<!--  level 1b trigger styles (level 1a + isenabled)  -->
			<!--  no mouse over  -->
			<Style x:Key="TblkTrigs.L1b"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkTrigs.L1a}"
					>
				<!--  disabled  -->
				<!--  from root  -->
				<Style.Triggers>
					<!--  not selected  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEnabled)}" />
					</MultiDataTrigger>


				</Style.Triggers>
			</Style>
			<!--  control (incl. textbox, button  -->
			<!--  level 2 trigger styles (L1 + iseditg)  -->
			<!--  with mouse over  -->
			<Style x:Key="TblkTrigs.L2"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkTrigs.L1b}"
					>
				<Style.Triggers>

					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>
			<!--  control (incl. textbox, button  -->
			<!--  level 4 trigger styles (L3 + islocked)  -->
			<!--  no mouse over  -->
			<Style x:Key="TblkTrigs.L3"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkTrigs.L2}"
					>
				<Style.Triggers>

					<!--  is locked  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>
			<!--  control (incl. textbox, button  -->
			<!--  level 3 trigger styles (L2 + readonly [noeditg])  -->
			<!--  no mouse over  -->
			<Style x:Key="TblkTrigs.L4"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkTrigs.L3}"
					>
				<Style.Triggers>

					<!--  read only  (i.e. editing not allowed)  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<!--#endregion-->

			<!--#region > L5 trigger control styles-->

			<!--
				vars
				cs:VisualStates.FgDisabled="{StaticResource Cbx.Fg.IsEnabled}"
				cs:VisualStates.FgIsEnabled="{StaticResource Cbx.Fg.IsEnabled}"
				cs:VisualStates.FgIsSel="{StaticResource Cbx.Fg.IsSel}"
				cs:VisualStates.FgIsEditing="{StaticResource Cbx.Fg.IsEditg}"
				cs:VisualStates.FgIsReadOnly="{StaticResource Cbx.Fg.IsReadOnly}"
				cs:VisualStates.FgIsLocked="{StaticResource Cbx.Fg.IsLocked}"
				
				cs:VisualStates.FgIsEnabledMouseOver="{StaticResource Cbx.Fg.IsEnabled.MouseOver}"
				cs:VisualStates.FgIsSelMouseOver="{StaticResource Cbx.Fg.IsSel.MouseOver}"
				cs:VisualStates.FgIsEditingMouseOver="{StaticResource Cbx.Fg.IsEditg.MouseOver}"
			-->

			<!--  control (incl. textbox, button)  -->
			<!--  basic - disabled value  -->
			<Style x:Key="CtrlBasic"
					TargetType="Control"
					>
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
			</Style>


			<!--  control (incl. textbox, button  -->
			<!--  level 1a trigger styles (basic + issel)  -->
			<!--  with mouse over  -->
			<Style x:Key="CtrlTrigs.L1a"
					TargetType="Control"
					BasedOn="{StaticResource CtrlBasic}"
					>
				<!--  disabled  -->
				<!--  from root  -->
				<Style.Triggers>

					<!--  enabled / selected  -->
					<MultiDataTrigger x:Name="CtrlTrigsL1IsSel">
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="False" Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
					</MultiDataTrigger>


					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSelMouseOver)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>
			<!--  control (incl. textbox, button  -->
			<!--  level 1b trigger styles (level 1a + isenabled)  -->
			<!--  with mouse over  -->
			<Style x:Key="CtrlTrigs.L1b"
					TargetType="Control"
					BasedOn="{StaticResource CtrlTrigs.L1a}"
					>
				<!--  disabled  -->
				<!--  from root  -->
				<Style.Triggers>

					<!--  not selected  -->
					<MultiDataTrigger x:Name="CtrlTrigsL1IsEnabled">
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="False" Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEnabled)}" />
					</MultiDataTrigger>
					<!-- removed
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" />
							<Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
							<Condition Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="false" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEnabledMouseOver)}" />
					</MultiDataTrigger>
					-->
				</Style.Triggers>
			</Style>
			<!--  control (incl. textbox, button  -->
			<!--  level 2 trigger styles (L1 + iseditg)  -->
			<!--  with mouse over  -->
			<Style x:Key="CtrlTrigs.L2"
					TargetType="Control"
					BasedOn="{StaticResource CtrlTrigs.L1b}"
					>
				<Style.Triggers>

					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
					</MultiDataTrigger>

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditingMouseOver)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>
			<!--  control (incl. textbox, button  -->
			<!--  level 4 trigger styles (L3 + islocked)  -->
			<!--  no mouse over  -->
			<Style x:Key="CtrlTrigs.L3"
					TargetType="Control"
					BasedOn="{StaticResource CtrlTrigs.L2}"
					>
				<Style.Triggers>

					<!--  is locked  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>
			<!--  control (incl. textbox, button  -->
			<!--  level 3 trigger styles (L2 + readonly [noeditg])  -->
			<!--  no mouse over  -->
			<Style x:Key="CtrlTrigs.L4"
					TargetType="Control"
					BasedOn="{StaticResource CtrlTrigs.L3}"
					>
				<Style.Triggers>

					<!--  read only  (i.e. editing not allowed)  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>


			<!--#endregion-->

			<!--#region > L5 trigger control with border styles-->

			<!--  control (control with interior border -> e.g. combobox)  -->
			<!--  basic - disabled value  -->
			<!--  mouse over colors are process within the control  -->
			<Style x:Key="CtrlWithBdrBasic"
					TargetType="Control"
					>
				<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
				<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDisabled)}" />
				<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrDisabled)}" />
				<!--  default mouse over colors  -->
				<Setter Property="cs:CsCommonAp.BgCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEnabledMouseOver)}" />
				<Setter Property="cs:CsCommonAp.FgCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEnabledMouseOver)}" />
				<Setter Property="cs:CsCommonAp.BdrCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEnabledMouseOver)}" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
			</Style>
			<!--  control (control with interior border -> e.g. combobox)  -->
			<!--  level 1a trigger styles (basic + issel)  -->
			<!--  no mouse over  -->
			<Style x:Key="CtrlWithBdrTrigs.L1a"
					TargetType="Control"
					BasedOn="{StaticResource CtrlWithBdrBasic}"
					>
				<!--  disabled  -->
				<!--  from root  -->
				<Style.Triggers>

					<!--  enabled / selected  -->
					<MultiDataTrigger x:Name="CtrlBdrTrigsL1IsSel">
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="False" Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSel)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsSel)}" />
						<Setter Property="cs:CsCommonAp.BgCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsSelMouseOver)}" />
						<Setter Property="cs:CsCommonAp.FgCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSelMouseOver)}" />
						<Setter Property="cs:CsCommonAp.BdrCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsSelMouseOver)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>
			<!--  control (control with interior border -> e.g. combobox)  -->
			<!--  level 1b trigger styles (level 1a + isenabled)  -->
			<!--  no mouse over  -->
			<Style x:Key="CtrlWithBdrTrigs.L1b"
					TargetType="Control"
					BasedOn="{StaticResource CtrlWithBdrTrigs.L1a}"
					>
				<!--  disabled  -->
				<!--  from root  -->
				<Style.Triggers>

					<!--  not selected  -->
					<MultiDataTrigger x:Name="CtrlBdrTrigsL1IsEnabled">
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="False" Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEnabled)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEnabled)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEnabled)}" />

					</MultiDataTrigger>

				</Style.Triggers>
			</Style>
			<!--  control (control with interior border -> e.g. combobox)  -->
			<!--  level 2 trigger styles (L1 + iseditg)  -->
			<!--  no mouse over  -->
			<!--  with mouse over colors  -->
			<Style x:Key="CtrlWithBdrTrigs.L2"
					TargetType="Control"
					BasedOn="{StaticResource CtrlWithBdrTrigs.L1b}"
					>
				<Style.Triggers>
					<!-- <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditing)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEditing)}" />
						<Setter Property="cs:CsCommonAp.BgCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsEditingMouseOver)}" />
						<Setter Property="cs:CsCommonAp.FgCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditingMouseOver)}" />
						<Setter Property="cs:CsCommonAp.BdrCommonMouseOver" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsEditingMouseOver)}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>
			<!--  control (control with interior border -> e.g. combobox)  -->
			<!--  level 4 trigger styles (L3 + islocked)  -->
			<!--  no added mouse over (from default)  -->
			<Style x:Key="CtrlWithBdrTrigs.L3"
					TargetType="Control"
					BasedOn="{StaticResource CtrlWithBdrTrigs.L2}"
					>
				<Style.Triggers>
					<!-- <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsLocked)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsLocked)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>
			<!--  control (control with interior border -> e.g. combobox)  -->
			<!--  level 3 trigger styles (L2 + readonly [noeditg])  -->
			<!--  no added mouse over (from default)  -->
			<Style x:Key="CtrlWithBdrTrigs.L4"
					TargetType="Control"
					BasedOn="{StaticResource CtrlWithBdrTrigs.L3}"
					>
				<Style.Triggers>
					<!-- <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True" /> -->
					<!--  is editing  -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="true" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="false" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgIsReadOnly)}" />
						<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
						<Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BdrIsReadOnly)}" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>


			<!--#endregion-->

			<!--#region > L5 trigger panel styles-->

			<!--  panel  -->
			<!--  basic - disabled value  -->
			<Style x:Key="PnlBasic"
					TargetType="Panel"
					>
				<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.BgDisabled)}" />
				<Setter Property="Margin" Value="0" />
			</Style>


			<Style x:Key="PnlEnableDisable"
					TargetType="Panel"
					>
				<Setter Property="IsEnabled" Value="False" />
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="False" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="False" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="IsEnabled" Value="True">
						</Setter>
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>


			<!--#endregion-->

			<!--#region > L5 trigger path styles-->

			<Style x:Key="PathBasic"
					TargetType="Path"
					>
				<Setter Property="Margin" Value="0" />
				<Setter Property="HorizontalAlignment" Value="Right" />
				<Setter Property="Stretch" Value="Uniform" />
				<Setter Property="VerticalAlignment" Value="Stretch" />
				<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeomDisabled)}" />
				<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgDisabled)}" />
			</Style>

			<Style x:Key="PathTrigs.VariIcons"
					TargetType="Path"
					BasedOn="{StaticResource PathBasic}"
					>

				<Style.Triggers>

					<MultiDataTrigger>
						<!--  when selected / not locked  -->
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="False" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
						<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeometryIsSel)}" />
					</MultiDataTrigger>
					<DataTrigger Binding="{Binding (cs:VisualStates.IsActivated), RelativeSource={RelativeSource Self}}" Value="True">
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
						<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeometryIsEditing)}" />
						<Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:CsPathAp.IconIsEditingMargin)}" />
						<Setter Property="Path.RenderTransform">
							<Setter.Value>
								<ScaleTransform
										ScaleX="{Binding RelativeSource={RelativeSource AncestorType={x:Type Path}}, Path=(cs:CsPathAp.IconIsEditingScaleX), FallbackValue=1.0}"
										ScaleY="{Binding RelativeSource={RelativeSource AncestorType={x:Type Path}}, Path=(cs:CsPathAp.IconIsEditingScaleX), FallbackValue=1.0}"
										/>
							</Setter.Value>
						</Setter>
					</DataTrigger>
					<MultiDataTrigger>
						<!--  when selected / not locked  -->
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}}" />
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}}" />
							<Condition Value="False" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
						<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeometryIsEditing)}" />
						<Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:CsPathAp.IconIsEditingMargin)}" />
						<Setter Property="Path.RenderTransform">
							<Setter.Value>
								<ScaleTransform
										ScaleX="{Binding RelativeSource={RelativeSource AncestorType={x:Type Path}}, Path=(cs:CsPathAp.IconIsEditingScaleX), FallbackValue=1.0}"
										ScaleY="{Binding RelativeSource={RelativeSource AncestorType={x:Type Path}}, Path=(cs:CsPathAp.IconIsEditingScaleX), FallbackValue=1.0}"
										/>
							</Setter.Value>
						</Setter>
					</MultiDataTrigger>
					<!-- <MultiDataTrigger> -->
					<!-- 	<MultiDataTrigger.Conditions> -->
					<!-- 		<Condition Value="True" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}}" /> -->
					<!-- 		<Condition Value="False" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}}" /> -->
					<!-- 		<Condition Value="True" Binding="{Binding (cs:VisualStates.IsReadOnly), RelativeSource={RelativeSource Self}}" /> -->
					<!-- 	</MultiDataTrigger.Conditions> -->
					<!-- 	<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" /> -->
					<!-- 	<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeometryIsReadOnly)}" /> -->
					<!-- </MultiDataTrigger> -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<!-- <Condition Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}}" Value="True" /> -->
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsLocked), RelativeSource={RelativeSource Self}}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Margin" Value="1" />
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
						<Setter Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IconGeometryIsLocked)}" />
						<Setter Property="Path.RenderTransform">
							<Setter.Value>
								<ScaleTransform
										ScaleX="{Binding RelativeSource={RelativeSource AncestorType={x:Type Path}}, Path=(cs:CsPathAp.IconIsLockedScaleX), FallbackValue=1.0}"
										ScaleY="{Binding RelativeSource={RelativeSource AncestorType={x:Type Path}}, Path=(cs:CsPathAp.IconIsLockedScaleX), FallbackValue=1.0}"
										/>
							</Setter.Value>
						</Setter>
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>



			<Style x:Key="PathTrigsL4.FixedIcons"
					TargetType="Path"
					BasedOn="{StaticResource PathBasic}"
					>
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding ElementName=WinUnitStyle, Path=IsSelected}" />
							<Condition Value="False" Binding="{Binding ElementName=WinUnitStyle, Path=IsEditing}" />
							<Condition Value="False" Binding="{Binding ElementName=WinUnitStyle, Path=IsReadOnly}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsSel)}" />
						<Setter Property="Data" Value="{StaticResource IconIsSelected}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding ElementName=WinUnitStyle, Path=IsSelected}" />
							<Condition Value="True" Binding="{Binding ElementName=WinUnitStyle, Path=IsEditing}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsEditing)}" />
						<Setter Property="Data" Value="{StaticResource IconHelp}" />
						<!-- <Setter Property="Data" Value="{StaticResource IconGeomIsEditing}" /> -->
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding ElementName=WinUnitStyle, Path=IsSelected}" />
							<Condition Value="False" Binding="{Binding ElementName=WinUnitStyle, Path=IsEditing}" />
							<Condition Value="True" Binding="{Binding ElementName=WinUnitStyle, Path=IsReadOnly}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsReadOnly)}" />
						<Setter Property="Data" Value="{StaticResource IconReadOnly}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding ElementName=WinUnitStyle, Path=IsSelected}" />
							<Condition Value="True" Binding="{Binding ElementName=WinUnitStyle, Path=IsLocked}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.FgIsLocked)}" />
						<Setter Property="Data" Value="{StaticResource IconIsLocked}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<!--#endregion-->

			<!--#endregion-->


			<!--#region > L4 non-trigger styles (may be dependent on trigger style)-->

			<!--#region > L5 border styles-->

			<Style x:Key="BdrRoot"
					TargetType="Border"
					>
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="CornerRadius" Value="{StaticResource CornerRadius.Std}" />
			</Style>

			<Style x:Key="BdrHeader"
					TargetType="Border"
					BasedOn="{StaticResource Bx00}"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource Header.Bg.IsSel}" />
			</Style>



			<Style x:Key="BdrUnitValTitle"
					TargetType="Border"
					BasedOn="{StaticResource Bx00}"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource UnitValTitle.Bg.IsUsed}" />
				<Setter Property="MinWidth" Value="40" />
				<Setter Property="CornerRadius" Value="{StaticResource UnitValTitle.CornerRadius}" />
			</Style>

			<Style x:Key="BdrUnitValue"
					TargetType="Border"
					BasedOn="{StaticResource Bx00}"
					>
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource UnitValue.Bg.IsNotUsed}" />
				<Setter Property="cs:VisualStates.BgIsEnabled" Value="{StaticResource UnitValue.Bg.IsUsed}" />
				<Setter Property="MinWidth" Value="40" />
				<Setter Property="CornerRadius" Value="{StaticResource UnitValue.CornerRadius}" />
			</Style>



			<Style x:Key="BdrCanEditPair"
					TargetType="Border"
					>

				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="CornerRadius" Value="{StaticResource CornerRadius.Std}" />
				<Style.Triggers>

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
							<Condition Value="True" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="BorderBrush" Value="White" />
					</MultiDataTrigger>

				</Style.Triggers>

			</Style>

			<Style x:Key="BdrCanEditTitle"
					TargetType="Border"
					BasedOn="{StaticResource BG14}"
					>
				<Setter Property="CornerRadius" Value="{StaticResource Title.CornerRadius}" />

				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource TitleCanEdit.Bg.Disabled}" />
				<Setter Property="cs:VisualStates.BgIsEnabled" Value="{StaticResource TitleCanEdit.Bg.IsEnabled}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource TitleCanEdit.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource TitleCanEdit.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource TitleCanEdit.Bg.IsLocked}" />

			</Style>

			<Style x:Key="BdrEditStatus"
					TargetType="Border"
					BasedOn="{StaticResource BBM14}"
					>
				<Style.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
						<Setter Property="cs:VisualStates.IsEditing" Value="True" />
					</DataTrigger>

					<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True">
						<Setter Property="cs:VisualStates.IsActivated" Value="True" />
					</DataTrigger>

				</Style.Triggers>
			</Style>


			<Style x:Key="BdrCanEditText"
					TargetType="Border"
					BasedOn="{StaticResource BdrEditStatus}"
					>
				<Setter Property="CornerRadius" Value="{StaticResource Text.CornerRadius}" />
				<Setter Property="BorderThickness" Value="0" />

				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource CanEdit.Bg.IsEnabled}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource CanEdit.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsEnabled" Value="{StaticResource CanEdit.Bg.IsEnabled}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource CanEdit.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource CanEdit.Bg.IsLocked}" />

				<Setter Property="cs:VisualStates.BdrDisabled" Value="{StaticResource Action2.Bdr.Disabled}" />
				<Setter Property="cs:VisualStates.BdrIsEnabled" Value="{StaticResource Action2.Bdr.IsEnabled}" />
				<Setter Property="cs:VisualStates.BdrIsSel" Value="{StaticResource Action2.Bdr.IsSel}" />
				<Setter Property="cs:VisualStates.BdrIsEditing" Value="{StaticResource Action2.Bdr.IsEditg}" />
				<Setter Property="cs:VisualStates.BdrIsLocked" Value="{StaticResource Action2.Bdr.IsLocked}" />

				<Setter Property="cs:VisualStates.BgIsEnabledMouseOver" Value="{StaticResource Action2.Bg.IsEnabled.MouseOver}" />
				<Setter Property="cs:VisualStates.BgIsSelMouseOver" Value="{StaticResource Action2.Bg.IsSel.MouseOver}" />
				<Setter Property="cs:VisualStates.BgIsEditingMouseOver" Value="{StaticResource Action2.Bg.IsEditg.MouseOver}" />

				<Setter Property="cs:VisualStates.BdrIsEnabledMouseOver" Value="{StaticResource Action2.Bdr.IsEnabled.MouseOver}" />
				<Setter Property="cs:VisualStates.BdrIsSelMouseOver" Value="{StaticResource Action2.Bdr.IsSel.MouseOver}" />
				<Setter Property="cs:VisualStates.BdrIsEditingMouseOver" Value="{StaticResource Action2.Bdr.IsEditg.MouseOver}" />
			</Style>

			<Style x:Key="BdrCanEditTextPlusGoodBad"
					TargetType="Border"

			>
				<Setter Property="CornerRadius" Value="{StaticResource CornerRadius.Tbx}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="BorderBrush" Value="Transparent" />

				<Style.Triggers>

					<DataTrigger Value="true" Binding="{Binding (cs:VisualStates.IsGoodBad), RelativeSource={RelativeSource Self}, Mode=OneWay}">
						<Setter Property="Tag" Value="Style BdrCanEditTextPlusGoodBad - good-bad = true" />
						<Setter Property="BorderBrush" Value="{StaticResource Bdr.IsGood}" />
					</DataTrigger>

					<DataTrigger Value="false" Binding="{Binding (cs:VisualStates.IsGoodBad), RelativeSource={RelativeSource Self}, Mode=OneWay}">
						<Setter Property="Tag" Value="Style BdrCanEditTextPlusGoodBad - good-bad = false" />
						<Setter Property="BorderBrush" Value="{StaticResource Bdr.IsBad}" />
					</DataTrigger>

				</Style.Triggers>

			</Style>




			<Style x:Key="BdrShowHereCkbx"
					TargetType="Border"
					BasedOn="{StaticResource BdrEditStatus}"
					>
				<Setter Property="Margin" Value="0,2,0,0" />

				<Setter Property="cs:VisualStates.GenericThickness" Value="{StaticResource Action2.BorderThk}" />
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource Action2.Bg.Disabled}" />
				<Setter Property="cs:VisualStates.BgIsEnabled" Value="{StaticResource Action2.Bg.IsEnabled}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource Action2.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource Action2.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BgIsLocked" Value="{StaticResource Action2.Bg.IsLocked}" />

				<Setter Property="cs:VisualStates.BdrDisabled" Value="{StaticResource Action2.Bdr.Disabled}" />
				<Setter Property="cs:VisualStates.BdrIsEnabled" Value="{StaticResource Action2.Bdr.IsEnabled}" />
				<Setter Property="cs:VisualStates.BdrIsSel" Value="{StaticResource Action2.Bdr.IsSel}" />
				<Setter Property="cs:VisualStates.BdrIsEditing" Value="{StaticResource Action2.Bdr.IsEditg}" />
				<Setter Property="cs:VisualStates.BdrIsLocked" Value="{StaticResource Action2.Bdr.IsLocked}" />

				<Setter Property="cs:VisualStates.BgIsEnabledMouseOver" Value="{StaticResource Action2.Bg.IsEnabled.MouseOver}" />
				<Setter Property="cs:VisualStates.BgIsSelMouseOver" Value="{StaticResource Action2.Bg.IsSel.MouseOver}" />
				<Setter Property="cs:VisualStates.BgIsEditingMouseOver" Value="{StaticResource Action2.Bg.IsEditg.MouseOver}" />

				<Setter Property="cs:VisualStates.BdrIsEnabledMouseOver" Value="{StaticResource Action2.Bdr.IsEnabled.MouseOver}" />
				<Setter Property="cs:VisualStates.BdrIsSelMouseOver" Value="{StaticResource Action2.Bdr.IsSel.MouseOver}" />
				<Setter Property="cs:VisualStates.BdrIsEditingMouseOver" Value="{StaticResource Action2.Bdr.IsEditg.MouseOver}" />
			</Style>



			<Style x:Key="BdrValEntryBase"
					TargetType="Border"
					BasedOn="{StaticResource BBM15}"
					>
				<Style.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True">
						<Setter Property="cs:VisualStates.IsEditing" Value="True" />
					</DataTrigger>

					<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True">
						<Setter Property="cs:VisualStates.IsActivated" Value="True" />
					</DataTrigger>

				</Style.Triggers>
			</Style>



			<Style x:Key="BdrValEntry"
					TargetType="Border"
					BasedOn="{StaticResource BdrValEntryBase}"
					>

				<Setter Property="CornerRadius" Value="{StaticResource CornerRadius.Std}" />

				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="cs:VisualStates.BdrDisabled" Value="{StaticResource ValEntry.Bdr.Disabled}" />
				<Setter Property="cs:VisualStates.BdrIsEnabled" Value="{StaticResource ValEntry.Bdr.IsEnabled}" />
				<Setter Property="cs:VisualStates.BdrIsSel" Value="{StaticResource ValEntry.Bdr.IsSel}" />
				<Setter Property="cs:VisualStates.BdrIsEditing" Value="{StaticResource ValEntry.Bdr.IsEditg}" />
				<Setter Property="cs:VisualStates.BgDisabled" Value="{StaticResource ValEntry.Bg.Disabled}" />
				<Setter Property="cs:VisualStates.BgIsEnabled" Value="{StaticResource ValEntry.Bg.IsEnabled}" />
				<Setter Property="cs:VisualStates.BgIsSel" Value="{StaticResource ValEntry.Bg.IsSel}" />
				<Setter Property="cs:VisualStates.BgIsEditing" Value="{StaticResource ValEntry.Bg.IsEditg}" />
				<Setter Property="cs:VisualStates.BdrIsEnabledMouseOver" Value="{StaticResource ValEntry.Bdr.IsEnabled.MouseOver}" />
				<Setter Property="cs:VisualStates.BdrIsSelMouseOver" Value="{StaticResource ValEntry.Bdr.IsSel.MouseOver}" />
				<Setter Property="cs:VisualStates.BdrIsEditingMouseOver" Value="{StaticResource ValEntry.Bdr.IsEditg.MouseOver}" />
				<Setter Property="cs:VisualStates.BgIsEnabledMouseOver" Value="{StaticResource ValEntry.Bg.IsEnabled.MouseOver}" />
				<Setter Property="cs:VisualStates.BgIsSelMouseOver" Value="{StaticResource ValEntry.Bg.IsSel.MouseOver}" />
				<Setter Property="cs:VisualStates.BgIsEditingMouseOver" Value="{StaticResource ValEntry.Bg.IsEditg.MouseOver}" />

			</Style>



			<!--#endregion-->

			<!--#region > L5 textblock styles-->

			<Style x:Key="TblkRootL1aTrigs"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkTrigs.L1a}"
					>
			</Style>

			<Style x:Key="TblkRoot"
					TargetType="TextBlock"
					>
				<Setter Property="Padding" Value="0" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
			</Style>

			<Style x:Key="TblkHeader"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkRoot}"
					>
				<Setter Property="Foreground" Value="{StaticResource Header.Fg.IsSel}" />
				<Setter Property="Padding" Value="5,0,0,2" />

			</Style>

			<Style x:Key="TblkHeaderL1aTrigs"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkRootL1aTrigs}"
					>
				<Setter Property="Padding" Value="5,0,0,2" />

			</Style>

			<Style x:Key="TblkUnitValTitle"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkRoot}"
					>
				<Setter Property="Foreground" Value="{StaticResource UnitValTitle.Fg.IsUsed}" />
				<Setter Property="Padding" Value="8,2,9,4" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="VerticalAlignment" Value="Center" />
			</Style>

			<Style x:Key="TblkUnitValue"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkRoot}"
					>
				<Setter Property="Foreground" Value="{StaticResource UnitValue.Fg.IsUsed}" />
				<Setter Property="Padding" Value="8,2,9,4" />
				<Setter Property="HorizontalAlignment" Value="Center" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="TextAlignment" Value="Center" />
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Foreground" Value="{StaticResource UnitValue.Fg.IsNotUsed}" />
					</Trigger>
				</Style.Triggers>
			</Style>


			<!--#region > text block styles with triggers-->

			<Style x:Key="TblkTrigsL3CanEditTitle"
					TargetType="TextBlock"
					BasedOn="{StaticResource TblkTrigs.L3}"
					>
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource TitleCanEdit.Fg.Disabled}" />
				<Setter Property="cs:VisualStates.FgIsEnabled" Value="{StaticResource TitleCanEdit.Fg.IsEnabled}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource TitleCanEdit.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource TitleCanEdit.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource TitleCanEdit.Fg.IsReadOnly}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource TitleCanEdit.Fg.IsLocked}" />
			</Style>

			<!--#endregion-->

			<!--#endregion-->

			<!--#region > L5 textbox styles-->

			<!--  new unit style entry text boxes  -->
			<Style x:Key="TbxEditable"
					TargetType="TextBox"
					BasedOn="{StaticResource CtrlTrigs.L3}">
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="CaretBrush" Value="White" />
				<Setter Property="Cursor" Value="IBeam" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="5,0,5,3" />
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="Template" Value="{StaticResource CtTextBox}" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
			</Style>


			<!--#region > text box styles with triggers-->

			<!-- <Style x:Key="TbxTrigsL3CanEditTextBase" -->
			<!-- 		TargetType="TextBox" -->
			<!-- 		BasedOn="{StaticResource CtrlTrigs.L3}" -->
			<!-- 		> -->
			<!-- 	<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource CanEdit.Fg.Disabled}" /> -->
			<!-- 	<Setter Property="cs:VisualStates.FgIsEnabled" Value="{StaticResource CanEdit.Fg.IsEnabled}" /> -->
			<!-- 	<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource CanEdit.Fg.IsSel}" /> -->
			<!-- 	<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource CanEdit.Fg.IsEditg}" /> -->
			<!-- 	<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource CanEdit.Fg.IsReadOnly}" /> -->
			<!-- 	<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource CanEdit.Fg.IsLocked}" /> -->
			<!-- 	~1~ <Setter Property="cs:VisualStates.DoesMouseOver" Value="False" /> @1@ -->
			<!-- </Style> -->
			<!-- -->
			<!-- <Style x:Key="TbxTrigsL3CanEditTextBaseMo" -->
			<!-- 		TargetType="TextBox" -->
			<!-- 		BasedOn="{StaticResource TbxTrigsL3CanEditTextBase}" -->
			<!-- 		> -->
			<!-- 	<Setter Property="cs:VisualStates.FgIsEnabledMouseOver" Value="{StaticResource CanEdit.Fg.IsEnabled.MouseOver}" /> -->
			<!-- 	<Setter Property="cs:VisualStates.FgIsSelMouseOver" Value="{StaticResource CanEdit.Fg.IsSel.MouseOver}" /> -->
			<!-- 	<Setter Property="cs:VisualStates.FgIsEditingMouseOver" Value="{StaticResource CanEdit.Fg.IsEditing.MouseOver}" /> -->
			<!-- 	~1~ <Setter Property="cs:VisualStates.DoesMouseOver" Value="True" /> @1@ -->
			<!-- </Style> -->


			<Style x:Key="TbxTrigsL3CanEditText"
					TargetType="TextBox"
					BasedOn="{StaticResource CtrlTrigs.L3}"
					>
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="CaretBrush" Value="White" />
				<Setter Property="Cursor" Value="IBeam" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="Margin" Value="0,0,0,0" />
				<Setter Property="Padding" Value="5,0,5,3" />
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="Template" Value="{StaticResource CtTextBox}" />
				<Setter Property="VerticalContentAlignment" Value="Center" />

				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource CanEdit.Fg.Disabled}" />
				<Setter Property="cs:VisualStates.FgIsEnabled" Value="{StaticResource CanEdit.Fg.IsEnabled}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource CanEdit.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource CanEdit.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource CanEdit.Fg.IsReadOnly}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource CanEdit.Fg.IsLocked}" />

				<Setter Property="cs:VisualStates.FgIsEnabledMouseOver" Value="{StaticResource CanEdit.Fg.IsEnabled.MouseOver}" />
				<Setter Property="cs:VisualStates.FgIsSelMouseOver" Value="{StaticResource CanEdit.Fg.IsSel.MouseOver}" />
				<Setter Property="cs:VisualStates.FgIsEditingMouseOver" Value="{StaticResource CanEdit.Fg.IsEditing.MouseOver}" />
			</Style>



			<Style x:Key="TbxEditableEx"
					TargetType="TextBox"
					BasedOn="{StaticResource TbxEditable}"
					>
				<Style.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IsModified)}" Value="True">
						<Setter Property="Background" Value="DarkRed" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<!--#endregion-->

			<!--#region > L5 scrollviewer styles-->

			<!--  listbox scrollviewer overrides  -->
			<Style x:Key="SvStyle"
					TargetType="ScrollViewer"
					>
				<Setter Property="Template" Value="{DynamicResource CsScrollViewerCt}" />
				<Setter Property="cs:CsScrollBarAp.ScrollBarWidth" Value="12" />
				<Setter Property="cs:CsScrollBarAp.ThumbCornerRadius" Value="3" />
				<Setter Property="cs:CsScrollBarAp.RepeatButtonLength" Value="12" />
				<Setter Property="cs:CsScrollBarAp.TrackWidth" Value="5" />
				<Setter Property="cs:CsScrollBarAp.RepeatButtonIconGirth" Value="6" />
				<Setter Property="cs:CsScrollBarAp.RepeatButtonIconLength" Value="10" />
				<Setter Property="cs:CsScrollBarAp.VertBorderThickness" Value="0,0,0,0" />
				<Setter Property="cs:CsScrollBarAp.VertBorderColor">
					<Setter.Value>
						<SolidColorBrush Color="{StaticResource Blue.350}" />
					</Setter.Value>
				</Setter>
				<Setter Property="cs:CsScrollBarAp.HorizBorderThickness" Value="0,0,0,0" />
				<Setter Property="cs:CsScrollBarAp.HorizBorderColor">
					<Setter.Value>
						<SolidColorBrush Color="{StaticResource Blue.350}" />
					</Setter.Value>
				</Setter>
				<Setter Property="cs:CsScrollViewerAp.CornerRectBkgBrush">
					<Setter.Value>
						<SolidColorBrush Color="{StaticResource Gray.150}" />
					</Setter.Value>
				</Setter>
			</Style>


			<!--#endregion-->

			<!--#endregion-->

			<!--#region > L5 path styles-->

			<Style x:Key="PathCanEditText.Icon1"
					TargetType="Path"
					BasedOn="{StaticResource PathTrigs.VariIcons}"
					>
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Data" Value="{StaticResource IconIsSelected}" />
				<Setter Property="cs:VisualStates.FgDisabled" Value="{StaticResource Action1.Fg.IsEnabled}" />
				<Setter Property="cs:VisualStates.FgIsEnabled" Value="{StaticResource Action1.Fg.IsEnabled}" />
				<Setter Property="cs:VisualStates.FgIsSel" Value="{StaticResource Action1.Fg.IsSel}" />
				<Setter Property="cs:VisualStates.FgIsEditing" Value="{StaticResource Action1.Fg.IsEditg}" />
				<Setter Property="cs:VisualStates.FgIsReadOnly" Value="{StaticResource Action1.Fg.IsReadOnly}" />
				<Setter Property="cs:VisualStates.FgIsLocked" Value="{StaticResource Action1.Fg.IsLocked}" />

				<Setter Property="cs:VisualStates.IconGeometryIsSel" Value="{StaticResource IconIsSelected}" />
				<Setter Property="cs:VisualStates.IconGeometryIsEditing" Value="{StaticResource IconHelp}" />
				<Setter Property="cs:VisualStates.IconGeometryIsReadOnly" Value="{StaticResource IconReadOnly}" />
				<Setter Property="cs:VisualStates.IconGeometryIsLocked" Value="{StaticResource IconIsLocked}" />

			</Style>
				<!-- <Setter Property="cs:CsPathAp.IconIsEditingScaleX" Value="1.0" /> -->

			<Style x:Key="PathClearText.Icon"
					TargetType="Path"
					>
				<Setter Property="Margin" Value="0" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Fill" Value="White" />
				<Setter Property="Stretch" Value="Uniform" />
				<Setter Property="Data" Value="{StaticResource IconClearText}" />

			</Style>

			<Style x:Key="PathAddStyleEditHelp.Icon"
					TargetType="Path"
					>
				<Setter Property="Margin" Value="2.5" />
				<Setter Property="Fill" Value="White" />
				<Setter Property="Stretch" Value="Uniform" />
				<Setter Property="Data" Value="{StaticResource IconHelp}" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="HorizontalAlignment" Value="Center" />
			</Style>


			<!--#endregion-->

			<!--#region > L5 button styles-->

			<Style x:Key="BtnIconBase"
					TargetType="Button"
					>
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="VerticalAlignment" Value="Stretch" />
				<Setter Property="Template" Value="{StaticResource Btn.Ct.Stealth}" />
			</Style>


			<Style x:Key="BtnIconClearText"
					TargetType="Button"
					BasedOn="{StaticResource BtnIconBase}"
					>
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Padding" Value="1,3.5,0,2.5" />
				<Setter Property="Width" Value="{StaticResource IconClrTextWidth}" />
				<Setter Property="Visibility" Value="Collapsed" />
				<Setter Property="cs:CsButtons.ButtonCornerRadius" Value="{StaticResource CornerRadius.Std}" />
				<Style.Triggers>
					<DataTrigger Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}}" Value="True">
						<Setter Property="Visibility" Value="Visible" />
					</DataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{StaticResource CanEdit.Icon.Bg.IsEditg.Mo}" />
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>


			<Style x:Key="BtnIconEditStatus"
					TargetType="Button"
					BasedOn="{StaticResource BtnIconBase}"
					>
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="Padding" Value="0,3,1,3" />
				<Setter Property="cs:CsButtons.ButtonCornerRadius" Value="6,5.5,5.5,6" />
				<Style.Triggers>
					<!-- <MultiDataTrigger> -->
					<!-- 	<MultiDataTrigger.Conditions> -->
					<!-- 		<Condition Value="True" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" /> -->
					<!-- 		<Condition Value="True" Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}}" /> -->
					<!-- 		<Condition Value="False" Binding="{Binding Ustyle.IsLocked}" /> -->
					<!-- 	</MultiDataTrigger.Conditions> -->
					<!-- 	<Setter Property="Background" Value="{StaticResource CanEdit.Icon.Bg.IsEditg.Mo}" /> -->
					<!-- </MultiDataTrigger> -->

					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Value="True" Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
							<Condition Value="True" Binding="{Binding (cs:VisualStates.IsSelected), RelativeSource={RelativeSource Self}}" />
							<Condition Value="False" Binding="{Binding Ustyle.IsLocked}" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" Value="{StaticResource CanEdit.Icon.Bg.IsEditg.Mo}" />
						<Setter Property="IsEnabled" Value="True" />
					</MultiDataTrigger>

				</Style.Triggers>
			</Style>


			<Style x:Key="BtnValEntryEditHelp"
					TargetType="Button"
					BasedOn="{StaticResource BtnIconBase}"
					>
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="cs:CsButtons.ButtonCornerRadius" Value="0,5.5,5.5,0" />
				<Setter Property="Visibility" Value="Collapsed" />
				<Setter Property="Foreground" Value="{StaticResource ValEntry.BtnClr.Fg.IsEditg}" />

				<Style.Triggers>
					<!--  true  -->
					<DataTrigger Value="true" Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IsEditing)}">
						<Setter Property="Visibility" Value="Visible" />
					</DataTrigger>
					<!--  true  -->
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="{StaticResource ValEntry.BtnClr.Bg.IsEditg}" />
						<Setter Property="Visibility" Value="Visible" />
					</Trigger>
					<!--  true  -->
					<DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.IsActivated)}">
						<Setter Property="Visibility" Value="Visible" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="BdrAddStyleClrTextIcon"
					TargetType="Button"
					>
				<Setter Property="Content" Value="&#xE106;" />
				<Setter Property="HorizontalAlignment" Value="Stretch" />
				<Setter Property="FontFamily" Value="Segoe UI Symbol" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Normal}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Padding" Value="1,0,1,0" />
				<Setter Property="Template" Value="{StaticResource Btn.Ct.Stealth}" />
				<Setter Property="Visibility" Value="Collapsed" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Foreground" Value="{StaticResource ValEntry.BtnClr.Fg.IsEditg}" />
				<Style.Triggers>
					<!--  true  -->
					<DataTrigger Value="True" Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}}">
						<Setter Property="Visibility" Value="Visible" />
					</DataTrigger>
					<!--  true  -->
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Background" Value="{StaticResource ValEntry.BtnClr.Bg.IsEditg}" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<!--#endregion-->

			<!--#region > L5 popup styles-->

			<Style x:Key="PuBase"
					TargetType="Popup"
					>
				<Setter Property="AllowsTransparency" Value="True" />
				<Setter Property="Margin" Value="10" />
				<Setter Property="HorizontalAlignment" Value="Right" />
				<Setter Property="Focusable" Value="False" />
				<Setter Property="HorizontalOffset" Value="4" />
				<Setter Property="Placement" Value="Bottom" />
				<Setter Property="VerticalOffset" Value="2" />
				<Setter Property="StaysOpen" Value="True" />
				<Setter Property="PopupAnimation" Value="Scroll" />
			</Style>


			<!--#region popup: edit options-->

			<sys:Double x:Key="IconHeight">22</sys:Double>

			<GridLength x:Key="ColWidthEditOps">*</GridLength>
			<GridLength x:Key="ColWidthEditOpsBtw">12</GridLength>

			<Style x:Key="PuBtnEditOps"
					TargetType="Button"
					>
				<Setter Property="Foreground" Value="{StaticResource EditBar.Fg}" />
				<Setter Property="HorizontalAlignment" Value="Center" />
				<Setter Property="VerticalAlignment" Value="Bottom" />
				<Setter Property="BorderBrush" Value="{StaticResource EditBar.Fg}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="Margin" Value="0,2,0,2" />
				<Setter Property="Height" Value="{StaticResource IconHeight}" />
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="True">
						<Setter Property="Foreground" Value="{StaticResource EditBar.Path.Fill.MouseOver}" />
						<Setter Property="Background" Value="{StaticResource EditBar.Btn.Bg.MouseOver}" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="PuPathEditOps"
					TargetType="Path"
					>
				<Setter Property="HorizontalAlignment" Value="Right" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Stretch" Value="Uniform" />
				<Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, Path=Foreground}">
				</Setter>
				<!-- <Setter Property="Fill" Value="{StaticResource EditBar.Path.Fill}" /> -->
				<Setter Property="Effect">
					<Setter.Value>
						<DropShadowEffect
								BlurRadius="5"
								ShadowDepth="7"
								/>
					</Setter.Value>
				</Setter>
				<!-- <Style.Triggers> -->
				<!-- 	<Trigger Property="IsMouseOver" Value="True"> -->
				<!-- 		<Setter Property="Fill" Value="{StaticResource EditBar.Path.Fill.MouseOver}"/> -->
				<!-- 	</Trigger> -->
				<!-- </Style.Triggers> -->
			</Style>

			<Style x:Key="PuTblkEditOps"
					TargetType="TextBlock"
					>
				<Setter Property="Visibility" Value="Collapsed" />
				<Setter Property="HorizontalAlignment" Value="Right" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="Margin" Value="0,-7,0,0" />
				<Setter Property="FontSize" Value="{StaticResource FontSize.Smaller}" />
				<Setter Property="Foreground">
					<Setter.Value>
						<SolidColorBrush Color="#66FFFFFF" />
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="PuPnlEditOps"
					TargetType="Panel"
					>

				<Setter Property="VerticalAlignment" Value="Bottom" />
				<Setter Property="HorizontalAlignment" Value="Left" />
				<Setter Property="Margin" Value="0" />
			</Style>



			<!--#endregion-->

			<!--#endregion-->

			<Style x:Key="CkbxDpLeft"
					TargetType="CheckBox"
					BasedOn="{StaticResource Lv1.CheckboxStyle2}"
					>
				<Setter Property="DockPanel.Dock" Value="Left">
				</Setter>
				<Setter Property="Height" Value="14" />
				<Setter Property="Margin" Value="0,0,0,0" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="FontSize" Value="11" />
				<Setter Property="Foreground" Value="White" />
				<Setter Property="HorizontalAlignment" Value="Left" />

				<Setter Property="cs:CsCheckBoxAp.CheckBoxBoxSize" Value="12" />
				<Setter Property="cs:CsCheckBoxAp.CheckBoxContentMargin" Value="2,-1,0,1" />
				<Setter Property="cs:CsCheckBoxAp.CheckBoxCheckMargin" Value="-2" />
				<Setter Property="cs:CsCheckBoxAp.OptionMarkFillBrush" Value="red" />
				<Setter Property="cs:CsCheckBoxAp.IndeterminantMarkFillBrush" Value="red" />
			</Style>

			<!--#endregion-->


			<!--#region > L4 dt validation templates-->
			<ControlTemplate x:Key="CtValidationName">
				<StackPanel Orientation="Vertical">
					<!-- <TextBlock Foreground="Red" FontSize="20">!</TextBlock> -->
					<Border
							CornerRadius="0"
							BorderBrush="Red"
							BorderThickness="0,0,0,5"
							>
						<AdornedElementPlaceholder />
					</Border>
					<Border
							Padding="4,1,4,3"
							Background="WhiteSmoke"
							BorderBrush="OrangeRed"
							CornerRadius="6"
							BorderThickness="1,0,1,1"
							>
						<TextBlock
								Foreground="Black"
								TextAlignment="Center"
								Text="This name does meet the requirements"
								/>
					</Border>
					<!--  Text="{Binding ErrorContent, FallbackValue='Name provided is no good', TargetNullValue='Name provided is not good'}"  -->
				</StackPanel>
			</ControlTemplate>

			<!--#endregion-->

			<!--#region > L4 dt so ribbon  (DtSoRibbonOrder)-->

			<DataTemplate x:Key="DtSoRibbonOrder">

				<DockPanel x:Name="DpRibbontOrder"
						VerticalAlignment="Top"
						>

					<Border x:Name="BdrRoHeader"
							DockPanel.Dock="Top"
							Margin="0,0,0,3"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Top"
							Style="{StaticResource BdrHeader}"
							>
						<TextBlock
								FontSize="{StaticResource FontSize.XLarge}"
								Text="Style Order - Ribbon List"
								Style="{StaticResource TblkHeader}"
								/>
					</Border>

				</DockPanel>

			</DataTemplate>

			<!--#endregion-->

			<!--#region > L4 dt so dialog left  (DtSoDlxMeasureLeftOrder)-->

			<DataTemplate x:Key="DtSoDlxMeasureLeftOrder">

				<DockPanel x:Name="DpDlxMeasureLeftOrder">

					<Border x:Name="BdrRoHeader"
							DockPanel.Dock="Top"
							Margin="0,0,0,3"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Top"
							Style="{StaticResource BdrHeader}"
							>
						<TextBlock
								FontSize="{StaticResource FontSize.XLarge}"
								Text="Style Order - Delux Measure - Left"
								Style="{StaticResource TblkHeader}"
								/>
					</Border>

				</DockPanel>

			</DataTemplate>

			<!--#endregion-->

			<!--#region > L4 dt so dialog right  (DtSoDlxMeasureRightOrder)-->

			<DataTemplate x:Key="DtSoDlxMeasureRightOrder">

				<DockPanel x:Name="DpDlxMeasureRightOrder">

					<Border x:Name="BdrRoHeader"
							DockPanel.Dock="Top"
							Margin="0,0,0,3"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Top"
							Style="{StaticResource BdrHeader}"
							>
						<TextBlock
								FontSize="{StaticResource FontSize.XLarge}"
								Text="Style Order - Delux Measure - Right"
								Style="{StaticResource TblkHeader}"
								/>
					</Border>

				</DockPanel>

			</DataTemplate>

			<!--#endregion-->

			<!--#region > L4 dt so dialog control - style order (DtDlgCtrlStyleOrder)-->

			<DataTemplate x:Key="DtDlgCtrlStyleOrder">

				<StackPanel x:Name="DialogControls"
						DockPanel.Dock="Bottom"
						Margin="0,0,0,0"
						HorizontalAlignment="Right"
						VerticalAlignment="Bottom"
						Orientation="Horizontal"
						>

					<Button x:Name="BtnSoReset"
							Content="Reset"
							Margin="10,0,0,0"
							HorizontalAlignment="Right"
							Style="{StaticResource Btn.Std}"
							/>


					<Button x:Name="BtnSoCancel"
							Content="Cancel"
							Margin="10,0,0,0"
							HorizontalAlignment="Right"
							Style="{StaticResource Btn.Std}"
							/>


					<Button x:Name="BtnSoApply"
							Content="Apply"
							Margin="10,0,0,0"
							HorizontalAlignment="Right"
							Style="{StaticResource Btn.Std}"
							/>

					<Button x:Name="BtnSoDone"
							Content="Done"
							Margin="10,0,0,0"
							HorizontalAlignment="Right"
							Style="{StaticResource Btn.Std}"
							/>


				</StackPanel>

			</DataTemplate>

			<!--#endregion-->

			<!--#region > L4 popup CC (ccEditOptPopup-->


			<DockPanel x:Key="DpChkBxs"
					DockPanel.Dock="Top"
					Margin="2,0,2,3"
					x:Shared="False"
					>
				<StackPanel
						DockPanel.Dock="Top"
						Orientation="Horizontal"
						>
					<CheckBox
							Content="Enb?"
							d:IsChecked="True"
							IsChecked="{Binding IsEnabled}"
							Style="{StaticResource CkbxDpLeft}"
							/>

					<CheckBox
							Content="Foc?"
							IsChecked="{Binding Path=IsFocused, Mode=OneWay}"
							Style="{StaticResource CkbxDpLeft}"
							/>


					<CheckBox
							Content="KbF?"
							IsChecked="{Binding Path=IsKeyboardFocused, Mode=OneWay}"
							Style="{StaticResource CkbxDpLeft}"
							/>

					<CheckBox
							Content="Mo?"
							IsChecked="{Binding Path=IsMouseOver, Mode=OneWay}"
							Style="{StaticResource CkbxDpLeft}"
							/>
				</StackPanel>

				<StackPanel
						DockPanel.Dock="Bottom"
						Orientation="Horizontal"
						>
					<CheckBox
							Content="Chg?"
							IsChecked="{Binding Path=(cs:VisualStates.IsModified)}"
							Style="{StaticResource CkbxDpLeft}"
							/>

					<CheckBox
							Content="Edtg?"
							IsChecked="{Binding Path=(cs:VisualStates.IsEditing)}"
							Style="{StaticResource CkbxDpLeft}"
							/>

					<CheckBox
							Content="Sel?"
							IsChecked="{Binding Path=(cs:VisualStates.IsSelected)}"
							Style="{StaticResource CkbxDpLeft}"
							/>

					<CheckBox
							Content="Act?"
							IsChecked="{Binding Path=(cs:VisualStates.IsActivated)}"
							Style="{StaticResource CkbxDpLeft}"
							/>
				</StackPanel>

			</DockPanel>


			<ContentControl x:Key="CcEditOptsPopup"
					x:Shared="False"
					Focusable="False"
					>
				<ContentControl.ContentTemplate>
					<DataTemplate x:Name="DtEditOpsPopup">

						<Border x:Name="BdrPopup"
								Margin="0,0,0,0"
								Padding="0,0,0,0"
								BorderThickness="0"
								CornerRadius="12,12,12,12"
								HorizontalAlignment="Right"
								Background="{StaticResource EditBar.Bdr.Bg}"
								DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type Popup}}}"
								>

							<Grid
									Margin="0,0,0,0"
									HorizontalAlignment="Right"
									VerticalAlignment="Stretch"
									cs:CustomProperties.GenericPopupOne="{Binding (cs:CustomProperties.GenericPopupOne)}"
									cs:CustomProperties.GenericObjectOne="{Binding (cs:CustomProperties.GenericObjectOne)}"
									>

								<!--  cs:CustomProperties.GenericPopupOne="{Binding (cs:CustomProperties.GenericPopupOne)}"  -->

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="12" />
									<ColumnDefinition Width="{StaticResource ColWidthEditOps}" />
									<ColumnDefinition Width="{StaticResource ColWidthEditOpsBtw}" />
									<ColumnDefinition Width="{StaticResource ColWidthEditOps}" />
									<ColumnDefinition Width="{StaticResource ColWidthEditOpsBtw}" />
									<ColumnDefinition Width="{StaticResource ColWidthEditOps}" />
									<ColumnDefinition Width="{StaticResource ColWidthEditOpsBtw}" />
									<ColumnDefinition Width="{StaticResource ColWidthEditOps}" />
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="{StaticResource ColWidthEditOps}" />
									<ColumnDefinition Width="{StaticResource ColWidthEditOpsBtw}" />
								</Grid.ColumnDefinitions>


								<StackPanel x:Name="SpEditOpsHelp"
										Grid.Column="1"
										Orientation="Vertical"
										Style="{StaticResource PuPnlEditOps}"
										>

									<Button x:Name="BtnEditOpsHelp"
											Focusable="False"
											ToolTip="Info"
											Style="{StaticResource PuBtnEditOps}"
											Template="{StaticResource Button.Stealth.ControlTemplate}"
											Click="BtnPopupInfoStart_OnClick"
											>
										<!--  cs:CustomProperties.GenericPopupOne="{Binding (cs:CustomProperties.GenericPopupOne)}"  -->
										<!--    -->
										<Button.Content>
											<Path
													Data="{StaticResource IconHelp}"
													Style="{StaticResource PuPathEditOps}"
													>
											</Path>
										</Button.Content>
									</Button>

									<TextBlock
											Text="Help"
											Style="{StaticResource PuTblkEditOps}"
											/>
								</StackPanel>

								<StackPanel x:Name="SpEditOpsClrTxt"
										Grid.Column="3"
										Orientation="Vertical"
										Style="{StaticResource PuPnlEditOps}"
										>
									<Button x:Name="BtnEditOptsClearText"
											Focusable="False"
											cs:CustomProperties.GenericPopupOne="{Binding (cs:CustomProperties.GenericPopupOne)}"
											ToolTip="Clear Text"
											Style="{StaticResource PuBtnEditOps}"
											Template="{StaticResource Button.Stealth.ControlTemplate}"
											Click="BtnEditOptsClearText_OnClick"
											>
										<Button.Content>
											<Path
													Data="{StaticResource IconClearText}"
													Style="{StaticResource PuPathEditOps}"
													>
											</Path>
										</Button.Content>
									</Button>

									<TextBlock
											Text="Clear"
											Style="{StaticResource PuTblkEditOps}"
											/>
								</StackPanel>

								<StackPanel x:Name="SpEditOpsReset"
										Grid.Column="5"
										Orientation="Vertical"
										Style="{StaticResource PuPnlEditOps}"
										>
									<Button x:Name="BtnEditOptsReset"
											Focusable="False"
											ToolTip="Reset"
											Style="{StaticResource PuBtnEditOps}"
											Template="{StaticResource Button.Stealth.ControlTemplate}"
											Click="BtnEditOptsReset_OnClick"
											>
										<Button.Content>
											<Path
													Data="{StaticResource IconReset}"
													Style="{StaticResource PuPathEditOps}"
													>
											</Path>
										</Button.Content>
									</Button>

									<TextBlock
											Text="Reset"
											Style="{StaticResource PuTblkEditOps}"
											/>
								</StackPanel>


								<!--  <StackPanel x:Name="SpEditOpsApply"  -->
								<!--  Grid.Column="7"  -->
								<!--  Orientation="Vertical"  -->
								<!--  Style="{StaticResource PuPnlEditOps}"  -->
								<!--  >  -->
								<!--  <Button x:Name="BtnEditOptsApply"  -->
								<!--  ToolTip="Apply"  -->
								<!--  Style="{StaticResource PuBtnEditOps}"  -->
								<!--  Template="{StaticResource Button.Stealth.ControlTemplate}"  -->
								<!--  Click="BtnEditOptsApply_OnClick"  -->
								<!--  >  -->
								<!-- 		<Button.Content> -->
								<!--  <Path  -->
								<!--  Data="{StaticResource IconApply}"  -->
								<!--  Style="{StaticResource PuPathEditOps}"  -->
								<!--  >  -->
								<!-- 			</Path> -->
								<!-- 		</Button.Content> -->
								<!-- 	</Button> -->
								<!--    -->
								<!--  <TextBlock  -->
								<!--  Text="Apply"  -->
								<!--  Style="{StaticResource PuTblkEditOps}"  -->
								<!--  />  -->
								<!-- </StackPanel> -->


								<StackPanel x:Name="SpEditOpsCancel"
										Grid.Column="9"
										Orientation="Vertical"
										Style="{StaticResource PuPnlEditOps}"
										>
									<Button x:Name="BtnEditOptsCancel"
											Focusable="False"
											ToolTip="Cancel"
											Style="{StaticResource PuBtnEditOps}"
											Template="{StaticResource Button.Stealth.ControlTemplate}"
											Click="BtnEditOptsCancel_OnClick"
											>
										<Button.Content>
											<Path
													Data="{StaticResource IconCancel}"
													Style="{StaticResource PuPathEditOps}"
													>
											</Path>
										</Button.Content>
									</Button>

									<TextBlock
											Text="Cancel"
											Style="{StaticResource PuTblkEditOps}"
											>
									</TextBlock>
								</StackPanel>


								<TextBlock x:Name="TblkPopupTitle"
										Grid.Column="1"
										Grid.ColumnSpan="6"
										Margin="0,-2,0,0"
										VerticalAlignment="Top"
										HorizontalAlignment="Stretch"
										FontWeight="DemiBold"
										FontSize="{StaticResource FontSize.Normal}"
										Background="Transparent"
										Foreground="Black"
										Text="Edit Options"
										Visibility="Collapsed"
										>
									<TextBlock.Effect>
										<DropShadowEffect
												Color="Black"
												ShadowDepth="2"
												BlurRadius="1"
												Opacity="1"
												RenderingBias="Performance"
												/>
									</TextBlock.Effect>
								</TextBlock>

							</Grid>

						</Border>

						<!-- </Grid> -->
					</DataTemplate>


				</ContentControl.ContentTemplate>
			</ContentControl>

			<!--#endregion-->


			<!--#region > L4 us popup content control (CcHelpPopup)-->

			<ContentControl x:Key="CcHelpPopup"
					x:Shared="False"
					>
				<ContentControl.ContentTemplate>

					<DataTemplate x:Name="DtPopup">

						<Grid x:Name="GrdPopup"
								Width="{TemplateBinding Width}"
								Focusable="False"
								HorizontalAlignment="Stretch"
								Background="Transparent"
								>

							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="18" />
							</Grid.ColumnDefinitions>

							<Grid.RowDefinitions>
								<RowDefinition Height="*" />
								<RowDefinition Height="*" />

							</Grid.RowDefinitions>


							<Border x:Name="BdrPopup"
									Grid.Column="0"
									Grid.Row="0"
									Margin="0,0,3,0"
									Padding="13,0,2,0"
									Background="#e100FF00"
									BorderThickness="0,0,0,0"
									BorderBrush="#e100FF00"
									CornerRadius="12,12,0,0"
									>
								<TextBlock x:Name="TblkPopupTitle"
										Focusable="False"
										Margin="0"
										HorizontalAlignment="Stretch"
										FontSize="{StaticResource FontSize.Normal}"
										Background="Transparent"
										Foreground="Black"
										Text="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.TitleText), FallbackValue='This IsEnabled Title Text'}"
										/>
							</Border>

							<Button x:Name="BtnClosePopup"
									Grid.Column="1"
									Grid.Row="0"
									Focusable="False"
									FontFamily="Segoe UI Symbol"
									Background="LimeGreen"
									Foreground="White"
									>
								<!--  Click="BtnPopupClose_OnClick"  -->
								<Button.Content>
									<Path
											Data="{StaticResource IconClose}"
											Fill="White"
											Stretch="Uniform"
											/>
								</Button.Content>
							</Button>

							<Border x:Name="BdrPopupInner"
									Grid.Column="0"
									Grid.Row="1"
									Margin="0,0,3,0"
									Padding="10,0,4,4"
									BorderThickness="0"
									CornerRadius="0,0,12,12"
									>
								<Border.Background>
									<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
										<GradientStop Offset="0" Color="#E100FF00" />
										<GradientStop Offset="1" Color="#FF00C400" />
										<GradientStop Offset="0.9" Color="#FB003800" />
									</LinearGradientBrush>
								</Border.Background>

								<TextBox x:Name="TbxPopupInner"
										Focusable="False"
										Padding="2"
										HorizontalAlignment="Stretch"
										FontSize="{StaticResource FontSize.Normal}"
										Background="WhiteSmoke"
										Foreground="Black"
										BorderThickness="0"
										IsReadOnly="True"
										Text="{Binding RelativeSource={RelativeSource Self}, Path=(cs:VisualStates.MainContent), FallbackValue='Fallback text this is a second line of help text'}"
										TextAlignment="Left"
										TextWrapping="Wrap"
										>
									<TextBox.Resources>
										<Style TargetType="{x:Type Border}">
											<Setter Property="CornerRadius" Value="8">
											</Setter>
										</Style>
									</TextBox.Resources>
								</TextBox>

							</Border>

						</Grid>
					</DataTemplate>
				</ContentControl.ContentTemplate>
			</ContentControl>

			<!--#endregion-->
			
			<!--#region > L4 dt us lbx item container-->

			<Style x:Key="Lbx1ItemContainerStyle1"
					TargetType="ListBoxItem"
					>
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="Padding" Value="0,3,3,3" />
				<Setter Property="Margin" Value="5,1,5,1" />
				<Setter Property="Width" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollContentPresenter}}, Path=ActualWidth}"/>
				<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
				<Setter Property="Background" Value="{StaticResource Lv1.Panel.Bg.IsEnabled}" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="FocusVisualStyle" Value="{x:Null}" />
				<Setter Property="MinHeight" Value="20" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListBoxItem}">
							<Border x:Name="BdCs1"
									Margin="{TemplateBinding Margin}"
									Padding="{TemplateBinding Padding}"
									Background="{TemplateBinding Background}"
									BorderThickness="{TemplateBinding BorderThickness}"
									BorderBrush="{TemplateBinding BorderBrush}"
									CornerRadius="{StaticResource CornerRadius.Std}"
									SnapsToDevicePixels="true"
									>
								<ContentPresenter x:Name="Lv1Cp1"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										/>
							</Border>
							<ControlTemplate.Triggers>

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<!--  false  and false  -->
										<!--  not selected / active  -->
										<!-- <Condition Property="Selector.IsSelectionActive" Value="False" /> -->
										<Condition Property="IsSelected" Value="false" />
									</MultiTrigger.Conditions>
									<Setter TargetName="BdCs1" Property="Margin" Value="7,1,12,1" />
									<Setter TargetName="BdCs1" Property="Padding" Value="2" />
									<Setter TargetName="BdCs1" Property="BorderThickness" Value="2.0" />
									<Setter TargetName="BdCs1" Property="Background" Value="{StaticResource Lv1.Panel.Bg.IsEnabled}" />
									<Setter TargetName="BdCs1" Property="BorderBrush" Value="{StaticResource Lv1.Panel.Bdr.IsEnabled}" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<!--  true  and true  -->
										<!--  is selected / active  -->
										<!-- <Condition Property="Selector.IsSelectionActive" Value="True" /> -->
										<Condition Property="IsSelected" Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="BdCs1" Property="Margin" Value="0,2,5,2" />
									<Setter TargetName="BdCs1" Property="Padding" Value="10.5,2.5,10.5,2.5" />
									<Setter TargetName="BdCs1" Property="BorderThickness" Value="0.5" />
									<Setter TargetName="BdCs1" Property="Background" Value="{StaticResource Lv1.Panel.Bg.IsSel}" />
									<Setter TargetName="BdCs1" Property="BorderBrush" Value="{StaticResource Lv1.Panel.Bdr.IsSel}" />
								</MultiTrigger>


								<MultiTrigger>
									<MultiTrigger.Conditions>
										<!--  true  -->
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsSelected" Value="False" />
									</MultiTrigger.Conditions>
									<Setter TargetName="BdCs1" Property="Margin" Value="0,2,5,2" />
									<Setter TargetName="BdCs1" Property="Padding" Value="9,1,9,1" />
									<Setter TargetName="BdCs1" Property="BorderThickness" Value="2.0" />
									<Setter TargetName="BdCs1" Property="Background" Value="{StaticResource Lv1.Panel.Bg.MouseOver}" />
									<Setter TargetName="BdCs1" Property="BorderBrush" Value="{StaticResource Lv1.Panel.Bdr.MouseOver}" />
								</MultiTrigger>

								<MultiTrigger>
									<MultiTrigger.Conditions>
										<!--  true  -->
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="IsSelected" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="BdCs1" Property="Margin" Value="0,2,5,2" />
									<Setter TargetName="BdCs1" Property="Padding" Value="9,1,9,1" />
									<Setter TargetName="BdCs1" Property="BorderThickness" Value="2.0" />
									<Setter TargetName="BdCs1" Property="BorderBrush" Value="{StaticResource Lv1.Panel.Bdr.MouseOver}" />
								</MultiTrigger>


								<Trigger Property="IsEnabled" Value="false">
									<!--  use false  -->
									<Setter TargetName="BdCs1" Property="TextElement.Foreground" Value="{StaticResource Lv1.Panel.Fg.Disabled}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<!--#endregion-->

			<!--#region > L4 dt us lbx item template-->

			<DataTemplate x:Key="Lbx1ItemTemplate"
					d:DataType="unitsUtil:UnitsDataD"
					DataType="util:UnitsDataR"
					>

				<Grid x:Name="GrdLv1Item"

						
						Height="Auto"
						Margin="3"
						VerticalAlignment="Center"
						HorizontalAlignment="Stretch"
						cs:VisualStates.IsSelected="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}"
						cs:VisualStates.IsLocked="{Binding Ustyle.IsLocked}"
						cs:VisualStates.IsReadOnly="False"
						Style="{StaticResource PnlEnableDisable}"
						>
					<!--  cs:CustomProperties.GenericIntOne="{Binding Ustyle.ActiveElement}"  -->


					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="{StaticResource Lv1IdColWidth}" />
						<ColumnDefinition Width="{StaticResource Lv1IdColWidth}" />
						<ColumnDefinition Width="3*" />
						<ColumnDefinition Width="200" />
						<ColumnDefinition Width="120" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="{StaticResource Lv1RowHeight}" />
						<RowDefinition Height="{StaticResource Lv1RowHeight}" />
						<RowDefinition Height="{StaticResource Lv1RowHeight}" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<Border x:Name="Id_BdrId"
							Grid.Column="0"
							Grid.Row="0"
							Grid.RowSpan="3"
							HorizontalAlignment="Stretch"
							cs:VisualStates.BgDisabled="{StaticResource Id.Bg.Disabled}"
							cs:VisualStates.BgIsEnabled="{StaticResource Id.Bg.IsEnabled}"
							cs:VisualStates.BgIsSel="{StaticResource Id.Bg.IsSel}"
							Style="{StaticResource BG12}"
							>
						<!--  Style="{StaticResource BdrTrigs.L1a}"  -->
						<Grid>

							<TextBlock
									Grid.Column="0"
									Grid.Row="0"
									Margin="0,-4,0,4"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									FontSize="40"
									cs:VisualStates.FgDisabled="{StaticResource Id.Fg.Disabled}"
									cs:VisualStates.FgIsEnabled="{StaticResource Id.Fg.IsEnabled}"
									cs:VisualStates.FgIsSel="{StaticResource Id.Fg.IsSel}"
									Text="{Binding SeqFormatted, Mode=OneWay}"
									Style="{StaticResource TblkTrigs.L1a}"
									/>

							<Path x:Name="PthCanEditIconx"
									Grid.Column="0"
									Grid.Row="0"
									Height="16"
									Width="16"
									Margin="0,0,5,5"
									HorizontalAlignment="right"
									VerticalAlignment="Bottom"
									Stretch="Uniform"
									Data="{StaticResource IconPadLock}"
									>
								<Path.Style>
									<Style TargetType="Path">
										<Setter Property="Visibility" Value="Hidden" />
										<Setter Property="Fill" Value="{StaticResource IdIcon.Fg.IsEnabled}" />
										<Style.Triggers>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<!--  true  -->
													<Condition Value="true" Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" />
													<!--  true  -->
													<Condition Value="true" Binding="{Binding Path=Ustyle.IsLocked}" />
												</MultiDataTrigger.Conditions>
												<Setter Property="Fill" Value="{StaticResource IdIcon.Fg.IsSel}" />
												<Setter Property="Visibility" Value="Visible" />
											</MultiDataTrigger>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Value="False" Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" />
													<Condition Value="True" Binding="{Binding Path=Ustyle.IsLocked}" />
												</MultiDataTrigger.Conditions>
												<Setter Property="Visibility" Value="Visible" />
												<Setter Property="Fill" Value="{StaticResource IdIcon.Fg.IsEnabled}" />
											</MultiDataTrigger>

										</Style.Triggers>
									</Style>
								</Path.Style>

							</Path>
						</Grid>
					</Border>

					<Border x:Name="Icon"
							Grid.Column="1"
							Grid.Row="0"
							Grid.RowSpan="3"
							Margin="3,0,0,0"
							cs:VisualStates.BgDisabled="{StaticResource Image1.Bg.Disabled}"
							cs:VisualStates.BgIsEnabled="{StaticResource Image1.Bg.IsEnabled}"
							cs:VisualStates.BgIsSel="{StaticResource Image1.Bg.IsSel}"
							Style="{StaticResource BG12}"
							>
						<Image Name="UnitIcon"
								DockPanel.Dock="Top"
								Margin="8"
								Source="{Binding Path=Ux}"
								Stretch="None"
								/>

					</Border>

					<Border x:Name="BdrNamePair"
							Grid.Column="2"
							Grid.Row="0"
							Grid.ColumnSpan="2"
							Margin="3,-1,0,1.67"
							Style="{StaticResource BdrCanEditPair}"
							>

						<DockPanel>

							<Border x:Name="BdrNameTitle"
									Width="{StaticResource TitleReadonlyWidth}"
									Margin="0"
									Style="{StaticResource BdrCanEditTitle}"
									>

								<TextBlock x:Name="TblkNameTitle"
										Margin="8,0,0,3"
										Text="Style Name"
										Style="{StaticResource TblkTrigsL3CanEditTitle}"
										/>

							</Border>


							<Grid x:Name="GrdNameText"
									Margin="0,0,0,0"
									VerticalAlignment="Stretch"
									HorizontalAlignment="Stretch"
									>
								<!--  MaxWidth="{StaticResource CanEdit.MaxWidth}"  -->

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>


								<Border x:Name="BdrNameText"
										Grid.Column="0"
								>
									<Border.Style>
										<Style
												TargetType="Border"
												BasedOn="{StaticResource BdrCanEditText}"
												>
											<Style.Triggers>
												<DataTrigger Binding="{Binding ActiveElement}" Value="6">
													<Setter Property="cs:VisualStates.IsEditing" Value="True" />
													<Setter Property="cs:VisualStates.IsActivated" Value="True" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</Border.Style>


									<DockPanel x:Name="DpName">

										<!--  Tag="6"  -->

										<!-- <Button x:Name="BtnNameEditStatus" -->
										<!-- 		DockPanel.Dock="Right" -->
										<!-- 		Width="{StaticResource IconEditStatusWidth}" -->
										<!-- 		cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuInfoEditName}" -->
										<!-- 		Style="{StaticResource BtnIconEditStatus}" -->
										<!-- 		Click="BtnPopupInfoStart_OnClick" -->
										<!-- 		> -->
										<!-- 	<Button.Content> -->
										<!-- 		<Path x:Name="PathNameEditStatus" -->
										<!-- 				Style="{StaticResource PathCanEditText.Icon1}" -->
										<!-- 				/> -->
										<!-- 	</Button.Content> -->
										<!-- -->
										<!-- </Button> -->
										<!-- -->
										<!-- <Button x:Name="BtnNameClearText" -->
										<!-- 		DockPanel.Dock="Right" -->
										<!-- 		Style="{StaticResource BtnIconClearText}" -->
										<!-- 		Click="Btn_NameEntryClear_OnClick" -->
										<!-- 		> -->
										<!-- 	<Button.Content> -->
										<!-- 		<Path x:Name="PathNameClearText" -->
										<!-- 				Style="{StaticResource PathClearText.Icon}" -->
										<!-- 				/> -->
										<!-- 	</Button.Content> -->
										<!-- </Button> -->

										<Popup Name="PuEditOptsStyleName"
												cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuEditNameHelp}"
												cs:CustomProperties.GenericObjectOne="{Binding ElementName=TblkEditNameText}"
												PlacementTarget="{Binding ElementName=BdrNameText}"
												Child="{StaticResource CcEditOptsPopup}"
												Opened="EditOpsPopup_Opened"
												Closed="EditOpsPopup_OnClosed"
												Style="{StaticResource PuBase}"
										/>

										<Popup Name="PuEditNameHelp"
												PlacementTarget="{Binding ElementName=TblkEditNameText}"
												cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
												cs:VisualStates.TitleText="Edit Name Help"
												Child="{DynamicResource CcHelpPopup}"
												Button.Click="BtnPopupClose_OnClick"
												Style="{StaticResource PuBase}"
												>
										</Popup>

										<Border
												Style="{StaticResource BdrCanEditTextPlusGoodBad}"
												cs:VisualStates.IsGoodBad="{Binding IsNameOk, Mode=OneWay}"
												>

											<TextBox x:Name="TblkEditNameText"
												DockPanel.Dock="Left"
												cs:CustomProperties.GenericIntOne="{x:Static cs:UnitStylesMgrWinData.POPUP_STYLE_NAME}"
												cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuEditOptsStyleName}"
												TextWrapping="NoWrap"
												ClipToBounds="True"
												Style="{StaticResource TbxTrigsL3CanEditText}"
												Text="{Binding Ustyle.Name}"
												GotFocus="Tbx_OnGotFocus"
												LostFocus="Tbx_OnLostFocus"
												ToolTip="{Binding EditNameToolTip, ElementName=WinUnitStyle, Mode=OneWay}"
												>
												
											</TextBox>

										</Border>

										<!--  Text="{Binding Ustyle.Name, Mode=TwoWay}"  -->

											<!--  Validation.ErrorTemplate="{StaticResource CtValidationName}"  -->
											<!--  Validation.Error="NameValidation_OnError"  -->
											<!-- <TextBox.Style> -->
											<!--  <Style  -->
											<!--  TargetType="{x:Type TextBox}"  -->
											<!--  BasedOn="{StaticResource TbxTrigsL3CanEditText}"  -->
											<!--  >  -->
											<!--    -->
											<!-- 		<Setter Property="ToolTip" Value="Provide a name for your style" /> -->
											<!--    -->
											<!-- 		<Style.Triggers> -->
											<!-- 			<Trigger Property="Validation.HasError" Value="True"> -->
											<!-- 				<Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" /> -->
											<!-- 			</Trigger> -->
											<!-- 		</Style.Triggers> -->
											<!--    -->
											<!-- 	</Style> -->
											<!-- </TextBox.Style> -->
											<!--    -->
											<!-- <TextBox.Text> -->
											<!-- 	<Binding Path="Ustyle.Name" Mode="TwoWay" UpdateSourceTrigger="LostFocus" NotifyOnValidationError="True"> -->
											<!-- 		<Binding.ValidationRules> -->
											<!--  <cs:NameValidation  -->
											<!--  d:uMgr="{x:Null}"  -->
											<!--  uMgr="{x:Static util:UnitsManager.Instance}"  -->
											<!--  />  -->
											<!-- 		</Binding.ValidationRules> -->
											<!-- 	</Binding> -->
											<!-- </TextBox.Text> -->





									</DockPanel>
								</Border>
							</Grid>
						</DockPanel>
					</Border>


					<Border x:Name="BdrDescPair"
							Grid.Column="2"
							Grid.Row="1"
							Grid.ColumnSpan="2"
							Margin="3,0.33,0,0.33"
							Style="{StaticResource BdrCanEditPair}"
							>

						<DockPanel>

							<Border x:Name="BdrDescTitle"
									Width="{StaticResource TitleReadonlyWidth}"
									Margin="0"
									Style="{StaticResource BdrCanEditTitle}"
									>

								<TextBlock x:Name="TblkDescTitle"
										Margin="8,0,0,3"
										Text="Description"
										Style="{StaticResource TblkTrigsL3CanEditTitle}"
										/>

							</Border>


							<Grid x:Name="GrdDescText"
									Margin="0,0,0,0"
									VerticalAlignment="Stretch"
									HorizontalAlignment="Stretch"
									>
								<!--  MaxWidth="{StaticResource CanEdit.MaxWidth}"  -->

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>


								<Border x:Name="BdrDescText"
										Grid.Column="0"
										>
									<!--  HorizontalAlignment="Stretch"  -->
									<Border.Style>
										<Style
												TargetType="Border"
												BasedOn="{StaticResource BdrCanEditText}"
												>
											<Style.Triggers>
												<DataTrigger Binding="{Binding ActiveElement}" Value="6">
													<Setter Property="cs:VisualStates.IsEditing" Value="True" />
													<Setter Property="cs:VisualStates.IsActivated" Value="True" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</Border.Style>

									<DockPanel x:Name="DpDesc">
										<!--  HorizontalAlignment="Stretch"  -->

										<!-- <Button x:Name="BtnDescEditStatus" -->
										<!-- 		DockPanel.Dock="Right" -->
										<!-- 		Width="{StaticResource IconEditStatusWidth}" -->
										<!-- 		cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuEditDesc}" -->
										<!-- 		Style="{StaticResource BtnIconEditStatus}" -->
										<!-- 		Click="BtnPopupInfoStart_OnClick" -->
										<!-- 		> -->
										<!-- 	<Button.Content> -->
										<!-- 		<Path x:Name="PathDescEditStatus" -->
										<!-- 				Style="{StaticResource PathCanEditText.Icon1}" -->
										<!-- 				/> -->
										<!-- 	</Button.Content> -->
										<!-- </Button> -->
										<!-- -->
										<!-- <Button x:Name="BtnDescClearText" -->
										<!-- 		DockPanel.Dock="Right" -->
										<!-- 		Style="{StaticResource BtnIconClearText}" -->
										<!-- 		Click="Btn_DescEntryClear_OnClick" -->
										<!-- 		> -->
										<!-- 	<Button.Content> -->
										<!-- 		<Path x:Name="PathDescClearText" -->
										<!-- 				Style="{StaticResource PathClearText.Icon}" -->
										<!-- 				/> -->
										<!-- 	</Button.Content> -->
										<!-- </Button> -->

										<Popup Name="PuEditOptsStyleDesc"
												
												cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuEditDescHelp}"
												cs:CustomProperties.GenericObjectOne="{Binding ElementName=TblkEditDescText}"
												PlacementTarget="{Binding ElementName=BdrDescText}"
												Child="{StaticResource CcEditOptsPopup}"
												Opened="EditOpsPopup_Opened"
												Closed="EditOpsPopup_OnClosed"
												Style="{StaticResource PuBase}"
										/>

										<Popup Name="PuEditDescHelp"
												cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
												cs:VisualStates.TitleText="Edit Description Help"
												PlacementTarget="{Binding ElementName=TblkEditDescText}"
												Button.Click="BtnPopupClose_OnClick"
												Child="{DynamicResource CcHelpPopup}"
												Style="{StaticResource PuBase}"
												>

										</Popup>

										<Border
												Style="{StaticResource BdrCanEditTextPlusGoodBad}"
												cs:VisualStates.IsGoodBad="{Binding IsDescOk, Mode=OneWay}"
										>

											<TextBox x:Name="TblkEditDescText"
												DockPanel.Dock="Left"
												cs:CustomProperties.GenericIntOne="{x:Static cs:UnitStylesMgrWinData.POPUP_STYLE_DESC}"
												cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuEditOptsStyleDesc}"
												Style="{StaticResource TbxTrigsL3CanEditText}"
												GotFocus="Tbx_OnGotFocus"
												LostFocus="Tbx_OnLostFocus"
												Text="{Binding Ustyle.Description}"
												ToolTip="{Binding EditDescToolTip, ElementName=WinUnitStyle, Mode=OneWay}"
												/>

										</Border>
									</DockPanel>

								</Border>
							</Grid>
						</DockPanel>
					</Border>


					<!--#region L7 Sample title & text-->

					<Border x:Name="BdrSamplePair"
							Grid.Column="2"
							Grid.Row="2"
							Grid.ColumnSpan="2"
							Margin="3,1.67,0,-1"
							Style="{StaticResource BdrCanEditPair}"
							>

						<DockPanel>

							<Border x:Name="BdrSampleTitle"
									Width="{StaticResource TitleReadonlyWidth}"
									Margin="0"
									Style="{StaticResource BdrCanEditTitle}"
									>

								<TextBlock x:Name="TbxSampleTitle"
										Margin="8,0,0,3"
										Text="Sample"
										Style="{StaticResource TblkTrigsL3CanEditTitle}"
										/>

							</Border>


							<Grid x:Name="GrdSampleText"
									Margin="0,0,0,0"
									VerticalAlignment="Stretch"
									HorizontalAlignment="Stretch"
									>
								<!--  MaxWidth="{StaticResource CanEdit.MaxWidth}"  -->

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>


								<Border x:Name="BdrExampleEntryText"
										Grid.Column="0"
										>
									<Border.Style>
										<Style
												TargetType="Border"
												BasedOn="{StaticResource BdrCanEditText}"
												>
											<Style.Triggers>
												<DataTrigger Binding="{Binding ActiveElement}" Value="6">
													<Setter Property="cs:VisualStates.IsEditing" Value="True" />
													<Setter Property="cs:VisualStates.IsActivated" Value="True" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</Border.Style>

									<DockPanel x:Name="SpExampleEntry">

										<!-- <Button x:Name="BtnExampleEditStatus" -->
										<!-- 		DockPanel.Dock="Right" -->
										<!-- 		Width="{StaticResource IconEditStatusWidth}" -->
										<!-- 		cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuEditSample}" -->
										<!-- 		Style="{StaticResource BtnIconEditStatus}" -->
										<!-- 		Click="BtnPopupInfoStart_OnClick" -->
										<!-- 		> -->
										<!-- 	<Button.Content> -->
										<!-- 		<Path x:Name="PathEditStatus" -->
										<!-- 				Style="{StaticResource PathCanEditText.Icon1}" -->
										<!-- 				/> -->
										<!-- 	</Button.Content> -->
										<!-- </Button> -->
										<!-- -->
										<!-- <Button x:Name="BtnExampleClearText" -->
										<!-- 		DockPanel.Dock="Right" -->
										<!-- 		Style="{StaticResource BtnIconClearText}" -->
										<!-- 		Click="Btn_SampleEntryClear_OnClick" -->
										<!-- 		> -->
										<!-- 	<Button.Content> -->
										<!-- 		<Path x:Name="PathClearText" -->
										<!-- 				Style="{StaticResource PathClearText.Icon}" -->
										<!-- 				/> -->
										<!-- 	</Button.Content> -->
										<!-- </Button> -->

										<Popup Name="PuEditOptsStyleSample"
												cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuEditSample}"
												cs:CustomProperties.GenericObjectOne="{Binding ElementName=TblkEditSampleText}"
												PlacementTarget="{Binding ElementName=BdrExampleEntryText}"
												Child="{StaticResource CcEditOptsPopup}"
												Opened="EditOpsPopup_Opened"
												Closed="EditOpsPopup_OnClosed"
												Style="{StaticResource PuBase}"
										/>

										<Popup Name="PuEditSample"
												cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
												cs:VisualStates.TitleText="Edit Sample Help"
												PlacementTarget="{Binding ElementName=TblkEditSampleText}"
												Button.Click="BtnPopupClose_OnClick"
												Child="{DynamicResource CcHelpPopup}"
												Style="{StaticResource PuBase}"
												>
										</Popup>

										<Border
												Style="{StaticResource BdrCanEditTextPlusGoodBad}"
												cs:VisualStates.IsGoodBad="{Binding IsSampleOk, Mode=OneWay}"
										>

										<TextBox x:Name="TblkEditSampleText"
												DockPanel.Dock="Left"
												cs:CustomProperties.GenericIntOne="{x:Static cs:UnitStylesMgrWinData.POPUP_STYLE_SAMPLE}"
												cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuEditOptsStyleSample}"
												
												d:Text="Sample"
												GotFocus="Tbx_OnGotFocus"
												LostFocus="Tbx_OnLostFocus"
												Text="{Binding Ustyle.Sample}"
												ToolTip="{Binding EditSampleToolTip, ElementName=WinUnitStyle, Mode=OneWay}"
												>
												
											

											<TextBox.Style>
												<Style
														TargetType="TextBox"
														BasedOn="{StaticResource TbxTrigsL3CanEditText}"
														>
													<Setter Property="Text" Value="{Binding GetSampleStr, Mode=OneWay}" />
													<Style.Triggers>
														<DataTrigger Binding="{Binding (cs:VisualStates.IsEditing), RelativeSource={RelativeSource Self}}" Value="True">
															<Setter Property="Text" Value="{Binding Sample, Mode=TwoWay}" />
														</DataTrigger>
													</Style.Triggers>
												</Style>

											</TextBox.Style>
										</TextBox>
											
											<!-- KeyUp="TblkEditSampleText_OnKeyUp" -->
										</Border>
									</DockPanel>
								</Border>

							</Grid>
						</DockPanel>

					</Border>

					<!--#endregion-->

					<Border x:Name="GBdrShowHere"
							Grid.Column="4"
							Grid.Row="0"
							Grid.RowSpan="3"
							Margin="3,0,0,0"
							VerticalAlignment="Center"
							cs:VisualStates.BgDisabled="{StaticResource SubTitle.Gb.Disabled}"
							cs:VisualStates.BgIsEnabled="{StaticResource SubTitle.Gb.IsEnabled}"
							cs:VisualStates.BgIsSel="{StaticResource SubTitle.Gb.IsSel}"
							cs:VisualStates.BgIsLocked="{StaticResource SubTitle.Gb.IsLocked}"
							Style="{StaticResource BG13}"
							>

						<StackPanel x:Name="SpShowHere"
								Margin="3"
								Orientation="Vertical"
								>

							<Border x:Name="BdrShowHereSubTitle"
									Height="16"
									Margin="1,0,1,0"
									Padding="0"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Top"
									BorderThickness="0"
									cs:VisualStates.BgDisabled="{StaticResource SubTitle.Bg.IsEnabled}"
									cs:VisualStates.BgIsEnabled="{StaticResource SubTitle.Bg.IsEnabled}"
									cs:VisualStates.BgIsSel="{StaticResource SubTitle.Bg.IsSel}"
									cs:VisualStates.BgIsEditing="{StaticResource SubTitle.Bg.IsEditg}"
									cs:VisualStates.BgIsLocked="{StaticResource SubTitle.Bg.IsLocked}"
									CornerRadius="{StaticResource CornerRadius.Std}"
									Style="{StaticResource BG13}"
									>

								<TextBlock x:Name="TblkSubTitle"
										Margin="0,0,0,2"
										Padding="0"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										FontSize="{StaticResource FontSize.Small}"
										Background="Transparent"
										cs:VisualStates.FgDisabled="{StaticResource SubTitle.Fg.Disabled}"
										cs:VisualStates.FgIsEnabled="{StaticResource SubTitle.Fg.IsEnabled}"
										cs:VisualStates.FgIsSel="{StaticResource SubTitle.Fg.IsSel}"
										cs:VisualStates.FgIsEditing="{StaticResource SubTitle.Fg.IsEditg}"
										cs:VisualStates.FgIsReadOnly="{StaticResource SubTitle.Fg.IsReadOnly}"
										cs:VisualStates.FgIsLocked="{StaticResource SubTitle.Fg.IsLocked}"
										Text="Include Here"
										Style="{StaticResource TblkTrigs.L3}"
										/>
										<!-- cs:VisualStates.DoesMouseOver="False" -->

							</Border>


							<Border x:Name="BdrRibbonFavs"
									Padding="0"
									>
								<Border.Style>
									<Style
											TargetType="Border"
											BasedOn="{StaticResource BdrShowHereCkbx}"
											>
										<Style.Triggers>
											<DataTrigger Binding="{Binding ActiveElement}" Value="1">
												<Setter Property="cs:VisualStates.IsEditing" Value="True" />
												<Setter Property="cs:VisualStates.IsActivated" Value="True" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Border.Style>

								<DockPanel x:Name="DpRibbonFavs"
										HorizontalAlignment="Stretch"
										>

									<Button x:Name="BtnRibbonFavsStatus"
											DockPanel.Dock="Right"
											Width="19"
											Padding="2,0,1,0"
											cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuRibbonFavs}"
											Style="{StaticResource BtnIconEditStatus}"
											Click="BtnPopupInfoStart_OnClick"
											>
										
										<Button.Content>
											<Path x:Name="PathRibbonFavs"
													cs:CsPathAp.IconIsLockedScaleX="{StaticResource IconLockedCkbxScaleX}"
													cs:CsPathAp.IconIsEditingScaleX="{StaticResource IconHelp1CkbxScaleX}"
													cs:CsPathAp.IconIsEditingMargin="0,2.5,0,-2.5"
													Style="{StaticResource PathCanEditText.Icon1}"
													>
											</Path>
										</Button.Content>
									</Button>

									<!--    -->
									<!--  PlacementTarget="{Binding ElementName=WinUnitStyle, Path=PopupTargetCkbxRibbonFavs, Mode=OneWay}"  -->
									<!--  PlacementTarget="{Binding Tag, ElementName=BtnRibbonFavsStatus, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}"  -->
									<Popup Name="PuRibbonFavs"
											cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
											cs:VisualStates.TitleText="Ribbon Favs Help"
											PlacementTarget="{Binding ElementName=CbxRibbonFavs}"
											Button.Click="BtnPopupClose_OnClick"
											Child="{DynamicResource CcHelpPopup}"
											Style="{StaticResource PuBase}"
											>
									</Popup>

									<CheckBox x:Name="CbxRibbonFavs"
											Content="Ribbon Favs"
											DockPanel.Dock="Left"
											Margin="0,2,0,0"
											Padding="0"
											VerticalAlignment="Center"
											VerticalContentAlignment="Center"
											FontSize="{StaticResource FontSize.Smaller}"
											BorderThickness="0"
											IsChecked="{Binding Ustyle.ShowInRibbon}"
											cs:CsCheckBoxAp.CheckBoxContentMargin="4,-2,0,2"
											cs:CsCheckBoxAp.CheckBoxBoxMargin="4,0,0,3"
											cs:CsCheckBoxAp.CheckBoxCheckMargin="-2"
											cs:CsCheckBoxAp.CheckBoxBoxSize="12"
											>

										<CheckBox.Style>
											<Style
													TargetType="CheckBox"
													BasedOn="{StaticResource Lv1.CheckboxStyle2}"
													>
												<Setter Property="Foreground" Value="{StaticResource Action2.Fg.IsSel}" />
												<Setter Property="IsEnabled" Value="False">
												</Setter>
												<Style.Triggers>
													<DataTrigger Value="True" Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}">
														<Setter Property="IsEnabled" Value="True">
														</Setter>
													</DataTrigger>
													<DataTrigger Value="True" Binding="{Binding Ustyle.IsLocked}">
														<Setter Property="IsEnabled" Value="False">
														</Setter>
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</CheckBox.Style>
									</CheckBox>

								</DockPanel>
							</Border>

							<Border x:Name="BdrDialogLeft"
									Padding="0"
									>
								<Border.Style>
									<Style
											TargetType="Border"
											BasedOn="{StaticResource BdrShowHereCkbx}"
											>
										<Style.Triggers>
											<DataTrigger Binding="{Binding ActiveElement}" Value="2">
												<Setter Property="cs:VisualStates.IsEditing" Value="True" />
												<Setter Property="cs:VisualStates.IsActivated" Value="True" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Border.Style>

								<DockPanel x:Name="DpDialogLeft"
										HorizontalAlignment="Stretch"
										>

									<Button x:Name="BtnDialogLeftStatus"
											DockPanel.Dock="Right"
											Width="19"
											Padding="2,0,1,0"
											cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuDialogLeft}"
											Style="{StaticResource BtnIconEditStatus}"
											Click="BtnPopupInfoStart_OnClick"
											>
										<Button.Content>
											<Path x:Name="PathDialogLeft"
													cs:CsPathAp.IconIsLockedScaleX="{StaticResource IconLockedCkbxScaleX}"
													cs:CsPathAp.IconIsEditingScaleX="{StaticResource IconHelp1CkbxScaleX}"
													cs:CsPathAp.IconIsEditingMargin="0,2.5,0,-2.5"
													Style="{StaticResource PathCanEditText.Icon1}"
													>
											</Path>
										</Button.Content>
									</Button>


									<Popup Name="PuDialogLeft"
											cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
											cs:VisualStates.TitleText="Dialog Left Help"
											PlacementTarget="{Binding ElementName=CbxDialogLeft}"
											Button.Click="BtnPopupClose_OnClick"
											Child="{DynamicResource CcHelpPopup}"
											Style="{StaticResource PuBase}"
											>
									</Popup>

									<CheckBox x:Name="CbxDialogLeft"
											Content="Dialog Left"
											DockPanel.Dock="Left"
											Margin="0,2,0,0"
											Padding="0"
											VerticalAlignment="Center"
											VerticalContentAlignment="Center"
											FontSize="{StaticResource FontSize.Smaller}"
											BorderThickness="0"
											IsChecked="{Binding Ustyle.ShowInDialogLeft}"
											cs:CsCheckBoxAp.CheckBoxContentMargin="4,-2,0,2"
											cs:CsCheckBoxAp.CheckBoxBoxMargin="4,0,0,3"
											cs:CsCheckBoxAp.CheckBoxCheckMargin="-2"
											cs:CsCheckBoxAp.CheckBoxBoxSize="12"
											>

										<CheckBox.Style>
											<Style
													TargetType="CheckBox"
													BasedOn="{StaticResource Lv1.CheckboxStyle2}"
													>
												<Setter Property="Foreground" Value="{StaticResource Action2.Fg.IsSel}" />
												<Style.Triggers>

													<DataTrigger Value="True" Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}">
														<Setter Property="IsEnabled" Value="True">
														</Setter>
													</DataTrigger>
													<DataTrigger Value="true" Binding="{Binding Ustyle.IsLocked}">
														<Setter Property="IsEnabled" Value="false">
														</Setter>
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</CheckBox.Style>
									</CheckBox>

								</DockPanel>
							</Border>

							<Border x:Name="BdrDialogRight"
									Padding="0"
									>
								<Border.Style>
									<Style
											TargetType="Border"
											BasedOn="{StaticResource BdrShowHereCkbx}"
											>
										<Style.Triggers>
											<DataTrigger Binding="{Binding ActiveElement}" Value="3">
												<Setter Property="cs:VisualStates.IsEditing" Value="True" />
												<Setter Property="cs:VisualStates.IsActivated" Value="True" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Border.Style>

								<DockPanel x:Name="DpDialogRight"
										HorizontalAlignment="Stretch"
										>

									<Button x:Name="BtnDialogRightStatus"
											DockPanel.Dock="Right"
											Width="19"
											Padding="2,0,1,0"
											cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuDialogRight}"
											Style="{StaticResource BtnIconEditStatus}"
											Click="BtnPopupInfoStart_OnClick"
											>
										<Button.Content>
											<Path x:Name="PathDialogRight"
													cs:CsPathAp.IconIsLockedScaleX="{StaticResource IconLockedCkbxScaleX}"
													cs:CsPathAp.IconIsEditingScaleX="{StaticResource IconHelp1CkbxScaleX}"
													cs:CsPathAp.IconIsEditingMargin="0,2.5,0,-2.5"
													Style="{StaticResource PathCanEditText.Icon1}"
													>
											</Path>
										</Button.Content>
									</Button>

									<Popup Name="PuDialogRight"
											cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
											cs:VisualStates.TitleText="Dialog Right Help"
											PlacementTarget="{Binding ElementName=CbxDialogRight}"
											Button.Click="BtnPopupClose_OnClick"
											Child="{DynamicResource CcHelpPopup}"
											Style="{StaticResource PuBase}"
											>

									</Popup>

									<CheckBox x:Name="CbxDialogRight"
											Content="Dialog Right"
											DockPanel.Dock="Left"
											Margin="0,2,0,0"
											Padding="0"
											VerticalAlignment="Center"
											VerticalContentAlignment="Center"
											FontSize="{StaticResource FontSize.Smaller}"
											BorderThickness="0"
											IsChecked="{Binding Ustyle.ShowInDialogRight}"
											cs:CsCheckBoxAp.CheckBoxContentMargin="4,-2,0,2"
											cs:CsCheckBoxAp.CheckBoxBoxMargin="4,0,0,3"
											cs:CsCheckBoxAp.CheckBoxCheckMargin="-2"
											cs:CsCheckBoxAp.CheckBoxBoxSize="12"
											>

										<CheckBox.Style>
											<Style
													TargetType="CheckBox"
													BasedOn="{StaticResource Lv1.CheckboxStyle2}"
													>
												<Setter Property="Foreground" Value="{StaticResource Action2.Fg.IsSel}" />
												<Style.Triggers>

													<DataTrigger Value="True" Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}">
														<Setter Property="IsEnabled" Value="True">
														</Setter>
													</DataTrigger>
													<DataTrigger Value="true" Binding="{Binding Ustyle.IsLocked}">
														<Setter Property="IsEnabled" Value="false">
														</Setter>
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</CheckBox.Style>
									</CheckBox>

								</DockPanel>
							</Border>

						</StackPanel>


					</Border>


					<StackPanel x:Name="debug_info"
							Grid.Column="0"
							Grid.Row="3"
							Grid.ColumnSpan="5"
							Orientation="Horizontal"
							Visibility="Collapsed"
							>

						<TextBlock
								Margin="0,0,5,0"
								MaxWidth="110"
								HorizontalAlignment="Left"
								FontSize="8"
								Foreground="White"
								Text="{Binding Path=ActiveElement, FallbackValue='none'}"
								/>

						<TextBlock
								Margin="0,0,5,0"
								MaxWidth="110"
								HorizontalAlignment="Left"
								FontSize="8"
								Foreground="White"
								Text="{Binding Path=Ustyle.Name}"
								/>

						<CheckBox x:Name="Chkbx01"
								Content="is enabled"
								Height="12"
								Margin="0"
								Padding="0"
								VerticalAlignment="Top"
								FontSize="8"
								Foreground="White"
								IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsEnabled, Mode=OneWay}"
								Style="{StaticResource Lv1.CheckboxStyle}"
								/>
						<CheckBox x:Name="Chkbx02"
								Content="is selected"
								Height="12"
								Margin="0"
								Padding="0"
								VerticalAlignment="Top"
								FontSize="8"
								Foreground="White"
								IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsSelected, Mode=OneWay}"
								Style="{StaticResource Lv1.CheckboxStyle}"
								/>
						<CheckBox x:Name="Chkbx03"
								Content="is kbfocused"
								Height="12"
								Margin="0"
								Padding="0"
								VerticalAlignment="Top"
								FontSize="8"
								Foreground="White"
								IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsKeyboardFocused, Mode=OneWay}"
								Style="{StaticResource Lv1.CheckboxStyle}"
								/>
						<CheckBox x:Name="Chkbx05"
								Content="is focused within"
								Height="12"
								Margin="0"
								Padding="0"
								VerticalAlignment="Top"
								FontSize="8"
								Foreground="White"
								IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsKeyboardFocusWithin, Mode=OneWay}"
								Style="{StaticResource Lv1.CheckboxStyle}"
								/>
						<CheckBox x:Name="Chkbx04"
								Content="is locked"
								Height="12"
								Margin="0"
								Padding="0"
								VerticalAlignment="Top"
								FontSize="8"
								Foreground="White"
								IsChecked="{Binding Ustyle.IsLocked, Mode=OneWay}"
								Style="{StaticResource Lv1.CheckboxStyle}"
								/>


					</StackPanel>

				</Grid>



			</DataTemplate>

			<!--#endregion-->


			<!--#region > L4 dt us unit settings - sel unit (DtUnitSettings)-->

			<DataTemplate x:Key="DtUnitSettings">

				<!--#region > L6 unit settings and add style-->

				<StackPanel
						DataContext="{Binding ElementName=WinUnitStyle, Path=DetailUnit}"
						d:DataContext="{Binding Source={x:Static util:UnitStdStylesD.ListD}, Path=[0]}"
						Orientation="Vertical"
						>

					<DockPanel>

						<Border x:Name="BdrUsHeaderSub"
								DockPanel.Dock="right"
								Width="100"
								Margin="3,0,0,3"
								Style="{StaticResource BdrHeader}"
								>
							<TextBlock
									Padding="5,0,0,2"
									FontSize="{StaticResource FontSize.XLarge}"
									Foreground="Black"
									Text="Length"
									/>
						</Border>


						<Border x:Name="BdrUsHeaderPrime"
								DockPanel.Dock="Top"
								Margin="0,0,0,3"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Top"
								Style="{StaticResource BdrHeader}"
								>
							<TextBlock
									FontSize="{StaticResource FontSize.XLarge}"
									Text="Unit Settings"
									Style="{StaticResource TblkHeader}"
									/>
						</Border>

					</DockPanel>


					<!--#region > L7 unit settings-->

					<ComboBox x:Name="CbxUnitSelect"
							Margin="0,5,0,0"
							Padding="0,1,0,5"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Top"
							DataContext="{Binding ElementName=WinUnitStyle}"
							FontSize="{StaticResource FontSize.Normal}"
							IsEditable="False"
							IsEnabled="True"
							IsReadOnly="True"
							IsSynchronizedWithCurrentItem="True"
							DisplayMemberPath="Key"
							MaxDropDownHeight="120"
							SelectedIndex="{Binding CbxSelIndex, FallbackValue=0}"
							SelectedItem="{Binding CbxSelectedItem, Mode=TwoWay}"
							SnapsToDevicePixels="True"
							ItemsSource="{Binding Path=CbxList, Mode=OneWay}"
							ItemContainerStyle="{DynamicResource CsCbxItemContainerStyle}"
							FocusVisualStyle="{x:Null}"
							OverridesDefaultStyle="True"
							d:DisplayMemberPath="Value.DropDownName"
							d:ItemsSource="{x:Static util:UnitStdStylesD.SStdStyles}"
							d:SelectedIndex="0"
							cs:CsComboBoxAp.DropDownBdrBrush="{StaticResource Cbx.DropDown.Bg.IsSel}"
							cs:CsComboBoxAp.DropDownBrush="{StaticResource Cbx.DropDown.Bg.IsSel}"
							cs:VisualStates.IsSelected="True"
							cs:CsComboBoxAp.ComboBoxBdrRadius="{StaticResource CornerRadius.Sm}"
							cs:CsComboBoxAp.DropDownBdrRadius="4"
							cs:CsComboBoxAp.DropDownBdrThickness="4"
							cs:CsComboBoxAp.DropDownMaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource self}}"
							cs:CsComboBoxAp.DropDownMinWidth="80.0"
							cs:VisualStates.BdrDisabled="{StaticResource Cbx.Bdr.IsEnabled}"
							cs:VisualStates.BdrIsEnabled="{StaticResource Cbx.Bdr.IsEnabled}"
							cs:VisualStates.BdrIsSel="{StaticResource Cbx.Bdr.IsSel}"
							cs:VisualStates.BdrIsEditing="{StaticResource Cbx.Bdr.IsEditg}"
							cs:VisualStates.BdrIsReadOnly="{StaticResource Cbx.Bdr.IsReadOnly}"
							cs:VisualStates.BdrIsEnabledMouseOver="{StaticResource Cbx.Bdr.IsEnabled.MouseOver}"
							cs:VisualStates.BdrIsSelMouseOver="{StaticResource Cbx.Bdr.IsSel.MouseOver}"
							cs:VisualStates.BdrIsEditingMouseOver="{StaticResource Cbx.Bdr.IsEditg.MouseOver}"
							cs:VisualStates.BgDisabled="{StaticResource Cbx.Bg.IsEnabled}"
							cs:VisualStates.BgIsEnabled="{StaticResource Cbx.Bg.IsEnabled}"
							cs:VisualStates.BgIsSel="{StaticResource Cbx.Bg.IsSel}"
							cs:VisualStates.BgIsEditing="{StaticResource Cbx.Bg.IsEditg}"
							cs:VisualStates.BgIsReadOnly="{StaticResource Cbx.Bg.IsReadOnly}"
							cs:VisualStates.BgIsEnabledMouseOver="{StaticResource Cbx.Bg.IsEnabled.MouseOver}"
							cs:VisualStates.BgIsSelMouseOver="{StaticResource Cbx.Bg.IsSel.MouseOver}"
							cs:VisualStates.BgIsEditingMouseOver="{StaticResource Cbx.Bg.IsEditg.MouseOver}"
							cs:VisualStates.FgDisabled="{StaticResource Cbx.Fg.IsEnabled}"
							cs:VisualStates.FgIsEnabled="{StaticResource Cbx.Fg.IsEnabled}"
							cs:VisualStates.FgIsSel="{StaticResource Cbx.Fg.IsSel}"
							cs:VisualStates.FgIsEditing="{StaticResource Cbx.Fg.IsEditg}"
							cs:VisualStates.FgIsReadOnly="{StaticResource Cbx.Fg.IsReadOnly}"
							cs:VisualStates.FgIsEnabledMouseOver="{StaticResource Cbx.Fg.IsEnabled.MouseOver}"
							cs:VisualStates.FgIsSelMouseOver="{StaticResource Cbx.Fg.IsEnabled.MouseOver}"
							cs:VisualStates.FgIsEditingMouseOver="{StaticResource Cbx.Fg.IsEditg.MouseOver}"
							ScrollViewer.CanContentScroll="True"
							ScrollViewer.VerticalScrollBarVisibility="Auto"
							ScrollViewer.HorizontalScrollBarVisibility="Auto"
							>
						<!--  Initialized="CbxStdStyles_Initialized"  -->
						<!--  d:ItemsSource="{x:Static util:UnitStdStylesD.SStdStyles}"  -->
						<!--  d:SelectedIndex="0"  -->
						<ComboBox.Style>
							<Style
									TargetType="ComboBox"
									BasedOn="{StaticResource CtrlWithBdrTrigs.L2}"
									>
								<Setter Property="Template" Value="{StaticResource CsComboBoxCt}" />
							</Style>
						</ComboBox.Style>
					</ComboBox>
					<StackPanel x:Name="SpStyleName"
							Margin="0,5,0,0"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrStyleNameTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Style Name"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrStyleNameValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding Ustyle.Name, FallbackValue=missing}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<StackPanel x:Name="SpStyleDesc"
							Margin="0,5,0,0"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrStyleDescTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Description"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrStyleDescValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding Ustyle.Description, FallbackValue='missing'}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<StackPanel x:Name="SpUnitSystem"
							Margin="0,5,0,0"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrUnitSystemTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Unit System"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrUnitSystemValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding Ustyle.UnitSys, FallbackValue='missing'}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<StackPanel x:Name="SpUnitSymbol"
							Margin="0,5,0,0"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrUnitSymbolTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Symbol"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrUnitSymbolValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding UnitSymbolFormated, FallbackValue='missing'}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<StackPanel x:Name="SpUnitRounding"
							Margin="0,5,0,0"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrUniRoundingTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Rounding"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrUnitRoundingValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding UnitPrecisionFormatted, FallbackValue='missing'}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<StackPanel x:Name="SpUnitLeadZero"
							Margin="0,5,0,0"
							IsEnabled="{Binding UnitLeadZeroEnable}"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrUnitLeadZeroTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Leading Zero"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrUnitLeadZeroValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding UnitLeadZero, FallbackValue='missing'}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<StackPanel x:Name="SpUnitTrailZero"
							Margin="0,5,0,0"
							IsEnabled="{Binding UnitTrailZeroEnable}"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrUnitTrailZeroTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Trailing Zero"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrUnitTrailZeroValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding UnitTrailZero, FallbackValue='missing'}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<StackPanel x:Name="SpUnitExtraSpaces"
							Margin="0,5,0,0"
							IsEnabled="{Binding UnitExtraSpacesEnable}"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrUnitExtraSpacesTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Show Extra Spaces"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrUnitExtraSpacesValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding UnitExtraSpaces, FallbackValue='missing'}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<StackPanel x:Name="SpUnitUsePlus"
							Margin="0,5,0,0"
							IsEnabled="{Binding UnitShowPlusEnable}"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrUnitUsePlusTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Show + for Positive Values"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrUnitUsePlusValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding UnitShowPlus, FallbackValue='missing'}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<StackPanel x:Name="SpUnitUseGroup"
							Margin="0,5,0,0"
							IsEnabled="{Binding UnitDigitGrpEnable}"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrUnitUseGroupTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Use Digit Grouping"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrUnitUseGroupValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding UnitDigitGrp, FallbackValue='missing'}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<StackPanel x:Name="SpUnitSample"
							Margin="0,5,0,0"
							Orientation="Horizontal"
							>
						<Border x:Name="BdrUnitSampleTitle"
								Style="{StaticResource BdrUnitValTitle}"
								>
							<TextBlock
									Text="Style Sample"
									Style="{StaticResource TblkUnitValTitle}"
									/>
						</Border>

						<Border x:Name="BdrUnitSampleValue"
								Style="{StaticResource BdrUnitValue}"
								>
							<TextBlock
									Text="{Binding UnitSampleFormatted, FallbackValue='missing'}"
									Style="{StaticResource TblkUnitValue}"
									/>
						</Border>
					</StackPanel>

					<!--#endregion-->

				</StackPanel>

				<!--#endregion-->

			</DataTemplate>


			<!--#endregion-->

			<!--#region > L4 dt us add style  (DtAddStyle)-->

			<DataTemplate x:Key="DtAddStyle">

				<StackPanel x:Name="SpAddStyleBegin"
						Orientation="Vertical"
						cs:VisualStates.IsModified="False"
						>

					<Border x:Name="BdrHeaderPrime"
							Margin="0,0,0,3"
							HorizontalAlignment="Stretch"
							Style="{StaticResource BdrHeader}"
							>

						<TextBlock
								Margin="5,0,0,2"
								Padding="0"
								FontSize="{StaticResource FontSize.XLarge}"
								Foreground="Black"
								Text="Create New Style"
								/>

					</Border>

					<Border x:Name="GbAddStyle"
							Padding="10,10,10,10"
							CornerRadius="6,6,0,0"
							DataContext="{Binding ElementName=WinUnitStyle}"
							IsEnabled="{Binding CanStyleAdd}"
							d:IsEnabled="True"
							cs:VisualStates.IsSelected="{Binding CanStyleAdd}"
							cs:VisualStates.BgDisabled="{StaticResource AddUnit.Gbdr.Disabled}"
							cs:VisualStates.BgIsEnabled="{StaticResource AddUnit.Gbdr.IsEnabled}"
							Style="{StaticResource BG11}"
							>
						<!--  cs:VisualStates.IsSelected="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}"  -->

						<StackPanel x:Name="SpAddStyle"
								Orientation="Vertical"
								>

							<!--  <ContentControl  -->
							<!--  Visibility="Collapsed"  -->
							<!--  Content="{StaticResource DpChkBxs}"  -->
							<!--  DataContext="{Binding ElementName=GbAddStyle}"  -->
							<!--  />  -->

							<Border x:Name="BdrAddStyleHeader"
									DockPanel.Dock="Top"
									Margin="0,0,0,3"
									Padding="5,0,0,0"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Top"
									cs:VisualStates.BgDisabled="{StaticResource AddUnit.Title.Bg.Disabled}"
									cs:VisualStates.BgIsEnabled="{StaticResource AddUnit.Title.Bg.IsEnabled}"
									Style="{StaticResource BG11}"
									>

								<TextBlock
										Margin="5,3,0,5"
										Padding="0"
										FontSize="{StaticResource FontSize.Large}"
										cs:VisualStates.FgDisabled="{StaticResource AddUnit.Title.Fg.IsEnabled}"
										cs:VisualStates.FgIsSel="{StaticResource AddUnit.Title.Fg.IsSel}"
										Text="Add the Above as a New Style"
										Style="{StaticResource TblkHeaderL1aTrigs}"
										/>
							</Border>

							<Border x:Name="BdrAddStyleGetInfo"
									Margin="0,0,0,0"
									Padding="8,4,8,6"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Top"
									cs:VisualStates.BgDisabled="{StaticResource AddUnit.Title.Bg.Disabled}"
									cs:VisualStates.BgIsEnabled="{StaticResource AddUnit.Title.Bg.IsEnabled}"
									Style="{StaticResource BG11}"
									>

								<StackPanel x:Name="SpStyleName"
										Orientation="Vertical"
										>

									<TextBlock
											Margin="0,0,0,0"
											Padding="0"
											FontSize="{StaticResource FontSize.Large}"
											cs:VisualStates.FgDisabled="{StaticResource AddUnit.SubTitle.Fg.IsEnabled}"
											cs:VisualStates.FgIsSel="{StaticResource AddUnit.SubTitle.Fg.IsSel}"
											Text="Name for new Unit Style?"
											Style="{StaticResource TblkHeaderL1aTrigs}"
											/>

									<!--  the below border / style turns on / off cs:visstates.isediting  -->
									<Border x:Name="BdrStyleName"
											Margin="0,3,0,3"
											cs:VisualStates.IsGoodBad="{Binding Path=IsNewNameOk}"
											Style="{StaticResource BdrValEntry}"
											>

										<DockPanel x:Name="DpStyleName"
												HorizontalAlignment="Stretch"
												>

											<Popup Name="PuEditOptsStyleName"
													cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuStyleNameHelp}"
													cs:CustomProperties.GenericObjectOne="{Binding ElementName=TbxStyleName}"
													PlacementTarget="{Binding ElementName=BdrStyleName}"
													Child="{StaticResource CcEditOptsPopup}"
													Opened="EditOpsPopup_Opened"
													Closed="EditOpsPopup_OnClosed"
													Style="{StaticResource PuBase}"
													/>
											<!--  Button.Click="PuEditOptsStyleName_OnClick"  -->

											<Popup Name="PuStyleNameHelp"
													cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
													cs:VisualStates.TitleText="Style Name Help"
													PlacementTarget="{Binding ElementName=TbxStyleName}"
													Child="{DynamicResource CcHelpPopup}"
													Button.Click="BtnPopupClose_OnClick"
													Style="{StaticResource PuBase}"
													>
											</Popup>

											<TextBox x:Name="TbxStyleName"
													DockPanel.Dock="Top"
													cs:CustomProperties.GenericIntOne="{x:Static cs:UnitStylesMgrWinData.POPUP_NEW_STYLE_NAME}"
													cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuEditOptsStyleName}"

													cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.Disabled}"
													cs:VisualStates.FgIsEditing="{StaticResource ValEntry.Fg.IsEditg}"
													cs:VisualStates.FgIsLocked="{StaticResource ValEntry.Fg.IsLocked}"
													cs:VisualStates.FgIsReadOnly="{StaticResource ValEntry.Fg.IsReadOnly}"
													cs:VisualStates.FgIsSel="{StaticResource ValEntry.Fg.IsSel}"
													cs:VisualStates.FgIsEnabled="{StaticResource ValEntry.Fg.IsEnabled}"

													cs:VisualStates.FgIsEnabledMouseOver="{StaticResource ValEntry.Fg.IsEnabled.MouseOver}"
													cs:VisualStates.FgIsSelMouseOver="{StaticResource ValEntry.Fg.IsSel.MouseOver}"
													cs:VisualStates.FgIsEditingMouseOver="{StaticResource ValEntry.Fg.IsEditg.MouseOver}"

													GotFocus="Tbx_OnGotFocus"
													LostFocus="Tbx_OnLostFocus"
													ToolTip="{Binding NewNameToolTip, Mode=OneWay}"
													Text="{Binding NewName, Mode=TwoWay, FallbackValue='New Style Name'}"
													>

												<TextBox.Style>
													<Style
															TargetType="TextBox"
															BasedOn="{StaticResource TbxEditable}"
															>
													</Style>
												</TextBox.Style>
											</TextBox>

											<!--  <ContentControl  -->
											<!--  Visibility="Visible"  -->
											<!--  Content="{StaticResource DpChkBxs}"  -->
											<!--  DataContext="{Binding ElementName=TbxStyleName}"  -->
											<!--  />  -->

										</DockPanel>

									</Border>

									<TextBlock
											Margin="0,2,0,0"
											Padding="0"
											FontSize="{StaticResource FontSize.Large}"
											cs:VisualStates.FgDisabled="{StaticResource AddUnit.SubTitle.Fg.IsEnabled}"
											cs:VisualStates.FgIsSel="{StaticResource AddUnit.SubTitle.Fg.IsSel}"
											Text="Description for new Unit Style?"
											Style="{StaticResource TblkHeaderL1aTrigs}"
											/>

									<!--  the below border / style turns on / off cs:visstates.isediting  -->
									<Border x:Name="BdrStyleDesc"
											Margin="0,3,0,3"
											cs:VisualStates.IsGoodBad="{Binding Path=IsNewDescOk}"
											Style="{StaticResource BdrValEntry}"
											>

										<DockPanel HorizontalAlignment="Stretch">

											<Popup Name="PuEditOptsStyleDesc"
													Focusable="False"
													cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuStyleDescHelp}"
													cs:CustomProperties.GenericObjectOne="{Binding ElementName=TbxStyleDesc}"
													PlacementTarget="{Binding ElementName=BdrStyleDesc}"
													Child="{StaticResource CcEditOptsPopup}"
													Opened="EditOpsPopup_Opened"
													Closed="EditOpsPopup_OnClosed"
													Style="{StaticResource PuBase}"
													/>
											<!--  Button.Click="PuEditOptsStyleName_OnClick"  -->

											<Popup Name="PuStyleDescHelp"
													Focusable="False"
													cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
													cs:VisualStates.TitleText="Style Desc Help"
													PlacementTarget="{Binding ElementName=TbxStyleDesc}"
													Button.Click="BtnPopupClose_OnClick"
													Child="{DynamicResource CcHelpPopup}"
													Style="{StaticResource PuBase}"
													>
											</Popup>

											<TextBox x:Name="TbxStyleDesc"
													DockPanel.Dock="Top"
													cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuEditOptsStyleDesc}"
													cs:CustomProperties.GenericIntOne="{x:Static cs:UnitStylesMgrWinData.POPUP_NEW_STYLE_DESC}"

													cs:VisualStates.FgDisabled="{StaticResource ValEntry.Fg.Disabled}"
													cs:VisualStates.FgIsEditing="{StaticResource ValEntry.Fg.IsEditg}"
													cs:VisualStates.FgIsLocked="{StaticResource ValEntry.Fg.IsLocked}"
													cs:VisualStates.FgIsReadOnly="{StaticResource ValEntry.Fg.IsReadOnly}"
													cs:VisualStates.FgIsSel="{StaticResource ValEntry.Fg.IsSel}"
													cs:VisualStates.FgIsEnabled="{StaticResource ValEntry.Fg.IsEnabled}"

													cs:VisualStates.FgIsEditingMouseOver="{StaticResource ValEntry.Fg.IsEditg.MouseOver}"
													cs:VisualStates.FgIsEnabledMouseOver="{StaticResource ValEntry.Fg.IsEnabled.MouseOver}"
													cs:VisualStates.FgIsSelMouseOver="{StaticResource ValEntry.Fg.IsSel.MouseOver}"

													GotFocus="Tbx_OnGotFocus"
													LostFocus="Tbx_OnLostFocus"
													Text="{Binding NewDesc, Mode=TwoWay, FallbackValue='New Style Description'}"
													ToolTip="{Binding NewDescToolTip, Mode=OneWay}"
													>
												<TextBox.Style>
													<Style
															TargetType="TextBox"
															BasedOn="{StaticResource TbxEditable}"
															>
													</Style>
												</TextBox.Style>

											</TextBox>


											<!--  <ContentControl  -->
											<!--  Content="{StaticResource DpChkBxs}"  -->
											<!--  Visibility="Collapsed"  -->
											<!--  DataContext="{Binding ElementName=TbxStyleDesc}"  -->
											<!--  />  -->

										</DockPanel>

									</Border>

								</StackPanel>

							</Border>

							<!--  <DockPanel x:Name="AddUnitControl"  -->
							<!--  Height="{StaticResource Btn.Height.Std}"  -->
							<!--  Margin="0,8,0,0"  -->
							<!--  HorizontalAlignment="Stretch"  -->
							<!--  >  -->
							<!--    -->
							<!--  <Button x:Name="BtnAddBefore"  -->
							<!--  Content="Add Before"  -->
							<!--  DockPanel.Dock="left"  -->
							<!--  Height="{StaticResource Btn.Height.Std}"  -->
							<!--  Width="90"  -->
							<!--  HorizontalAlignment="Left"  -->
							<!--  VerticalAlignment="Bottom"  -->
							<!--  IsEnabled="{Binding Path=CanAddBefore}"  -->
							<!--  Style="{StaticResource Btn.Std}"  -->
							<!--  Click="BtnAddBefore_OnClick"  -->
							<!--  />  -->
							<!--    -->
							<!--  ~1~  the below border / style turns on / off cs:visstates.isediting  @1@  -->
							<!--  <Border x:Name="BdrAddPosition"  -->
							<!--  DockPanel.Dock="Left"  -->
							<!--  Width="{StaticResource AddPositionWidth}"  -->
							<!--  Margin="10,0,0,0"  -->
							<!--  VerticalAlignment="Stretch"  -->
							<!--  cs:VisualStates.IsGoodBad="{Binding Path=IsInsPosOk}"  -->
							<!--  Style="{StaticResource BdrValEntry}"  -->
							<!--  >  -->
							<!--    -->
							<!-- 		<DockPanel> -->
							<!--    -->
							<!--  <Button x:Name="BtnStylePositionHelp"  -->
							<!--  DockPanel.Dock="Right"  -->
							<!--  Width="{StaticResource IconEditStatusWidth}"  -->
							<!--  Padding="1.5,1,1.5,1"  -->
							<!--  HorizontalAlignment="Right"  -->
							<!--  cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuStylePosition}"  -->
							<!--  Style="{StaticResource BtnValEntryEditHelp}"  -->
							<!--  Click="BtnPopupInfoStart_OnClick"  -->
							<!--  >  -->
							<!-- 				<Button.Content> -->
							<!--  <Path x:Name="PathPositionHelp"  -->
							<!--  Style="{StaticResource PathAddStyleEditHelp.Icon}"  -->
							<!--  >  -->
							<!-- 					</Path> -->
							<!-- 				</Button.Content> -->
							<!-- 			</Button> -->
							<!--    -->
							<!--  <Popup Name="PuStylePosition"  -->
							<!--  DockPanel.Dock="Right"  -->
							<!--  cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"  -->
							<!--  cs:VisualStates.TitleText="Style Position Help"  -->
							<!--  Button.Click="BtnPopupClose_OnClick"  -->
							<!--  PlacementTarget="{Binding ElementName=TbxAddPosition}"  -->
							<!--  Child="{DynamicResource CcHelpPopup}"  -->
							<!--  Style="{StaticResource PuBase}"  -->
							<!--  >  -->
							<!--  ~1~  MouseEnter="Popup_OnMouseEnter"  @1@  -->
							<!--  ~1~  MouseLeave="Popup_OnMouseLeave"  @1@  -->
							<!-- 			</Popup> -->
							<!--    -->
							<!--  <TextBox x:Name="TbxAddPosition"  -->
							<!--  DockPanel.Dock="Left"  -->
							<!--  Width="55"  -->
							<!--  HorizontalAlignment="Left"  -->
							<!--  AcceptsReturn="False"  -->
							<!--  AcceptsTab="False"  -->
							<!--  AutoWordSelection="True"  -->
							<!--  Background="Transparent"  -->
							<!--  BorderThickness="0"  -->
							<!--  CaretBrush="White"  -->
							<!--  FontSize="{StaticResource FontSize.Large}"  -->
							<!--  Foreground="White"  -->
							<!--  Margin="2,0,2,0"  -->
							<!--  Padding="0,0,0,2"  -->
							<!--  Text="{Binding ElementName=WinUnitStyle, Path=InsPosition, StringFormat='{}{0:D}', Mode=TwoWay, FallbackValue=2}"  -->
							<!--  TextAlignment="Center"  -->
							<!--  VerticalAlignment="Center"  -->
							<!--  ToolTip="{Binding InsPosToolTip, Mode=OneWay}"  -->
							<!--  Template="{StaticResource CtTextBox}"  -->
							<!--  />  -->
							<!--    -->
							<!-- 		</DockPanel> -->
							<!--    -->
							<!-- 	</Border> -->
							<!--    -->
							<!--  <Button x:Name="BtnAddLast"  -->
							<!--  Content="Add Last"  -->
							<!--  DockPanel.Dock="Right"  -->
							<!--  Height="{StaticResource Btn.Height.Std}"  -->
							<!--  Width="{StaticResource Btn.Width.Narrow}"  -->
							<!--  HorizontalAlignment="Right"  -->
							<!--  VerticalAlignment="Bottom"  -->
							<!--  IsEnabled="{Binding Path=CanAddAfter}"  -->
							<!--  Style="{StaticResource Btn.Std}"  -->
							<!--  Click="BtnAddLast_OnClick"  -->
							<!--  />  -->
							<!--    -->
							<!-- </DockPanel> -->

						</StackPanel>

					</Border>

				</StackPanel>


			</DataTemplate>

			<!--#endregion-->

			<!--#region > L4 dt us add style control  (DtAddStyleCtrl)-->

			<DataTemplate x:Key="DtAddStyleCtrl">

				<Border x:Name="GbAddStyleCtrl"
						DockPanel.Dock="Bottom"
						Margin="0,3,0,0"
						Padding="10,5,10,5"
						CornerRadius="0,0,6,6"
						VerticalAlignment="Stretch"
						DataContext="{Binding ElementName=WinUnitStyle}"
						IsEnabled="{Binding CanStyleAdd}"
						d:IsEnabled="True"
						cs:VisualStates.IsSelected="{Binding CanStyleAdd}"
						cs:VisualStates.BgDisabled="{StaticResource AddUnit.Gbdr.Disabled}"
						cs:VisualStates.BgIsEnabled="{StaticResource AddUnit.Gbdr.IsEnabled}"
						Style="{StaticResource BG11}"
						>

					<DockPanel x:Name="AddUnitControl"
							Height="{StaticResource Btn.Height.Std}"
							Margin="0,0,0,0"
							HorizontalAlignment="Stretch"
							>

						<Button x:Name="BtnAddBefore"
								Content="Add Before"
								DockPanel.Dock="left"
								Height="{StaticResource Btn.Height.Std}"
								Width="90"
								HorizontalAlignment="Left"
								VerticalAlignment="Bottom"
								IsEnabled="{Binding Path=CanAddBefore}"
								Style="{StaticResource Btn.Std}"
								Click="BtnAddBefore_OnClick"
								/>

						<!--  the below border / style turns on / off cs:visstates.isediting  -->
						<Border x:Name="BdrAddPosition"
								DockPanel.Dock="Left"
								Width="{StaticResource AddPositionWidth}"
								Margin="10,0,0,0"
								VerticalAlignment="Stretch"
								cs:VisualStates.IsGoodBad="{Binding Path=IsInsPosOk}"
								Style="{StaticResource BdrValEntry}"
								>

							<DockPanel>

								<Button x:Name="BtnStylePositionHelp"
										DockPanel.Dock="Right"
										Width="{StaticResource IconEditStatusWidth}"
										Padding="1.5,1,1.5,1"
										HorizontalAlignment="Right"
										cs:CustomProperties.GenericPopupOne="{Binding ElementName=PuStylePosition}"
										Style="{StaticResource BtnValEntryEditHelp}"
										Click="BtnPopupInfoStart_OnClick"
										>
									<Button.Content>
										<Path x:Name="PathPositionHelp"
												Style="{StaticResource PathAddStyleEditHelp.Icon}"
												>
										</Path>
									</Button.Content>
								</Button>

								<Popup Name="PuStylePosition"
										DockPanel.Dock="Right"
										cs:VisualStates.MainContent="Provide the name for the subject following these requirements&#013;&#x25CF;  Must Being with an Alpha&#013;    Character&#013;&#x25CF;  Minimum of 4 Characters&#013;&#x25CF;  Only Numbers and letters"
										cs:VisualStates.TitleText="Style Position Help"
										Button.Click="BtnPopupClose_OnClick"
										PlacementTarget="{Binding ElementName=TbxAddPosition}"
										Child="{DynamicResource CcHelpPopup}"
										Style="{StaticResource PuBase}"
										>
									<!--  MouseEnter="Popup_OnMouseEnter"  -->
									<!--  MouseLeave="Popup_OnMouseLeave"  -->
								</Popup>

								<TextBox x:Name="TbxAddPosition"
										DockPanel.Dock="Left"
										Height="{StaticResource Btn.Height.Std}"
										Width="55"
										HorizontalAlignment="Left"
										AcceptsReturn="False"
										AcceptsTab="False"
										AutoWordSelection="True"
										FontSize="{StaticResource FontSize.Large}"
										Foreground="White"
										Margin="2,0,2,0"
										Padding="0,2,0,0"
										Text="{Binding ElementName=WinUnitStyle, Path=InsPosition, StringFormat='{}{0:D}', Mode=TwoWay, FallbackValue=2}"
										TextAlignment="Center"
										VerticalAlignment="Center"
										ToolTip="{Binding InsPosToolTip, Mode=OneWay}"
										Style="{StaticResource TbxEditable}"
										/>

							</DockPanel>

						</Border>

						<Button x:Name="BtnAddLast"
								Content="Add Last"
								DockPanel.Dock="Right"
								Height="{StaticResource Btn.Height.Std}"
								Width="{StaticResource Btn.Width.Narrow}"
								HorizontalAlignment="Right"
								VerticalAlignment="Bottom"
								IsEnabled="{Binding Path=CanAddAfter}"
								Style="{StaticResource Btn.Std}"
								Click="BtnAddLast_OnClick"
								/>

					</DockPanel>
				</Border>

			</DataTemplate>

			<!--#endregion-->

			<!--#region > L4 dt us saved styles  (DtSavedStyles)-->

			<DataTemplate x:Key="DtSavedStyles">

				<DockPanel x:Name="DpSavedStyles1"
						DataContext="{Binding ElementName=WinUnitStyle}"
						>

					<Border x:Name="BdrSsHeader"
							DockPanel.Dock="Top"
							Margin="0,0,0,3"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Top"
							Style="{StaticResource BdrHeader}"
							>
						<TextBlock
								FontSize="{StaticResource FontSize.XLarge}"
								Text="Saved Styles"
								Style="{StaticResource TblkHeader}"
								/>
					</Border>

					<Border x:Name="BdrSavedStyles"
							Padding="4,8,3,4"
							CornerRadius="6,6,0,0"
							Background="{StaticResource SavedStyles.Bg.Panel}"
							>

						<DockPanel x:Name="DpSavedStyles2"
								DockPanel.Dock="Top"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								>
							<!--    -->
							<!--  <DockPanel x:Name="DpSavedStylesCtrl"  -->
							<!--  DockPanel.Dock="Bottom"  -->
							<!--  Margin="0,10,0,0"  -->
							<!--  >  -->
							<!--    -->
							<!--  <Button x:Name="BtnUp"  -->
							<!--  DockPanel.Dock="Left"  -->
							<!--  Height="{StaticResource Btn.Height.Std}"  -->
							<!--  Width="40"  -->
							<!--  Margin="0,0,5,0"  -->
							<!--  HorizontalAlignment="left"  -->
							<!--  Style="{StaticResource Btn.Std}"  -->
							<!--  Click="BtnUp_OnClick"  -->
							<!--  >  -->
							<!--  <TextBlock  -->
							<!--  Padding="10,0,10,4"  -->
							<!--  FontSize="{StaticResource FontSize.Large}"  -->
							<!--  Text="▲"  -->
							<!--  />  -->
							<!-- 		</Button> -->
							<!--    -->
							<!--  <Button x:Name="BtnDn"  -->
							<!--  DockPanel.Dock="left"  -->
							<!--  Height="{StaticResource Btn.Height.Std}"  -->
							<!--  Width="40"  -->
							<!--  Margin="0,0,5,0"  -->
							<!--  HorizontalAlignment="left"  -->
							<!--  Style="{StaticResource Btn.Std}"  -->
							<!--  Click="BtnDn_OnClick"  -->
							<!--  >  -->
							<!--  <TextBlock  -->
							<!--  Padding="10,2,10,4"  -->
							<!--  FontSize="{StaticResource FontSize.Large}"  -->
							<!--  Text="▼"  -->
							<!--  />  -->
							<!-- 		</Button> -->
							<!--    -->
							<!--  <Button x:Name="BtnDelete"  -->
							<!--  DockPanel.Dock="Left"  -->
							<!--  Height="{Binding ActualHeight, ElementName=BtnDn, FallbackValue=18}"  -->
							<!--  Width="{Binding ActualWidth, ElementName=BtnDn, FallbackValue=18}"  -->
							<!--  HorizontalAlignment="Left"  -->
							<!--  Foreground="White"  -->
							<!--  Template="{StaticResource Button.Normal.ControlTemplate}"  -->
							<!--  Click="BtnDelete_OnClick"  -->
							<!--  >  -->
							<!-- 			<Button.Background> -->
							<!-- 				<SolidColorBrush Color="{StaticResource Deep.Orange.500}" /> -->
							<!-- 			</Button.Background> -->
							<!--  <Path  -->
							<!--  Fill="White"  -->
							<!--  Margin="0,0,3,2"  -->
							<!--  HorizontalAlignment="Center"  -->
							<!--  Data="{StaticResource IconDelete}"  -->
							<!--  />  -->
							<!--    -->
							<!-- 		</Button> -->

							<!--  <Border x:Name="ChangeCount"  -->
							<!--  DockPanel.Dock="Left"  -->
							<!--  Margin="0,0,0,0"  -->
							<!--  HorizontalAlignment="Right"  -->
							<!--  VerticalAlignment="Stretch"  -->
							<!--  BorderThickness="1"  -->
							<!--  BorderBrush="White"  -->
							<!--  Visibility="Visible"  -->
							<!--  CornerRadius="{StaticResource CornerRadius.Std}"  -->
							<!--  >  -->
							<!--  <TextBlock DockPanel.Dock="Right"  -->
							<!--  Width="60"  -->
							<!--  Margin="0"  -->
							<!--  Padding="5,0,5,2"  -->
							<!--  HorizontalAlignment="Right"  -->
							<!--  VerticalAlignment="Center"  -->
							<!--  FontSize="{StaticResource FontSize.Large}"  -->
							<!--  Background="Transparent"  -->
							<!--  Foreground="White"  -->
							<!--  Text="{Binding HasChanges, FallbackValue=0, StringFormat=\{0:D2\}}"  -->
							<!--  TextAlignment="Center"  -->
							<!--  />  -->
							<!-- </Border> -->


							<!-- </DockPanel> -->

							<ListBox x:Name="Lbx1"
									DockPanel.Dock="Top"
									Background="Transparent"
									BorderThickness="0"
									HorizontalAlignment="Left"
									HorizontalContentAlignment="Stretch"
									IsEnabled="True"
									IsSynchronizedWithCurrentItem="True"
									Margin="0,0,0,0"
									Padding="0,0,0,0"
									VerticalAlignment="Top"
									DataContext="{Binding WkgUserStylesView, ElementName=WinUnitStyle}"
									ItemsSource="{Binding}"
									SelectedIndex="{Binding LbxSelIndex, ElementName=WinUnitStyle, Mode=TwoWay}"
									SelectedItem="{Binding LbxSelItem, ElementName=WinUnitStyle, Mode=OneWayToSource}"
									ItemContainerStyle="{DynamicResource Lbx1ItemContainerStyle1}"
									ItemTemplate="{StaticResource Lbx1ItemTemplate}"
									d:SelectedIndex="1"
									d:DataContext="{x:Static util:UnitStdStylesD.ListD}"
									Initialized="lbx_Initialized"
									>
								<!-- DataContext="{Binding WkgUserStylesView, ElementName=WinUnitStyle}" -->
								<!-- d:DataContext="{x:Static util:UnitStdStylesD.ListD}" -->
								<ListBox.Resources>

									<Style
											TargetType="{x:Type ScrollViewer}"
											BasedOn="{StaticResource SvStyle}"
											/>

								</ListBox.Resources>

							</ListBox>



						</DockPanel>
					</Border>


				</DockPanel>

			</DataTemplate>

			<!--#endregion-->

			<!--#region > L4 dt us saved style control  (DtSavedStylesCtrl)-->

			<DataTemplate x:Key="DtSavedStylesCtrl">


				<Border x:Name="BdrSsCtrlHeader"
						Margin="0,3,0,0"
						CornerRadius="0,0,6,6"
						Padding="10,5,10,5"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						DataContext="{Binding ElementName=WinUnitStyle}"
						IsEnabled="{Binding CanStyleAdd}"
						Background="{StaticResource AddUnit.Gbdr.IsEnabled}"
						>


					<DockPanel x:Name="DpSavedStylesCtrl"
							DockPanel.Dock="Bottom"
							Margin="0,0,0,0"
							>

						<Button x:Name="BtnUp"
								DockPanel.Dock="Left"
								Height="{StaticResource Btn.Height.Std}"
								Width="40"
								Margin="0,0,5,0"
								HorizontalAlignment="left"
								Style="{StaticResource Btn.Std}"
								Click="BtnUp_OnClick"
								>
							<TextBlock
									Padding="10,0,10,4"
									FontSize="{StaticResource FontSize.Large}"
									Text="▲"
									/>
						</Button>

						<Button x:Name="BtnDn"
								DockPanel.Dock="left"
								Height="{StaticResource Btn.Height.Std}"
								Width="40"
								Margin="0,0,5,0"
								HorizontalAlignment="left"
								Style="{StaticResource Btn.Std}"
								Click="BtnDn_OnClick"
								>
							<TextBlock
									Padding="10,2,10,4"
									FontSize="{StaticResource FontSize.Large}"
									Text="▼"
									/>
						</Button>

						<Button x:Name="BtnDelete"
								DockPanel.Dock="Left"
								Height="{Binding ActualHeight, ElementName=BtnDn, FallbackValue=18}"
								Width="{Binding ActualWidth, ElementName=BtnDn, FallbackValue=18}"
								HorizontalAlignment="Left"
								Foreground="White"
								Template="{StaticResource Button.Normal.ControlTemplate}"
								Click="BtnDelete_OnClick"
								>
							<Button.Background>
								<SolidColorBrush Color="{StaticResource Deep.Orange.500}" />
							</Button.Background>
							<Path
									Fill="White"
									Margin="0,0,3,2"
									HorizontalAlignment="Center"
									Data="{StaticResource IconDelete}"
									/>

						</Button>

					</DockPanel>


				</Border>

				<!--  DockPanel.Dock="Bottom"  -->
				<!--  Margin="0,3,0,0"  -->
				<!--  Padding="10,5,10,5"  -->
				<!--  CornerRadius="0,0,6,6"  -->
				<!--  VerticalAlignment="Stretch"  -->
				<!--  DataContext="{Binding ElementName=WinUnitStyle}"  -->
				<!--  IsEnabled="{Binding CanStyleAdd}"  -->


			</DataTemplate>

			<!--#endregion-->

			<!--#region > L4 dt us dialog control - unit settings-->

			<DataTemplate x:Key="DtDlgCtrlUnitSetg">

				<StackPanel x:Name="SpUnitSetg"
						Grid.Column="1"
						Grid.Row="2"
						Margin="0,0,0,0"
						HorizontalAlignment="Right"
						VerticalAlignment="Bottom"
						Orientation="Horizontal"
						>

					<DockPanel x:Name="DialogControls">

						<Button x:Name="BtnUsDebug"
								Content="Debug"
								Height="{StaticResource Btn.Height.Std}"
								Width="{StaticResource Btn.Width.Std}"
								Margin="10,0,0,0"
								HorizontalAlignment="Right"
								Style="{StaticResource Btn.Std}"
								Click="BtnDebug_OnClick"
								/>

						<Button x:Name="BtnUsReset"
								Content="Reset"
								Height="{StaticResource Btn.Height.Std}"
								Width="{StaticResource Btn.Width.Std}"
								Margin="10,0,0,0"
								HorizontalAlignment="Right"
								Style="{StaticResource Btn.Std}"
								Click="BtnReset_OnClick"
								/>

						<Button x:Name="BtnUsCancel"
								Content="Cancel"
								Height="{StaticResource Btn.Height.Std}"
								Width="{StaticResource Btn.Width.Std}"
								Margin="10,0,0,0"
								HorizontalAlignment="Right"
								Style="{StaticResource Btn.Std}"
								Click="BtnCancel_OnClick"
								/>


						<Button x:Name="BtnUsApply"
								Content="Apply"
								Height="{StaticResource Btn.Height.Std}"
								Width="{StaticResource Btn.Width.Std}"
								Margin="10,0,0,0"
								HorizontalAlignment="Right"
								Style="{StaticResource Btn.Std}"
								Click="BtnApply_OnClick"
								/>

						<Button x:Name="BtnUsDone"
								Content="Done"
								Height="{StaticResource Btn.Height.Std}"
								Width="{StaticResource Btn.Width.Std}"
								Margin="10,0,0,0"
								HorizontalAlignment="Right"
								Style="{StaticResource Btn.Std}"
								Click="BtnDone_OnClick"
								/>

					</DockPanel>
				</StackPanel>

			</DataTemplate>

			<!--#endregion-->

			<!--#region > L4 dt so main style order (DtStyleOrder)-->

			<DataTemplate x:Key="DtStyleOrder">

				<Grid x:Name="GrdStyleOrder">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="{StaticResource Col.So.RibbonList.Width}" />
						<ColumnDefinition x:Name="divider1"
								Width="5"
								/>
						<ColumnDefinition Width="{StaticResource Col.So.DlxMeasureLeft.Width}" />
						<ColumnDefinition x:Name="divider2"
								Width="5"
								/>
						<ColumnDefinition Width="{StaticResource Col.So.DlxMeasureRight.Width}" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="{StaticResource Row.So.Main.Height}" />
						<RowDefinition Height="{StaticResource Row.So.Function.Height}" />
					</Grid.RowDefinitions>

					<ContentControl x:Name="CtSoRibbonOrder"
							Grid.Column="0"
							Grid.Row="0"
							ContentTemplate="{StaticResource DtSoRibbonOrder}"
							/>

					<ContentControl x:Name="DtSoDlxMeasureLeftOrder"
							Grid.Column="2"
							Grid.Row="0"
							ContentTemplate="{StaticResource DtSoDlxMeasureLeftOrder}"
							/>

					<ContentControl x:Name="DtSoDlxMeasureRightOrder"
							Grid.Column="4"
							Grid.Row="0"
							ContentTemplate="{StaticResource DtSoDlxMeasureRightOrder}"
							/>

				</Grid>

				<!--  DtSoRibbonOrder  -->


			</DataTemplate>

			<!--#endregion-->

			<!--#region > L4 dt us main unit styles (DtUnitStyles)-->

			<DataTemplate x:Key="DtUnitStyles">

				<Grid x:Name="GrdUnitStyles">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="{StaticResource Col.Us.UnitSettings.Width}" />
						<ColumnDefinition x:Name="divider"
								Width="5"
								/>
						<ColumnDefinition Width="{StaticResource Col.Us.StylesChart.Width}" />
					</Grid.ColumnDefinitions>

					<Grid.RowDefinitions>
						<RowDefinition Height="{StaticResource Row.Us.Main.Height}" />
						<RowDefinition Height="{StaticResource Row.Us.Function.Height}" />
					</Grid.RowDefinitions>


					<DockPanel x:Name="DpUnitSettings"
							Grid.Column="0"
							Grid.Row="0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							>

						<ContentControl x:Name="CtUnitSettings"
								DockPanel.Dock="Top"
								VerticalAlignment="Top"
								ContentTemplate="{StaticResource DtUnitSettings}"
								/>
						
						<ContentControl x:Name="CtAddStyle"
								DockPanel.Dock="Bottom"
								VerticalAlignment="Bottom"
								ContentTemplate="{StaticResource DtAddStyle}"
								/>

					</DockPanel>

					<ContentControl x:Name="CcAddStyleCtrl"
							Grid.Column="0"
							Grid.Row="1"
							VerticalAlignment="Stretch"
							ContentTemplate="{StaticResource DtAddStyleCtrl}"
							/>

					<ContentControl x:Name="CtSavedStyle"
							DockPanel.Dock="Top"
							Grid.Column="2"
							Grid.Row="0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							ContentTemplate="{StaticResource DtSavedStyles}"
							/>
					
					<ContentControl x:Name="CcSavedStylesCtrl"
							Grid.Column="2"
							Grid.Row="1"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							ContentTemplate="{StaticResource DtSavedStylesCtrl}"
							/>

				</Grid>

			</DataTemplate>

			<!--#endregion-->

		</ResourceDictionary>

	</Window.Resources>

	<DockPanel x:Name="DpMain"
			Visibility="Visible"
			VerticalAlignment="Top"
			>


		<!--#region > L4 Main Content selector-->
		<Grid Margin="15,12,8,8">

			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="2*" />
			</Grid.ColumnDefinitions>

			<Grid.RowDefinitions>
				<RowDefinition Height="{StaticResource Row.Main.Height}" />
				<RowDefinition Height="{StaticResource Row.Control.Height}" />
			</Grid.RowDefinitions>

			<!-- <Grid.Style> -->
			<!-- 	<Style TargetType="Grid"> -->
					<!-- <Setter Property="Height" Value="700" /> -->

					<!-- <Style.Triggers> -->
					<!--    -->
					<!-- <DataTrigger Binding="{Binding ElementName=DpMain, Path=IsEnabled}" Value="True"> -->
					<!--    -->
					<!-- 		<DataTrigger.EnterActions> -->
					<!-- 			<BeginStoryboard> -->
					<!-- 				<Storyboard> -->
					<!--  <DoubleAnimation  -->
					<!--    -->
					<!--  Storyboard.TargetProperty="Opacity"  -->
					<!--  From="0"  -->
					<!--  To="1"  -->
					<!--  Duration="0:0:1.2"  -->
					<!--  />  -->
					<!-- 				</Storyboard> -->
					<!-- 			</BeginStoryboard> -->
					<!-- 		</DataTrigger.EnterActions> -->
					<!-- 		<DataTrigger.ExitActions> -->
					<!-- 			<BeginStoryboard> -->
					<!-- 				<Storyboard> -->
					<!--  <DoubleAnimation  -->
					<!--  Storyboard.TargetProperty="Height"  -->
					<!--  From="725"  -->
					<!--  To="0"  -->
					<!--  Duration="0:0:1.5"  -->
					<!--  />  -->
					<!-- 				</Storyboard> -->
					<!-- 			</BeginStoryboard> -->
					<!-- 		</DataTrigger.ExitActions> -->
					<!-- 	</DataTrigger> -->
					<!-- </Style.Triggers> -->
			<!-- 	</Style> -->
			<!-- </Grid.Style> -->

			<StackPanel x:Name="SpOpSelect"
					Grid.Column="0"
					Grid.Row="1"
					Orientation="Horizontal"
					>

				<Button x:Name="BtnSoShowStyleOrder"
						Content="Adjust Style Order"
						Height="{StaticResource Btn.Height.Std}"
						Width="Auto"
						Margin="0,0,10,0"
						HorizontalAlignment="Left"
						VerticalAlignment="Bottom"
						Style="{StaticResource Btn.Std}"
						/>


			</StackPanel>

			<ContentControl x:Name="CtMainContent"
					Grid.Column="0"
					Grid.Row="0"
					Grid.ColumnSpan="2"
					DataContext="{Binding ElementName=WinUnitStyle}"
					>
				<ContentControl.Style>
					<Style TargetType="ContentControl">
						<Style.Triggers>

							<DataTrigger Value="0" Binding="{Binding DialogIndex, FallbackValue='0'}">
								<Setter Property="ContentTemplate" Value="{StaticResource DtUnitStyles}" />
							</DataTrigger>

							<DataTrigger Value="1" Binding="{Binding DialogIndex, FallbackValue='0'}">
								<Setter Property="ContentTemplate" Value="{StaticResource DtStyleOrder}" />
							</DataTrigger>

						</Style.Triggers>
					</Style>
				</ContentControl.Style>
			</ContentControl>

			<ContentControl x:Name="CtDialogControl"
					Grid.Column="1"
					Grid.Row="1"
					DataContext="{Binding ElementName=WinUnitStyle}"
					>
				<ContentControl.Style>
					<Style TargetType="ContentControl">
						<Style.Triggers>
							<DataTrigger Value="0" Binding="{Binding DialogIndex, FallbackValue='0'}">
								<Setter Property="ContentTemplate" Value="{StaticResource DtDlgCtrlUnitSetg}" />
							</DataTrigger>
							<DataTrigger Value="1" Binding="{Binding DialogIndex, FallbackValue='0'}">
								<Setter Property="ContentTemplate" Value="{StaticResource DtDlgCtrlStyleOrder}" />
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</ContentControl.Style>
			</ContentControl>


			<!--  <Button x:Name="junk"  -->
			<!--  Visibility="Collapsed"  -->
			<!--  Tag="{x:Static local:UnitStylesMgr.RIBBONFAV}"  -->
			<!--  Content="{x:Static local:UnitStylesMgr.RIBBONFAVORITE}"  -->
			<!--  />  -->

		</Grid>
		<!--#endregion-->

		<!-- </Expander> -->

	</DockPanel>



</Window>
